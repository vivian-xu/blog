{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/job.png","path":"images/job.png","modified":0,"renderable":0},{"_id":"source/images/sup-polo.png","path":"images/sup-polo.png","modified":0,"renderable":0},{"_id":"source/images/sup-shop.jpeg","path":"images/sup-shop.jpeg","modified":0,"renderable":0},{"_id":"source/images/guoguo_sample.png","path":"images/guoguo_sample.png","modified":0,"renderable":0},{"_id":"source/images/guoguo.png","path":"images/guoguo.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/404.html","hash":"310fc37341c13586d09c4d1d82ca51ed082d6481","modified":1480843274000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1480701901000},{"_id":"source/.DS_Store","hash":"6974ddb0953597b845d10c3aec9016f9ed161fbb","modified":1480919469000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1480701901000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1480701901000},{"_id":"themes/next/.DS_Store","hash":"153cd9e7520c0ef5312901557b4353b0f9ceb534","modified":1480905451000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1480701901000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1480701901000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1480701901000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1480701901000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1480701901000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1480701901000},{"_id":"themes/next/_config.yml","hash":"8baa1b6e38a1d769b7c13267bb27f8fc8121a144","modified":1480906287000},{"_id":"themes/next/gulpfile.coffee","hash":"61ef0606a8134894d7ac796bc8d0fa4ba6a94483","modified":1480701901000},{"_id":"themes/next/package.json","hash":"877cb98025e59015532c4c9a04a33e2af4ad56f9","modified":1480701901000},{"_id":"source/_drafts/this","hash":"65ad73f17f7f8741ec6f372ae44dbd9263fad64f","modified":1480940418000},{"_id":"source/_drafts/Cookie.md","hash":"bffb6b20a08793f2fdab2c3948b0a927604f9ae7","modified":1480763169000},{"_id":"source/_posts/React Review .md","hash":"17bc74afccd42f1feb8a7549c6cd32ab7b318ab9","modified":1481270796000},{"_id":"source/_posts/Web-storage.md","hash":"41c1f80b9ab07f73cd11cef60b3bea9a5840968f","modified":1480918822000},{"_id":"source/_posts/ci.md","hash":"2f4826ec686930894816b01df9fe307da94d9163","modified":1481271663000},{"_id":"source/_posts/es6-arrowfunction.mdown","hash":"241e9017f4feaeef07e41b5e54c30cb1c66bd535","modified":1480918769000},{"_id":"source/_posts/closure.md","hash":"f8d0433525920966551546babf534ec07ef94c3f","modified":1481352591000},{"_id":"source/_posts/execution context.md","hash":"ded4dd7243506b465d104021754393aab5ee3730","modified":1480919625000},{"_id":"source/_posts/start.md","hash":"3e9ab63f9822e8751418f12ec3ee4ebba981987c","modified":1480914115000},{"_id":"source/_posts/nodelist.md","hash":"cba58369f9136a35f1df75db7b70fb67a463cb95","modified":1480918704000},{"_id":"source/about/index.md","hash":"85c0f4c08dde75a01fded39634d626bf6fc7a729","modified":1481275132000},{"_id":"source/my-projects/index.md","hash":"4e18bebdce479aa1238c291ccc9dd9d5019ec354","modified":1481280702000},{"_id":"source/_posts/querySelector.md","hash":"04259a9276e929bee1a6e1cbf8c29844d8acca58","modified":1480918512000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1480701901000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1480701901000},{"_id":"source/_posts/start with hexo.md","hash":"78bfb68864e790aac387a16f51202747f8d889ac","modified":1480918751000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1480701765000},{"_id":"themes/next/.git/index","hash":"2a31fd6059084c931f6c088781fb1e9736292a41","modified":1480906637000},{"_id":"themes/next/.git/packed-refs","hash":"80908fda4226cdf164a41c85c7fbea49cb816125","modified":1480701901000},{"_id":"source/tags/index.md","hash":"cb5d64d2dc5ccf3eb6f985f036e3b74eaf70cf31","modified":1480772082000},{"_id":"source/categories/index.md","hash":"9bdcb918a64df8c88900a5b9ddb69e1f8bd70db3","modified":1481182984000},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1480701901000},{"_id":"themes/next/languages/default.yml","hash":"767470a80dc257e23e14c3a78e8c52a46c9d6209","modified":1480701901000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1480701901000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1480701901000},{"_id":"themes/next/languages/en.yml","hash":"40057d6608e825d06e0864bac4dcd27ed88ada87","modified":1480701901000},{"_id":"themes/next/languages/fr-FR.yml","hash":"9fca01ef917d33ae2ae6bc04561ec6799dff5351","modified":1480701901000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1480701901000},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1480701901000},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1480701901000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1480701901000},{"_id":"themes/next/languages/ru.yml","hash":"257d11e626cbe4b9b78785a764190b9278f95c28","modified":1480701901000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1480701901000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"f6c9fafa0f5f0050cd07ca2cf5e38fbae3e28145","modified":1480701901000},{"_id":"themes/next/languages/zh-tw.yml","hash":"c97a5c41149de9b17f33439b0ecf0eff6fdae50e","modified":1480701901000},{"_id":"themes/next/languages/zh-hk.yml","hash":"34c84c6d04447a25bd5eac576922a13947c000e2","modified":1480701901000},{"_id":"themes/next/layout/_layout.swig","hash":"7a1e4443c3ba1e08c20e64ddbf0b8255d034dab0","modified":1480906636000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1480701901000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1480701901000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1480701901000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1480701901000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1480701901000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1480701901000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1480701901000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1480701901000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1480701901000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1480701901000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1480701901000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480701901000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1480701765000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1480701765000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1480701765000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1480701765000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1480701765000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1480701765000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1480701765000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1480701765000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1480701765000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1480701765000},{"_id":"themes/next/.git/logs/HEAD","hash":"c780f838af517e3c25b9828d8eab4bf986d59fc6","modified":1480701901000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1480701901000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1480701901000},{"_id":"themes/next/layout/_macro/post.swig","hash":"f12f108c1f8e91cc55d49805d42c1fd96cdf51a6","modified":1480701901000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1480701901000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1480701901000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"7a3ef28678467c45ee9416b41b943252e8036285","modified":1480701901000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b21143ca616463dc4b2dd337baf3f4f01e2735f4","modified":1480848223000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1480701901000},{"_id":"themes/next/layout/_partials/head.swig","hash":"ca56f92e2fa82b03853869f5073ee1a5626a4796","modified":1480701901000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1480701901000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1480701901000},{"_id":"themes/next/layout/_partials/header.swig","hash":"f3627f51810bc906e4020a3fef61bc3629b63581","modified":1480701901000},{"_id":"themes/next/layout/_partials/search.swig","hash":"1431719d1dbba3f5ee385eebc46376d1a960b2d5","modified":1480701901000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"39d613e5a9f8389d4ea52d6082502af8e833b9f2","modified":1480701901000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1480701901000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1480701901000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1480701901000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1480701901000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1480701901000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1480701901000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1480701901000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1480701901000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1480701901000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1480701901000},{"_id":"themes/next/source/css/main.styl","hash":"4b0681764810933318a7468211630b8fd83fb508","modified":1481186365000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1480701901000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"9a352f855a0545c61ed190e74da4806d895b1767","modified":1480905239000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1480701901000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1480701901000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1480701901000},{"_id":"themes/next/source/images/avatar.jpg","hash":"61c4e1b6b07b4ddec08ecb2b10df87fb1eb7edd5","modified":1480905328000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1480701901000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1480701901000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1480701901000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1480701901000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1480701901000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1480701901000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1480701901000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1480701901000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480701901000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480701901000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480701901000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480701901000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480701901000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480701901000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480701901000},{"_id":"themes/next/.git/refs/heads/master","hash":"93d0f27eb58dcc033accd3711a6d88c269c8e1e8","modified":1480701901000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1480701901000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1480701901000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1480701901000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1480701901000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1480701901000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1480701901000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1480701901000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1480701901000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1480701901000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1480701901000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1480701901000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"394d9fff7951287cc90f52acc2d4cbfd1bae079d","modified":1480701901000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1480701901000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"82a2ac14d4200480a36bf10abcc3cc554ad744d6","modified":1480701901000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1480701901000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"b460e27db3dcd4ab40b17d8926a5c4e624f293a9","modified":1480701901000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1480701901000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1480701901000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1480701901000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1480701901000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1480701901000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1480701901000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"21472a2d16693f44960c335dd29997b167cd858a","modified":1480906652000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1480701901000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1480701901000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c5b28519b446c2af1e8754a6ae4d766823e6b348","modified":1480701901000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1480701901000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1480701901000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1480701901000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1480701901000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1480701901000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1480701901000},{"_id":"themes/next/source/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1480701901000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1480701901000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1480701901000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1480701901000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1480701901000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1480701901000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1480701901000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1480701901000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1480701901000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1480701901000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1480701901000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1480701901000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1480701901000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1480701901000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1480701901000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1480701901000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1480701901000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1480701901000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1480701901000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1480701901000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1480701901000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1480701901000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1480701901000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1480701901000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1480701901000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1480701901000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1480701901000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"c780f838af517e3c25b9828d8eab4bf986d59fc6","modified":1480701901000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1480701901000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1480701901000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1480701901000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1480701901000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1480701901000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1480701901000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1480701901000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1480701901000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1480701901000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1480701901000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1480701901000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1480701901000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1480701901000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1480701901000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1480701901000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1480701901000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1480701901000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1480701901000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1480701901000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1480701901000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1480701901000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1480701901000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1480701901000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1480701901000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1480701901000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1480701901000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1480701901000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1480701901000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1480701901000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1480701901000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"7b206cd8921bc042f8e37a74aea1abc8a5ec8ab4","modified":1480701901000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1480701901000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1480701901000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1480701901000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1480701901000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1480701901000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1480701901000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1480701901000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1480701901000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1480701901000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1480701901000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1480701901000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1480701901000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1480701901000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1480701901000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1480701901000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1480701901000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1480701901000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1480701901000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1480701901000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1480701901000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1480701901000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1480701901000},{"_id":"themes/next/.git/objects/pack/pack-2beef8093c52583b95a9e8b3c6565c4a4b99a024.idx","hash":"18f99930748195202f356b888450ef110b1a6dbb","modified":1480701900000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1480701901000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1480701901000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1480701901000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1480701901000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1480701901000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"c780f838af517e3c25b9828d8eab4bf986d59fc6","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"3d311c666d19f3f06d8c8d28657ce46c2651c952","modified":1480844359000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4b7f81e1006e7acee3d1c840ccba155239f830cc","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"7f1aab694caf603809e33cff82beea84cd0128fd","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"c6dab7661a6b8c678b21b7eb273cef7100f970f6","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"99b7c7c4630130c3a097f2dcf82421c4d05aeeb4","modified":1480856806000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"eba491ae624b4c843c8be4c94a044085dad4ba0f","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"3eb73cee103b810fa56901577ecb9c9bb1793cff","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1480701901000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"5433b6bc9d8f0c4685e760b326445ac51245b0a8","modified":1480701901000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1480701901000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1480701901000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1480701901000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1480701901000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1480701901000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1480701901000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1480701901000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1480701901000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1480701901000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1480701901000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1480701901000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1480701901000},{"_id":"themes/next/.git/objects/pack/pack-2beef8093c52583b95a9e8b3c6565c4a4b99a024.pack","hash":"1406aa53b4b2c76a365056279cf4090c86170940","modified":1480701900000},{"_id":"source/images/sup-polo.png","hash":"d143a0db397fc1f027af7ca1f5b148918d8e4937","modified":1481183320000},{"_id":"source/images/job.png","hash":"95d1d13683ef5178b318586164bbacfa729d498a","modified":1481183289000},{"_id":"themes/next/source/css/_mystyle/my_projects.styl","hash":"0cbf3d85bc81a9d956e065f67d1e1609e586334d","modified":1481217607000},{"_id":"source/_posts/sup-shop.jpeg","hash":"c17f82661c0448f716eabfa4ecb13e214e1d1f67","modified":1481214862000},{"_id":"source/_posts/router","hash":"bcd4297e37a4910ce8e25255182c1f946a11e96a","modified":1481368889000},{"_id":"source/images/sup-shop.jpeg","hash":"c17f82661c0448f716eabfa4ecb13e214e1d1f67","modified":1481214862000},{"_id":"source/images/guoguo.png","hash":"4a157ff4532e12b6f77bff0e486a6d3356f7354a","modified":1481260882000},{"_id":"source/images/guoguo_sample.png","hash":"321a18a3011d4133d806e7f1858f9b171d62e271","modified":1481260911000},{"_id":"source/_drafts/BFC","hash":"13caf9ad0e78050f76de350bd822ab116a4e9e76","modified":1481464978000},{"_id":"source/_posts/margin collaspe.md","hash":"da500cd78679582f43ec4bc794c0433ad72c1605","modified":1481465003000},{"_id":"source/_drafts/float.md","hash":"e92a3f52e353cf0dd07b222cafdc2aed8c4159ef","modified":1481446870000}],"Category":[{"name":"编程","_id":"ciwfxj93l00058mra6ie3vkd3"},{"name":"生活","_id":"ciwfxj94m000o8mra20fk29vr"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"your site url \"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"your site url \"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n","date":"2016-12-04T09:21:14.000Z","updated":"2016-12-04T09:21:14.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"ciwfxj8wp00008mraq0bokg7v","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"your site url \" homepagename=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n","excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"your site url \"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n"},{"title":"about Me","type":"about","date":"2016-12-02T16:00:00.000Z","auto_spacing":true,"_content":"{% cq class=\"blockquote-center\" %}\n  \n前端开发攻城狮一枚～～\n\n毕业于 2015年 西北大学物理学院\n\n先开始学习了一点点 __Python__ ( 男票写 Python 的 ), 写过一个小小的爬虫\n\n之后开始踏上前端的道路\n\n自学前端技术\n\n前半年基本上是在公司切图 ( 西安 )\n\n后半年自由职业，基本上都是移动端的项目\n\n切图刚开始使用 ps, 现在使用 __sketch__ ( 超方便！ )\n\n刚开始的时候纯手写 HTML, 后来用 __Pug__ 编写 ( 开始用的时候感觉真是神器！方便了 n 多！！而且代码感觉整洁了好多～ )\n\nCSS 使用 __SCSS__, 在了解 BEM 命名规则后, 现在更加倾向于 大量的 __CSS__ + 少量 __SCSS__\n\n刚开始使用 Jquery, 后来上手 原生JS ( 与 React  ) , ES6\n\n框架使用主要用 __React__, 尝试过 __Vue__\n\nmock 工具 暂时使用 __superagent-mock__\n\n构建工具最开始, 使用  gulp, 现在使用 __webpack__\n\n代码管理 __github__ ( 之前一段时间用国内的 __码云 (  私有库 )__)\n\n常用 IDE  __Sublime__, 想尝试下 Atom 但是怕卡机 ( 我一般使用都会卡( 4G 内存 ) )\n\n开发 工具 __MAC__\n\n调试工具 __Chrome__, Safari ( Chrome 卡死后用 )\n\n越学习越知道自己的知识的薄弱, 但是会努力的！！\n  \n     \n---\n想看我具体的项目经历 \n请点击：[我做的项目](/my-projects)\n\n\n\n{% endcq %}\n","source":"about/index.md","raw":"---\ntitle: about Me\ntype: about\ndate: 2016-12-03\nauto_spacing: true\n---\n{% cq class=\"blockquote-center\" %}\n  \n前端开发攻城狮一枚～～\n\n毕业于 2015年 西北大学物理学院\n\n先开始学习了一点点 __Python__ ( 男票写 Python 的 ), 写过一个小小的爬虫\n\n之后开始踏上前端的道路\n\n自学前端技术\n\n前半年基本上是在公司切图 ( 西安 )\n\n后半年自由职业，基本上都是移动端的项目\n\n切图刚开始使用 ps, 现在使用 __sketch__ ( 超方便！ )\n\n刚开始的时候纯手写 HTML, 后来用 __Pug__ 编写 ( 开始用的时候感觉真是神器！方便了 n 多！！而且代码感觉整洁了好多～ )\n\nCSS 使用 __SCSS__, 在了解 BEM 命名规则后, 现在更加倾向于 大量的 __CSS__ + 少量 __SCSS__\n\n刚开始使用 Jquery, 后来上手 原生JS ( 与 React  ) , ES6\n\n框架使用主要用 __React__, 尝试过 __Vue__\n\nmock 工具 暂时使用 __superagent-mock__\n\n构建工具最开始, 使用  gulp, 现在使用 __webpack__\n\n代码管理 __github__ ( 之前一段时间用国内的 __码云 (  私有库 )__)\n\n常用 IDE  __Sublime__, 想尝试下 Atom 但是怕卡机 ( 我一般使用都会卡( 4G 内存 ) )\n\n开发 工具 __MAC__\n\n调试工具 __Chrome__, Safari ( Chrome 卡死后用 )\n\n越学习越知道自己的知识的薄弱, 但是会努力的！！\n  \n     \n---\n想看我具体的项目经历 \n请点击：[我做的项目](/my-projects)\n\n\n\n{% endcq %}\n","updated":"2016-12-09T09:18:52.000Z","path":"about/index.html","_id":"ciwfxj93e00028mrahlk1hi9z","comments":1,"layout":"page","content":"<blockquote class=\"blockquote-center\"><p>前端开发攻城狮一枚～～</p>\n<p>毕业于 2015年 西北大学物理学院</p>\n<p>先开始学习了一点点 <strong>Python</strong> ( 男票写 Python 的 ), 写过一个小小的爬虫</p>\n<p>之后开始踏上前端的道路</p>\n<p>自学前端技术</p>\n<p>前半年基本上是在公司切图 ( 西安 )</p>\n<p>后半年自由职业，基本上都是移动端的项目</p>\n<p>切图刚开始使用 ps, 现在使用 <strong>sketch</strong> ( 超方便！ )</p>\n<p>刚开始的时候纯手写 HTML, 后来用 <strong>Pug</strong> 编写 ( 开始用的时候感觉真是神器！方便了 n 多！！而且代码感觉整洁了好多～ )</p>\n<p>CSS 使用 <strong>SCSS</strong>, 在了解 BEM 命名规则后, 现在更加倾向于 大量的 <strong>CSS</strong> + 少量 <strong>SCSS</strong></p>\n<p>刚开始使用 Jquery, 后来上手 原生JS ( 与 React  ) , ES6</p>\n<p>框架使用主要用 <strong>React</strong>, 尝试过 <strong>Vue</strong></p>\n<p>mock 工具 暂时使用 <strong>superagent-mock</strong></p>\n<p>构建工具最开始, 使用  gulp, 现在使用 <strong>webpack</strong></p>\n<p>代码管理 <strong>github</strong> ( 之前一段时间用国内的 <strong>码云 (  私有库 )</strong>)</p>\n<p>常用 IDE  <strong>Sublime</strong>, 想尝试下 Atom 但是怕卡机 ( 我一般使用都会卡( 4G 内存 ) )</p>\n<p>开发 工具 <strong>MAC</strong></p>\n<p>调试工具 <strong>Chrome</strong>, Safari ( Chrome 卡死后用 )</p>\n<p>越学习越知道自己的知识的薄弱, 但是会努力的！！</p>\n<hr>\n<p>想看我具体的项目经历<br>请点击：<a href=\"/my-projects\">我做的项目</a></p>\n</blockquote>\n","excerpt":"","more":"<blockquote class=\"blockquote-center\"><p>前端开发攻城狮一枚～～</p>\n<p>毕业于 2015年 西北大学物理学院</p>\n<p>先开始学习了一点点 <strong>Python</strong> ( 男票写 Python 的 ), 写过一个小小的爬虫</p>\n<p>之后开始踏上前端的道路</p>\n<p>自学前端技术</p>\n<p>前半年基本上是在公司切图 ( 西安 )</p>\n<p>后半年自由职业，基本上都是移动端的项目</p>\n<p>切图刚开始使用 ps, 现在使用 <strong>sketch</strong> ( 超方便！ )</p>\n<p>刚开始的时候纯手写 HTML, 后来用 <strong>Pug</strong> 编写 ( 开始用的时候感觉真是神器！方便了 n 多！！而且代码感觉整洁了好多～ )</p>\n<p>CSS 使用 <strong>SCSS</strong>, 在了解 BEM 命名规则后, 现在更加倾向于 大量的 <strong>CSS</strong> + 少量 <strong>SCSS</strong></p>\n<p>刚开始使用 Jquery, 后来上手 原生JS ( 与 React  ) , ES6</p>\n<p>框架使用主要用 <strong>React</strong>, 尝试过 <strong>Vue</strong></p>\n<p>mock 工具 暂时使用 <strong>superagent-mock</strong></p>\n<p>构建工具最开始, 使用  gulp, 现在使用 <strong>webpack</strong></p>\n<p>代码管理 <strong>github</strong> ( 之前一段时间用国内的 <strong>码云 (  私有库 )</strong>)</p>\n<p>常用 IDE  <strong>Sublime</strong>, 想尝试下 Atom 但是怕卡机 ( 我一般使用都会卡( 4G 内存 ) )</p>\n<p>开发 工具 <strong>MAC</strong></p>\n<p>调试工具 <strong>Chrome</strong>, Safari ( Chrome 卡死后用 )</p>\n<p>越学习越知道自己的知识的薄弱, 但是会努力的！！</p>\n<hr>\n<p>想看我具体的项目经历<br>请点击：<a href=\"/my-projects\">我做的项目</a></p>\n</blockquote>\n"},{"title":"我做的项目","date":"2016-12-08T05:34:40.000Z","_content":"<ul class=\"my-projects-list\" >\n\n  <li class=\"my-project-item\" >\n    <img src=\"../images/shangdong.png\" class=\"my-project-img big-img\" />\n      山东大学深圳研究院官网\n      [网站请戳](http://www.shz.sdu.edu.cn/shfw/szxydt.htm)\n      独立完成的第 1 个上线的项目！公司有一套 Java 开发的建站系统，前端以组件的方式开发页面模版，后端负责渲染数据并生成页面，属于传统的 BS 架构开发模式。要适配 IE7+。\n      这个项目从开发、到最后的实施上线，都是我负责的。最终发现，开发是项目流程中最简单的一个环节。\n      使用 __gulp__ 构建，__Sass__ 编写 CSS , __Jade (Pug )__ 编写 HTML, 简单的 Jquery。\n  </li>\n  <li class=\"my-project-item\" >\n    <img src=\"../images/sup-polo.png\" class=\"my-project-img\" />\n      React 第一个项目\n      [demo 请戳](http://sup-polo.zhangxiaoxu.com)\n      [原码请戳](https://github.com/vivian-xu/job-src)\n      第一次用使用 React 开发的项目。虽然开发过程十分曲折，并且代码和结构都很不好，但是经过了这个项目，进一步的理解了 react 的理念。也进一步喜欢上了 React，它可以使我的思维更加有条理。\n      这个项目也是第一真正的与后端对接代码，虽然第一次对接的过程也不是很顺利，但是充分的了解到了与后端共同制定 API 的重要性以及 mock 的重要性。\n      使用 __webpack__ 打包构建，__React__ + __React-router__, __Sass__ 编写 CSS , __Jquery__。\n  </li>\n  <li class=\"my-project-item\">\n    <img src=\"../images/job.png\" class=\"my-project-img\" />\n      React 第二个项目\n\n      [原码请戳](https://github.com/vivian-xu/job-src)\n\n      这个项目是比较简单的项目，相对于第一个 React 来说更得心应手了。\n      在这个项目上努力使自己的代码更加规范，整洁，结构更加的合理，并且尽量使性能更优。将组件更细分，储存在 state 里的变量尽量减少，利用 PureComponent 减少不必要的 Mount 等等。\n      为了改善用户体验，加入 Loading 和 无限滚动加载等小组件。\n      使用 __webpack__ 打包构建，__React__ + __React-router__, __原生 JS + ES6, 用 __superagent-mock__ mock 数据 ,____Sass__ 编写 CSS\n  </li>\n  <li class=\"my-project-item\">\n    <img src=\"../images/sup-shop.jpeg\" class=\"my-project-img\" />\n      我是在做完第一个 React 项目后，开始首次尝试 Vue.js 的。这次是跟一个比较有经验的前端工程师合作写的。但是其实我是以学习为主，所以最终我也没有写多少行，但是我认真的读了他的代码 ( 环境配置没太看, 其实是没太看懂 ...)。\n\n      学到很多，首先，我知道了比较正规的大公司的前端开发的正规的流程是什么。其次，这个项目给我真实的展示了怎么样划分组件。也学到了一个项目大概的内容规划。还有这个项目也是用了 mock server，更加坚定了我之后一个项目使用 mock server 的想法。当然最基础的还是如何使用 Vue 写一个简单的项目。\n\n      [原码请戳](https://github.com/vivian-xu/sup-shop-src)\n  </li>\n  <li class=\"my-project-item\" >\n    <img src=\"../images/guoguo.png\" class=\"my-project-img\" />\n      设计并实现页面。\n      产品主要针对移动端用户 ( 尤其微信 )。\n      使用 __weui__, __Css__ , 后期加入 __gulp__ 构建,  最终实现静态页面。\n      这是在公司做的第一个项目，最难的部分就是要自己设计页面。参考了很多网站，网站也实现了一大部分，但是最终也是 __达不到满意__的效果。新来了设计师后就不再开发这个版本了。\n  </li>\n  <li class=\"my-project-item\" >\n    <img src=\"../images/guoguo_sample.png\" class=\"my-project-img\" />\n      是开发的第二个版本的产品，与设计师和另一名前端程序员合作开发。\n      相对于上一个版本来说，有了专业的设计师开发更加愉快～\n      项目依旧需要适配基本的手机端。\n      基本上纯静态页面，加入了少量的 Jquery。\n      使用 __gulp__ 构建， __Sass__ 编写 CSS , 加入少量 weui 实现的。\n  </li>\n</ul>\n\n<p>\n  联系我\n</p>\n<p>\n  Email: hi@zhangxiaoxu.com\n\n</p>\n","source":"my-projects/index.md","raw":"---\ntitle: 我做的项目\ndate: 2016-12-08 13:34:40\n---\n<ul class=\"my-projects-list\" >\n\n  <li class=\"my-project-item\" >\n    <img src=\"../images/shangdong.png\" class=\"my-project-img big-img\" />\n      山东大学深圳研究院官网\n      [网站请戳](http://www.shz.sdu.edu.cn/shfw/szxydt.htm)\n      独立完成的第 1 个上线的项目！公司有一套 Java 开发的建站系统，前端以组件的方式开发页面模版，后端负责渲染数据并生成页面，属于传统的 BS 架构开发模式。要适配 IE7+。\n      这个项目从开发、到最后的实施上线，都是我负责的。最终发现，开发是项目流程中最简单的一个环节。\n      使用 __gulp__ 构建，__Sass__ 编写 CSS , __Jade (Pug )__ 编写 HTML, 简单的 Jquery。\n  </li>\n  <li class=\"my-project-item\" >\n    <img src=\"../images/sup-polo.png\" class=\"my-project-img\" />\n      React 第一个项目\n      [demo 请戳](http://sup-polo.zhangxiaoxu.com)\n      [原码请戳](https://github.com/vivian-xu/job-src)\n      第一次用使用 React 开发的项目。虽然开发过程十分曲折，并且代码和结构都很不好，但是经过了这个项目，进一步的理解了 react 的理念。也进一步喜欢上了 React，它可以使我的思维更加有条理。\n      这个项目也是第一真正的与后端对接代码，虽然第一次对接的过程也不是很顺利，但是充分的了解到了与后端共同制定 API 的重要性以及 mock 的重要性。\n      使用 __webpack__ 打包构建，__React__ + __React-router__, __Sass__ 编写 CSS , __Jquery__。\n  </li>\n  <li class=\"my-project-item\">\n    <img src=\"../images/job.png\" class=\"my-project-img\" />\n      React 第二个项目\n\n      [原码请戳](https://github.com/vivian-xu/job-src)\n\n      这个项目是比较简单的项目，相对于第一个 React 来说更得心应手了。\n      在这个项目上努力使自己的代码更加规范，整洁，结构更加的合理，并且尽量使性能更优。将组件更细分，储存在 state 里的变量尽量减少，利用 PureComponent 减少不必要的 Mount 等等。\n      为了改善用户体验，加入 Loading 和 无限滚动加载等小组件。\n      使用 __webpack__ 打包构建，__React__ + __React-router__, __原生 JS + ES6, 用 __superagent-mock__ mock 数据 ,____Sass__ 编写 CSS\n  </li>\n  <li class=\"my-project-item\">\n    <img src=\"../images/sup-shop.jpeg\" class=\"my-project-img\" />\n      我是在做完第一个 React 项目后，开始首次尝试 Vue.js 的。这次是跟一个比较有经验的前端工程师合作写的。但是其实我是以学习为主，所以最终我也没有写多少行，但是我认真的读了他的代码 ( 环境配置没太看, 其实是没太看懂 ...)。\n\n      学到很多，首先，我知道了比较正规的大公司的前端开发的正规的流程是什么。其次，这个项目给我真实的展示了怎么样划分组件。也学到了一个项目大概的内容规划。还有这个项目也是用了 mock server，更加坚定了我之后一个项目使用 mock server 的想法。当然最基础的还是如何使用 Vue 写一个简单的项目。\n\n      [原码请戳](https://github.com/vivian-xu/sup-shop-src)\n  </li>\n  <li class=\"my-project-item\" >\n    <img src=\"../images/guoguo.png\" class=\"my-project-img\" />\n      设计并实现页面。\n      产品主要针对移动端用户 ( 尤其微信 )。\n      使用 __weui__, __Css__ , 后期加入 __gulp__ 构建,  最终实现静态页面。\n      这是在公司做的第一个项目，最难的部分就是要自己设计页面。参考了很多网站，网站也实现了一大部分，但是最终也是 __达不到满意__的效果。新来了设计师后就不再开发这个版本了。\n  </li>\n  <li class=\"my-project-item\" >\n    <img src=\"../images/guoguo_sample.png\" class=\"my-project-img\" />\n      是开发的第二个版本的产品，与设计师和另一名前端程序员合作开发。\n      相对于上一个版本来说，有了专业的设计师开发更加愉快～\n      项目依旧需要适配基本的手机端。\n      基本上纯静态页面，加入了少量的 Jquery。\n      使用 __gulp__ 构建， __Sass__ 编写 CSS , 加入少量 weui 实现的。\n  </li>\n</ul>\n\n<p>\n  联系我\n</p>\n<p>\n  Email: hi@zhangxiaoxu.com\n\n</p>\n","updated":"2016-12-09T10:51:42.000Z","path":"my-projects/index.html","_id":"ciwfxj93j00048mrad3y15lhz","comments":1,"layout":"page","content":"<ul class=\"my-projects-list\"><br><br>  <li class=\"my-project-item\"><br>    <img src=\"../images/shangdong.png\" class=\"my-project-img big-img\"><br>      山东大学深圳研究院官网<br>      <a href=\"http://www.shz.sdu.edu.cn/shfw/szxydt.htm\" target=\"_blank\" rel=\"external\">网站请戳</a><br>      独立完成的第 1 个上线的项目！公司有一套 Java 开发的建站系统，前端以组件的方式开发页面模版，后端负责渲染数据并生成页面，属于传统的 BS 架构开发模式。要适配 IE7+。<br>      这个项目从开发、到最后的实施上线，都是我负责的。最终发现，开发是项目流程中最简单的一个环节。<br>      使用 <strong>gulp</strong> 构建，<strong>Sass</strong> 编写 CSS , <strong>Jade (Pug )</strong> 编写 HTML, 简单的 Jquery。<br>  </li><br>  <li class=\"my-project-item\"><br>    <img src=\"../images/sup-polo.png\" class=\"my-project-img\"><br>      React 第一个项目<br>      <a href=\"http://sup-polo.zhangxiaoxu.com\" target=\"_blank\" rel=\"external\">demo 请戳</a><br>      <a href=\"https://github.com/vivian-xu/job-src\" target=\"_blank\" rel=\"external\">原码请戳</a><br>      第一次用使用 React 开发的项目。虽然开发过程十分曲折，并且代码和结构都很不好，但是经过了这个项目，进一步的理解了 react 的理念。也进一步喜欢上了 React，它可以使我的思维更加有条理。<br>      这个项目也是第一真正的与后端对接代码，虽然第一次对接的过程也不是很顺利，但是充分的了解到了与后端共同制定 API 的重要性以及 mock 的重要性。<br>      使用 <strong>webpack</strong> 打包构建，<strong>React</strong> + <strong>React-router</strong>, <strong>Sass</strong> 编写 CSS , <strong>Jquery</strong>。<br>  </li><br>  <li class=\"my-project-item\"><br>    <img src=\"../images/job.png\" class=\"my-project-img\"><br>      React 第二个项目<br><br>      <a href=\"https://github.com/vivian-xu/job-src\" target=\"_blank\" rel=\"external\">原码请戳</a><br><br>      这个项目是比较简单的项目，相对于第一个 React 来说更得心应手了。<br>      在这个项目上努力使自己的代码更加规范，整洁，结构更加的合理，并且尽量使性能更优。将组件更细分，储存在 state 里的变量尽量减少，利用 PureComponent 减少不必要的 Mount 等等。<br>      为了改善用户体验，加入 Loading 和 无限滚动加载等小组件。<br>      使用 <strong>webpack</strong> 打包构建，<strong>React</strong> + <strong>React-router</strong>, <strong>原生 JS + ES6, 用 </strong>superagent-mock<strong> mock 数据 ,__</strong>Sass<strong> 编写 CSS<br>  </strong></li><br>  <li class=\"my-project-item\"><br>    <img src=\"../images/sup-shop.jpeg\" class=\"my-project-img\"><br>      我是在做完第一个 React 项目后，开始首次尝试 Vue.js 的。这次是跟一个比较有经验的前端工程师合作写的。但是其实我是以学习为主，所以最终我也没有写多少行，但是我认真的读了他的代码 ( 环境配置没太看, 其实是没太看懂 …)。<br><br>      学到很多，首先，我知道了比较正规的大公司的前端开发的正规的流程是什么。其次，这个项目给我真实的展示了怎么样划分组件。也学到了一个项目大概的内容规划。还有这个项目也是用了 mock server，更加坚定了我之后一个项目使用 mock server 的想法。当然最基础的还是如何使用 Vue 写一个简单的项目。<br><br>      <a href=\"https://github.com/vivian-xu/sup-shop-src\" target=\"_blank\" rel=\"external\">原码请戳</a><br>  </li><br>  <li class=\"my-project-item\"><br>    <img src=\"../images/guoguo.png\" class=\"my-project-img\"><br>      设计并实现页面。<br>      产品主要针对移动端用户 ( 尤其微信 )。<br>      使用 weui<strong>, </strong>Css<strong> , 后期加入 </strong>gulp<strong> 构建,  最终实现静态页面。<br>      这是在公司做的第一个项目，最难的部分就是要自己设计页面。参考了很多网站，网站也实现了一大部分，但是最终也是 </strong>达不到满意<strong>的效果。新来了设计师后就不再开发这个版本了。<br>  </strong></li><br>  <li class=\"my-project-item\"><br>    <img src=\"../images/guoguo_sample.png\" class=\"my-project-img\"><br>      是开发的第二个版本的产品，与设计师和另一名前端程序员合作开发。<br>      相对于上一个版本来说，有了专业的设计师开发更加愉快～<br>      项目依旧需要适配基本的手机端。<br>      基本上纯静态页面，加入了少量的 Jquery。<br>      使用 gulp<strong> 构建， </strong>Sass__ 编写 CSS , 加入少量 weui 实现的。<br>  </li><br></ul>\n\n<p><br>  联系我<br></p><br><p><br>  Email: hi@zhangxiaoxu.com<br><br></p>\n","excerpt":"","more":"<ul class=\"my-projects-list\" ><br><br>  <li class=\"my-project-item\" ><br>    <img src=\"../images/shangdong.png\" class=\"my-project-img big-img\" /><br>      山东大学深圳研究院官网<br>      <a href=\"http://www.shz.sdu.edu.cn/shfw/szxydt.htm\">网站请戳</a><br>      独立完成的第 1 个上线的项目！公司有一套 Java 开发的建站系统，前端以组件的方式开发页面模版，后端负责渲染数据并生成页面，属于传统的 BS 架构开发模式。要适配 IE7+。<br>      这个项目从开发、到最后的实施上线，都是我负责的。最终发现，开发是项目流程中最简单的一个环节。<br>      使用 <strong>gulp</strong> 构建，<strong>Sass</strong> 编写 CSS , <strong>Jade (Pug )</strong> 编写 HTML, 简单的 Jquery。<br>  </li><br>  <li class=\"my-project-item\" ><br>    <img src=\"../images/sup-polo.png\" class=\"my-project-img\" /><br>      React 第一个项目<br>      <a href=\"http://sup-polo.zhangxiaoxu.com\">demo 请戳</a><br>      <a href=\"https://github.com/vivian-xu/job-src\">原码请戳</a><br>      第一次用使用 React 开发的项目。虽然开发过程十分曲折，并且代码和结构都很不好，但是经过了这个项目，进一步的理解了 react 的理念。也进一步喜欢上了 React，它可以使我的思维更加有条理。<br>      这个项目也是第一真正的与后端对接代码，虽然第一次对接的过程也不是很顺利，但是充分的了解到了与后端共同制定 API 的重要性以及 mock 的重要性。<br>      使用 <strong>webpack</strong> 打包构建，<strong>React</strong> + <strong>React-router</strong>, <strong>Sass</strong> 编写 CSS , <strong>Jquery</strong>。<br>  </li><br>  <li class=\"my-project-item\"><br>    <img src=\"../images/job.png\" class=\"my-project-img\" /><br>      React 第二个项目<br><br>      <a href=\"https://github.com/vivian-xu/job-src\">原码请戳</a><br><br>      这个项目是比较简单的项目，相对于第一个 React 来说更得心应手了。<br>      在这个项目上努力使自己的代码更加规范，整洁，结构更加的合理，并且尽量使性能更优。将组件更细分，储存在 state 里的变量尽量减少，利用 PureComponent 减少不必要的 Mount 等等。<br>      为了改善用户体验，加入 Loading 和 无限滚动加载等小组件。<br>      使用 <strong>webpack</strong> 打包构建，<strong>React</strong> + <strong>React-router</strong>, <strong>原生 JS + ES6, 用 </strong>superagent-mock<strong> mock 数据 ,__</strong>Sass<strong> 编写 CSS<br>  </li><br>  <li class=\"my-project-item\"><br>    <img src=\"../images/sup-shop.jpeg\" class=\"my-project-img\" /><br>      我是在做完第一个 React 项目后，开始首次尝试 Vue.js 的。这次是跟一个比较有经验的前端工程师合作写的。但是其实我是以学习为主，所以最终我也没有写多少行，但是我认真的读了他的代码 ( 环境配置没太看, 其实是没太看懂 …)。<br><br>      学到很多，首先，我知道了比较正规的大公司的前端开发的正规的流程是什么。其次，这个项目给我真实的展示了怎么样划分组件。也学到了一个项目大概的内容规划。还有这个项目也是用了 mock server，更加坚定了我之后一个项目使用 mock server 的想法。当然最基础的还是如何使用 Vue 写一个简单的项目。<br><br>      <a href=\"https://github.com/vivian-xu/sup-shop-src\">原码请戳</a><br>  </li><br>  <li class=\"my-project-item\" ><br>    <img src=\"../images/guoguo.png\" class=\"my-project-img\" /><br>      设计并实现页面。<br>      产品主要针对移动端用户 ( 尤其微信 )。<br>      使用 </strong>weui<strong>, </strong>Css<strong> , 后期加入 </strong>gulp<strong> 构建,  最终实现静态页面。<br>      这是在公司做的第一个项目，最难的部分就是要自己设计页面。参考了很多网站，网站也实现了一大部分，但是最终也是 </strong>达不到满意<strong>的效果。新来了设计师后就不再开发这个版本了。<br>  </li><br>  <li class=\"my-project-item\" ><br>    <img src=\"../images/guoguo_sample.png\" class=\"my-project-img\" /><br>      是开发的第二个版本的产品，与设计师和另一名前端程序员合作开发。<br>      相对于上一个版本来说，有了专业的设计师开发更加愉快～<br>      项目依旧需要适配基本的手机端。<br>      基本上纯静态页面，加入了少量的 Jquery。<br>      使用 </strong>gulp<strong> 构建， </strong>Sass__ 编写 CSS , 加入少量 weui 实现的。<br>  </li><br></ul>\n\n<p><br>  联系我<br></p><br><p><br>  Email: hi@zhangxiaoxu.com<br><br></p>\n"},{"title":"标签","date":"2016-12-03T13:33:37.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2016-12-03 21:33:37\ntype: \"tags\"\n---\n","updated":"2016-12-03T13:34:42.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ciwfxj93p00088mrawzy0v3l7","content":"","excerpt":"","more":""},{"title":"分类","type":"categories","date":"2016-12-03T13:36:13.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ntype: categories\ndate: 2016-12-03 21:36:13\n---\n","updated":"2016-12-08T07:43:04.000Z","path":"categories/index.html","_id":"ciwfxj942000a8mracjaci6ya","comments":1,"layout":"page","content":"","excerpt":"","more":""}],"Post":[{"title":"Cookie","_content":"### 数据存储 Cookie\n\n一. Cookie ( HTTP Cookie )\n\n#### 用法\n\n- 该标准要求服务器任意 HTTP 请求发送 Set-Cookie HTTP 头作为响应的一部分，其中包含会话信息。\n\n```\n  //  服务器的响应头文件\n  HTTP/1.1 200 OK\n  Content-type: text/html\n  Set-Cookie: name=value\n  Other-header: other-header-value\n```\n\n- 浏览器会存储这样的会话信息，并在这之后，通过为每个请求添加 Cookie HTTP 头将信息发送回服务器。\n\n```\n  GeT/index.html HTTP/1.1\n  Cookie: name=value\n  other-header: other-header-value\n```\n<!-- more -->\n#### 限制\n\n- cookie 在性质上是绑在特定的域名下的。 设定了一个 cookie 之后，再给创建它的域名发送请求时。都会包含这个 cookie.\n- 但是由于 它是 存在客户端的计算机上的，每个域的 cookie  总数有限。 不过浏览器之间不同。\n\nIE6-  -- 20, IE7+ -- 50,\n\nFf -- 50, Opera -- 30, Safari / Chorme 没有规定\n\n当超过限制的时候，浏览器会清除之前的设置的 cookie。\n\n- 对 cookie  的尺寸也有限制。\n\n大多数浏览器都有大约  4096B  的长度限制。\n 尺寸限制影响到一个域下所有的 cookie ，而并非每个 cookie 单独限制。当超过限制的时候，该 cookie 会被悄无声息的丢掉。\n\n #### 构成\n\n - 名称： 唯一确定 cookie 的名称。 不区分大小写。（ 实践中看成区分大小写的，因为有的服务器会这样处理 ） 。 必须是经过 URL 编码的。\n - 值 。 要经过 URL 编码。\n - 域： cookie 是对哪个域是有效的。\n- 路径： 对于制定域中的那个路径，应该向服务器发送 cookie 。\n- 失效时间。\n- 安全标志： 指定后, cookie 只有在使用 SSL 链接时候才发送到服务器。\n\n#### ！！注意！！ 这些参数不会作为发送到服务器的 cookie 信息的一部分，只有明值对才会被发送。\n\n使用分号 + 空格分割每一段\n\n```\n  HTTP/1.1 200 OK\n  Content-type: text/html\n  Set-Cookie: name=value; domain=.wrox.com; path=/; secure\n  Other-header: other-header-value\n```\n\n--\n参考 :\n\n  JavaScript 高级程序设计\n","source":"_drafts/Cookie.md","raw":"title: Cookie\ncategories:\n- 编程\ntags:\n- 记录\n\n---\n### 数据存储 Cookie\n\n一. Cookie ( HTTP Cookie )\n\n#### 用法\n\n- 该标准要求服务器任意 HTTP 请求发送 Set-Cookie HTTP 头作为响应的一部分，其中包含会话信息。\n\n```\n  //  服务器的响应头文件\n  HTTP/1.1 200 OK\n  Content-type: text/html\n  Set-Cookie: name=value\n  Other-header: other-header-value\n```\n\n- 浏览器会存储这样的会话信息，并在这之后，通过为每个请求添加 Cookie HTTP 头将信息发送回服务器。\n\n```\n  GeT/index.html HTTP/1.1\n  Cookie: name=value\n  other-header: other-header-value\n```\n<!-- more -->\n#### 限制\n\n- cookie 在性质上是绑在特定的域名下的。 设定了一个 cookie 之后，再给创建它的域名发送请求时。都会包含这个 cookie.\n- 但是由于 它是 存在客户端的计算机上的，每个域的 cookie  总数有限。 不过浏览器之间不同。\n\nIE6-  -- 20, IE7+ -- 50,\n\nFf -- 50, Opera -- 30, Safari / Chorme 没有规定\n\n当超过限制的时候，浏览器会清除之前的设置的 cookie。\n\n- 对 cookie  的尺寸也有限制。\n\n大多数浏览器都有大约  4096B  的长度限制。\n 尺寸限制影响到一个域下所有的 cookie ，而并非每个 cookie 单独限制。当超过限制的时候，该 cookie 会被悄无声息的丢掉。\n\n #### 构成\n\n - 名称： 唯一确定 cookie 的名称。 不区分大小写。（ 实践中看成区分大小写的，因为有的服务器会这样处理 ） 。 必须是经过 URL 编码的。\n - 值 。 要经过 URL 编码。\n - 域： cookie 是对哪个域是有效的。\n- 路径： 对于制定域中的那个路径，应该向服务器发送 cookie 。\n- 失效时间。\n- 安全标志： 指定后, cookie 只有在使用 SSL 链接时候才发送到服务器。\n\n#### ！！注意！！ 这些参数不会作为发送到服务器的 cookie 信息的一部分，只有明值对才会被发送。\n\n使用分号 + 空格分割每一段\n\n```\n  HTTP/1.1 200 OK\n  Content-type: text/html\n  Set-Cookie: name=value; domain=.wrox.com; path=/; secure\n  Other-header: other-header-value\n```\n\n--\n参考 :\n\n  JavaScript 高级程序设计\n","slug":"Cookie","published":0,"date":"2016-12-02T08:37:01.000Z","updated":"2016-12-03T11:06:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwfxj93a00018mrarxin9yzu","content":"<h3 id=\"数据存储-Cookie\"><a href=\"#数据存储-Cookie\" class=\"headerlink\" title=\"数据存储 Cookie\"></a>数据存储 Cookie</h3><p>一. Cookie ( HTTP Cookie )</p>\n<h4 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h4><ul>\n<li>该标准要求服务器任意 HTTP 请求发送 Set-Cookie HTTP 头作为响应的一部分，其中包含会话信息。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//  服务器的响应头文件</div><div class=\"line\">HTTP/1.1 200 OK</div><div class=\"line\">Content-type: text/html</div><div class=\"line\">Set-Cookie: name=value</div><div class=\"line\">Other-header: other-header-value</div></pre></td></tr></table></figure>\n<ul>\n<li>浏览器会存储这样的会话信息，并在这之后，通过为每个请求添加 Cookie HTTP 头将信息发送回服务器。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">GeT/index.html HTTP/1.1</div><div class=\"line\">Cookie: name=value</div><div class=\"line\">other-header: other-header-value</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"限制\"><a href=\"#限制\" class=\"headerlink\" title=\"限制\"></a>限制</h4><ul>\n<li>cookie 在性质上是绑在特定的域名下的。 设定了一个 cookie 之后，再给创建它的域名发送请求时。都会包含这个 cookie.</li>\n<li>但是由于 它是 存在客户端的计算机上的，每个域的 cookie  总数有限。 不过浏览器之间不同。</li>\n</ul>\n<p>IE6-  – 20, IE7+ – 50,</p>\n<p>Ff – 50, Opera – 30, Safari / Chorme 没有规定</p>\n<p>当超过限制的时候，浏览器会清除之前的设置的 cookie。</p>\n<ul>\n<li>对 cookie  的尺寸也有限制。</li>\n</ul>\n<p>大多数浏览器都有大约  4096B  的长度限制。<br> 尺寸限制影响到一个域下所有的 cookie ，而并非每个 cookie 单独限制。当超过限制的时候，该 cookie 会被悄无声息的丢掉。</p>\n<h4 id=\"构成\"><a href=\"#构成\" class=\"headerlink\" title=\"构成\"></a>构成</h4><ul>\n<li>名称： 唯一确定 cookie 的名称。 不区分大小写。（ 实践中看成区分大小写的，因为有的服务器会这样处理 ） 。 必须是经过 URL 编码的。</li>\n<li>值 。 要经过 URL 编码。</li>\n<li>域： cookie 是对哪个域是有效的。<ul>\n<li>路径： 对于制定域中的那个路径，应该向服务器发送 cookie 。</li>\n<li>失效时间。</li>\n<li>安全标志： 指定后, cookie 只有在使用 SSL 链接时候才发送到服务器。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"！！注意！！-这些参数不会作为发送到服务器的-cookie-信息的一部分，只有明值对才会被发送。\"><a href=\"#！！注意！！-这些参数不会作为发送到服务器的-cookie-信息的一部分，只有明值对才会被发送。\" class=\"headerlink\" title=\"！！注意！！ 这些参数不会作为发送到服务器的 cookie 信息的一部分，只有明值对才会被发送。\"></a>！！注意！！ 这些参数不会作为发送到服务器的 cookie 信息的一部分，只有明值对才会被发送。</h4><p>使用分号 + 空格分割每一段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTTP/1.1 200 OK</div><div class=\"line\">Content-type: text/html</div><div class=\"line\">Set-Cookie: name=value; domain=.wrox.com; path=/; secure</div><div class=\"line\">Other-header: other-header-value</div></pre></td></tr></table></figure>\n<p>–<br>参考 :</p>\n<p>  JavaScript 高级程序设计</p>\n","excerpt":"<h3 id=\"数据存储-Cookie\"><a href=\"#数据存储-Cookie\" class=\"headerlink\" title=\"数据存储 Cookie\"></a>数据存储 Cookie</h3><p>一. Cookie ( HTTP Cookie )</p>\n<h4 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h4><ul>\n<li>该标准要求服务器任意 HTTP 请求发送 Set-Cookie HTTP 头作为响应的一部分，其中包含会话信息。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//  服务器的响应头文件</div><div class=\"line\">HTTP/1.1 200 OK</div><div class=\"line\">Content-type: text/html</div><div class=\"line\">Set-Cookie: name=value</div><div class=\"line\">Other-header: other-header-value</div></pre></td></tr></table></figure>\n<ul>\n<li>浏览器会存储这样的会话信息，并在这之后，通过为每个请求添加 Cookie HTTP 头将信息发送回服务器。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">GeT/index.html HTTP/1.1</div><div class=\"line\">Cookie: name=value</div><div class=\"line\">other-header: other-header-value</div></pre></td></tr></table></figure>","more":"<h4 id=\"限制\"><a href=\"#限制\" class=\"headerlink\" title=\"限制\"></a>限制</h4><ul>\n<li>cookie 在性质上是绑在特定的域名下的。 设定了一个 cookie 之后，再给创建它的域名发送请求时。都会包含这个 cookie.</li>\n<li>但是由于 它是 存在客户端的计算机上的，每个域的 cookie  总数有限。 不过浏览器之间不同。</li>\n</ul>\n<p>IE6-  – 20, IE7+ – 50,</p>\n<p>Ff – 50, Opera – 30, Safari / Chorme 没有规定</p>\n<p>当超过限制的时候，浏览器会清除之前的设置的 cookie。</p>\n<ul>\n<li>对 cookie  的尺寸也有限制。</li>\n</ul>\n<p>大多数浏览器都有大约  4096B  的长度限制。<br> 尺寸限制影响到一个域下所有的 cookie ，而并非每个 cookie 单独限制。当超过限制的时候，该 cookie 会被悄无声息的丢掉。</p>\n<h4 id=\"构成\"><a href=\"#构成\" class=\"headerlink\" title=\"构成\"></a>构成</h4><ul>\n<li>名称： 唯一确定 cookie 的名称。 不区分大小写。（ 实践中看成区分大小写的，因为有的服务器会这样处理 ） 。 必须是经过 URL 编码的。</li>\n<li>值 。 要经过 URL 编码。</li>\n<li>域： cookie 是对哪个域是有效的。<ul>\n<li>路径： 对于制定域中的那个路径，应该向服务器发送 cookie 。</li>\n<li>失效时间。</li>\n<li>安全标志： 指定后, cookie 只有在使用 SSL 链接时候才发送到服务器。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"！！注意！！-这些参数不会作为发送到服务器的-cookie-信息的一部分，只有明值对才会被发送。\"><a href=\"#！！注意！！-这些参数不会作为发送到服务器的-cookie-信息的一部分，只有明值对才会被发送。\" class=\"headerlink\" title=\"！！注意！！ 这些参数不会作为发送到服务器的 cookie 信息的一部分，只有明值对才会被发送。\"></a>！！注意！！ 这些参数不会作为发送到服务器的 cookie 信息的一部分，只有明值对才会被发送。</h4><p>使用分号 + 空格分割每一段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTTP/1.1 200 OK</div><div class=\"line\">Content-type: text/html</div><div class=\"line\">Set-Cookie: name=value; domain=.wrox.com; path=/; secure</div><div class=\"line\">Other-header: other-header-value</div></pre></td></tr></table></figure>\n<p>–<br>参考 :</p>\n<p>  JavaScript 高级程序设计</p>"},{"title":"Web 存储","auto_spacing":true,"_content":"\n### 目的\n\n- 提供一种在 cookie 之外存储会话数据的途径。\n\n- 提供一种存储大量可以跨会话存在的数据机制。\n\n\n#### 类型\n\n最初的 Web Storage 规范包含了两种对象的定义： sessionStorage 和 globalStorage。 它们是以 window  的对象属性的形式存在的。\n\n##### Storage 类型\n\n  Storage 类型提供最大的存储空间, 来存储名值对。( 只能存储字符串，非字符串会在存储前转换成字符串 )\n<!-- more -->\n\n  Storage 的实例与其他对象类似，有如下方法。\n\n  + clear(): 删除所有值; Ff 中没有实现\n\n  + getItem(name): 根据指定的名字 name 获取对应的值\n\n  + key(index): 获取 index 位置处的值的名字\n\n  + removeItem(name, value): 删除由 name 指定的名值对\n\n  + setItem(name, value): 为指定的 name 设置一个对应的值\n\n其中， getItem(), removeItem(), setItem() 方法可以直接调用，也可以通过 Storage 对象间接调用。\n\n\n因为每个项目都是作为属性存储在该对象上的，所以可以通过 点语法 或者 方括号 访问属性来读取，设置值，或 通过 delete 来删除值。 ( __不建议__ )\n\n我们还可以用 __length__ 属性来判断有多少名值对，但无法判断所有数据的大小。( IE8 提供了 remainingSpace 属性，用于获取还可以使用的存储空间的字节数 )\n\n##### sessionStorage 对象 ( Storage 的一个实例 )\n\n  + 存储特定于每个会话的数据 ( 即该数据只保持到 __浏览器__ 关闭 )\n\n  + 可以跨越页面刷新而存在 ( __不是跨越会话__ )\n\n  + 如果浏览器支持，浏览器崩溃重启之后依然可以使用 ( Ff 和 Webkit 支持, IE 不行 )\n\n  + sessionStorage 对象绑定于某个服务器会话。( 文件本地运行不可用 )\n\n  + 存储在它里面的数据只能由最初给对象存储数据的页面访问到，所以对 __多页面__ 应用有限制\n\n  + 由于它是 Storage 的一个实例，所以可以用 setItem() 或者直接设置新的属性来存储数据\n\n```\n  // 使用方法存储数据\n  sessionStorage.setItem(\"name\", \"Nicholas\");\n\n  // 使用属性存储数据\n  sessionStorage.book = \"Professional JavaScript\";\n\n```\n  + 不同浏览器写入数据方面略有不同。Ff 和 Webkit 同步写入， IE  异步写入。 所以，IE 在设置数据和将数据实际写入磁盘之间可能会有一些延迟, 但是它会更快的回复执行。\n\n  + IE8 中可以强制把数据写入磁盘： 在设置新数据前使用 begin() , 在所有设置完了后调用 commit() 。\n\n```\n  sessionStorage.begin();\n  sessionStorage.name = \"Nicholas\";\n  sessionStorage.book = \"Professional JavaScript\";\n  sessionStorage.commit();\n```\n\n这样就确保 name book 在调用 commit() 后被立刻写入了磁盘。 begin() 是确保在这段代码执行的时候不会有其他磁盘写入操作。\n\n  + 读取数据可以使用 getItem() 或 通过直接访问属性名。\n\n  ```\n  // 使用方法获取\n  var name = sessionStorage.getItem(\"name\");\n\n  // 使用属性读取\n  var book = sessionStorage.book;\n```\n  + 迭代\n    - 通过 length 和 key()\n\n```\n  for(var i = 0, len = sessionStorage.length(); i < len; i++) {\n    var key = sessionStorage.key(i);\n    var value = sessionStorage.getItem(key);\n    alert(key + \"=\" + value);\n  }\n```\n    - 通过 for  in\n```\n  for (var key in sessionStorage) {\n    var value = sessionStorage.getItem(key);\n    alert(key + \"=\" + value);\n  }\n```\n  + 删除\n\n    - delete 操作符\n\n```\n  // Webkit 中无效\n  delete sessionStorage.name\n```\n\n    - removeItem()\n\n```\n  // removeItem()\n  sessionStorage.removeItem('book');\n```\n\n##### globalStorage 对象\n\n    - 目的是实现跨越会话的存储数据，但是有特定的访问权限\n\n    - 使用之前先指定哪些域可以访问该数据。( 通过方括号标记使用属性实现 )\n\n```\n  // 保存数据\n  globalStorage[\"wrox.com\"].name = \"Nicholas\";\n\n  // 获取数据\n  var name = globalStorage[\"wrox.com\"].name;\n```\n上面是针对 wrox.com 的存储空间。对于  wrox.com 和 它的子域都是可访问的\n\n    - globalStorage 对象 __不是  Storage 的实例__\n    - globalStorage[\"wrox.com\"] 才是\n\n    - 可以这样限制只有 子域名 www.wrox.com 可访问\n\n```\n  // 保存数据\n  globalStorage[\"www.wrox.com\"].name = \"Nicholas\";\n\n  // 获取数据\n  var name = globalStorage[\"www.wrox.com\"].name;\n```\n\n  - 对于 globalStorage\n  空间的访问，是依据发起请求的页面的 __域名，协议，端口__ 来限制的。\n\n  比如：\n\n    通过 HTTP 不能访问 通过 HTTPS 存储的数据\n\n    端口不同，不能访问\n\n  - __globalStorage 的每个属性都是 Storage 的实例__\n\n    可以这样子：\n\n```\n  globalStorage[\"www.wrox.com\"].name = \"Nicholas\";\n  globalStorage[\"www.wrox.com\"].book = \"Professional JavaScript\";\n  globalStorage[\"www.wrox.com\"].removeItem(\"name\");\n\n  var book = globalStorage[\"www.wrox.com\"].getItem(\"book\");\n```\n\n  - 当不能确定域名的时候 用 location.host\n\n  - 若不使用 removeItem() / delete 删除，或 用户未清除缓存， globalStorage 里的数据会一直保留在磁盘上\n\n##### localStorage\n\n  localStorage 在 HTML5 规范中作为 持久保存 客户端数据的方案取代了 globalStorage\n---\n\n  - localStorage 不能指定任何访问规则。\n\n  - 要访问同一个 localStorage 对象， 页面必须来自同一个域名，使用同一个端口，在同一个协议下 ( 相当于 globalStorage[location.host] )\n\n  - localStorage 是 Storage 的实例，可以像使用 sessionStorage 一样来使用它\n\n```\n  // 使用方法存储数据\n  localStorage.setItem(\"name\", \"Nicholas\");\n\n // 使用属性存储数据\n  localStorage.book = \"Professional JavaScript\";\n\n  //  使用方法 读取数据\n  var name = localStorage.getItem(\"name\");\n\n  // 使用属性读取数据\n  var book = localStorage.book;\n```\n  - 存储在 localStorage 中的数据和存储在 globalStorage 中的数据一样， __数据保留到通过 JS 删除，或者用户清除缓存  __\n\n##### storage 事件\n\n  对 storage 对象进行任何修改，都会在文档上触发 storage 事件。\n\n  这个事件的 event 对象有以下几个属性\n\n    + domain':' 发生变化的存储空间的域名\n    + key'':'' 设置或者删除的键名\n    + newValue':' 如果是设置值，则是新值; 如果是删除键，则是 null\n    + oldValue':' 键被更改之前的值\n\n  其中 IE8 和 Ff 只实现了 domain 属性。 webkit 尚不支持 storage 事件。\n\n##### 限制\n\n  - 因浏览器而异\n\n  - 以每个 来源( 协议，端口，域 ) 为单位 ( 每个来源都有固定的空间 )\n\n  - localStorage 多数为 5MB 限制， Chorme 和 Safari 是 2.5MB 限制。 IOS 版的 Safari , Android 版 Webkit 也是 2.5MB。\n\n  - sessionStorage， 有的没有限制，  Chorme 和 Safari , IOS 版的 Safari , Android 版 Webkit 也是 2.5MB。\n    IE8+ 和 Opera 是 5MB\n\n--\n参考 :\n\n  JavaScript 高级程序设计\n","source":"_posts/Web-storage.md","raw":"---\ntitle: Web 存储\ncategories:\n- 编程\ntags:\n- 抄抄抄\n- JS 基础\nauto_spacing: true\n---\n\n### 目的\n\n- 提供一种在 cookie 之外存储会话数据的途径。\n\n- 提供一种存储大量可以跨会话存在的数据机制。\n\n\n#### 类型\n\n最初的 Web Storage 规范包含了两种对象的定义： sessionStorage 和 globalStorage。 它们是以 window  的对象属性的形式存在的。\n\n##### Storage 类型\n\n  Storage 类型提供最大的存储空间, 来存储名值对。( 只能存储字符串，非字符串会在存储前转换成字符串 )\n<!-- more -->\n\n  Storage 的实例与其他对象类似，有如下方法。\n\n  + clear(): 删除所有值; Ff 中没有实现\n\n  + getItem(name): 根据指定的名字 name 获取对应的值\n\n  + key(index): 获取 index 位置处的值的名字\n\n  + removeItem(name, value): 删除由 name 指定的名值对\n\n  + setItem(name, value): 为指定的 name 设置一个对应的值\n\n其中， getItem(), removeItem(), setItem() 方法可以直接调用，也可以通过 Storage 对象间接调用。\n\n\n因为每个项目都是作为属性存储在该对象上的，所以可以通过 点语法 或者 方括号 访问属性来读取，设置值，或 通过 delete 来删除值。 ( __不建议__ )\n\n我们还可以用 __length__ 属性来判断有多少名值对，但无法判断所有数据的大小。( IE8 提供了 remainingSpace 属性，用于获取还可以使用的存储空间的字节数 )\n\n##### sessionStorage 对象 ( Storage 的一个实例 )\n\n  + 存储特定于每个会话的数据 ( 即该数据只保持到 __浏览器__ 关闭 )\n\n  + 可以跨越页面刷新而存在 ( __不是跨越会话__ )\n\n  + 如果浏览器支持，浏览器崩溃重启之后依然可以使用 ( Ff 和 Webkit 支持, IE 不行 )\n\n  + sessionStorage 对象绑定于某个服务器会话。( 文件本地运行不可用 )\n\n  + 存储在它里面的数据只能由最初给对象存储数据的页面访问到，所以对 __多页面__ 应用有限制\n\n  + 由于它是 Storage 的一个实例，所以可以用 setItem() 或者直接设置新的属性来存储数据\n\n```\n  // 使用方法存储数据\n  sessionStorage.setItem(\"name\", \"Nicholas\");\n\n  // 使用属性存储数据\n  sessionStorage.book = \"Professional JavaScript\";\n\n```\n  + 不同浏览器写入数据方面略有不同。Ff 和 Webkit 同步写入， IE  异步写入。 所以，IE 在设置数据和将数据实际写入磁盘之间可能会有一些延迟, 但是它会更快的回复执行。\n\n  + IE8 中可以强制把数据写入磁盘： 在设置新数据前使用 begin() , 在所有设置完了后调用 commit() 。\n\n```\n  sessionStorage.begin();\n  sessionStorage.name = \"Nicholas\";\n  sessionStorage.book = \"Professional JavaScript\";\n  sessionStorage.commit();\n```\n\n这样就确保 name book 在调用 commit() 后被立刻写入了磁盘。 begin() 是确保在这段代码执行的时候不会有其他磁盘写入操作。\n\n  + 读取数据可以使用 getItem() 或 通过直接访问属性名。\n\n  ```\n  // 使用方法获取\n  var name = sessionStorage.getItem(\"name\");\n\n  // 使用属性读取\n  var book = sessionStorage.book;\n```\n  + 迭代\n    - 通过 length 和 key()\n\n```\n  for(var i = 0, len = sessionStorage.length(); i < len; i++) {\n    var key = sessionStorage.key(i);\n    var value = sessionStorage.getItem(key);\n    alert(key + \"=\" + value);\n  }\n```\n    - 通过 for  in\n```\n  for (var key in sessionStorage) {\n    var value = sessionStorage.getItem(key);\n    alert(key + \"=\" + value);\n  }\n```\n  + 删除\n\n    - delete 操作符\n\n```\n  // Webkit 中无效\n  delete sessionStorage.name\n```\n\n    - removeItem()\n\n```\n  // removeItem()\n  sessionStorage.removeItem('book');\n```\n\n##### globalStorage 对象\n\n    - 目的是实现跨越会话的存储数据，但是有特定的访问权限\n\n    - 使用之前先指定哪些域可以访问该数据。( 通过方括号标记使用属性实现 )\n\n```\n  // 保存数据\n  globalStorage[\"wrox.com\"].name = \"Nicholas\";\n\n  // 获取数据\n  var name = globalStorage[\"wrox.com\"].name;\n```\n上面是针对 wrox.com 的存储空间。对于  wrox.com 和 它的子域都是可访问的\n\n    - globalStorage 对象 __不是  Storage 的实例__\n    - globalStorage[\"wrox.com\"] 才是\n\n    - 可以这样限制只有 子域名 www.wrox.com 可访问\n\n```\n  // 保存数据\n  globalStorage[\"www.wrox.com\"].name = \"Nicholas\";\n\n  // 获取数据\n  var name = globalStorage[\"www.wrox.com\"].name;\n```\n\n  - 对于 globalStorage\n  空间的访问，是依据发起请求的页面的 __域名，协议，端口__ 来限制的。\n\n  比如：\n\n    通过 HTTP 不能访问 通过 HTTPS 存储的数据\n\n    端口不同，不能访问\n\n  - __globalStorage 的每个属性都是 Storage 的实例__\n\n    可以这样子：\n\n```\n  globalStorage[\"www.wrox.com\"].name = \"Nicholas\";\n  globalStorage[\"www.wrox.com\"].book = \"Professional JavaScript\";\n  globalStorage[\"www.wrox.com\"].removeItem(\"name\");\n\n  var book = globalStorage[\"www.wrox.com\"].getItem(\"book\");\n```\n\n  - 当不能确定域名的时候 用 location.host\n\n  - 若不使用 removeItem() / delete 删除，或 用户未清除缓存， globalStorage 里的数据会一直保留在磁盘上\n\n##### localStorage\n\n  localStorage 在 HTML5 规范中作为 持久保存 客户端数据的方案取代了 globalStorage\n---\n\n  - localStorage 不能指定任何访问规则。\n\n  - 要访问同一个 localStorage 对象， 页面必须来自同一个域名，使用同一个端口，在同一个协议下 ( 相当于 globalStorage[location.host] )\n\n  - localStorage 是 Storage 的实例，可以像使用 sessionStorage 一样来使用它\n\n```\n  // 使用方法存储数据\n  localStorage.setItem(\"name\", \"Nicholas\");\n\n // 使用属性存储数据\n  localStorage.book = \"Professional JavaScript\";\n\n  //  使用方法 读取数据\n  var name = localStorage.getItem(\"name\");\n\n  // 使用属性读取数据\n  var book = localStorage.book;\n```\n  - 存储在 localStorage 中的数据和存储在 globalStorage 中的数据一样， __数据保留到通过 JS 删除，或者用户清除缓存  __\n\n##### storage 事件\n\n  对 storage 对象进行任何修改，都会在文档上触发 storage 事件。\n\n  这个事件的 event 对象有以下几个属性\n\n    + domain':' 发生变化的存储空间的域名\n    + key'':'' 设置或者删除的键名\n    + newValue':' 如果是设置值，则是新值; 如果是删除键，则是 null\n    + oldValue':' 键被更改之前的值\n\n  其中 IE8 和 Ff 只实现了 domain 属性。 webkit 尚不支持 storage 事件。\n\n##### 限制\n\n  - 因浏览器而异\n\n  - 以每个 来源( 协议，端口，域 ) 为单位 ( 每个来源都有固定的空间 )\n\n  - localStorage 多数为 5MB 限制， Chorme 和 Safari 是 2.5MB 限制。 IOS 版的 Safari , Android 版 Webkit 也是 2.5MB。\n\n  - sessionStorage， 有的没有限制，  Chorme 和 Safari , IOS 版的 Safari , Android 版 Webkit 也是 2.5MB。\n    IE8+ 和 Opera 是 5MB\n\n--\n参考 :\n\n  JavaScript 高级程序设计\n","slug":"Web-storage","published":1,"date":"2016-12-02T08:59:38.000Z","updated":"2016-12-05T06:20:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwfxj93h00038mrat1t8ucin","content":"<h3 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h3><ul>\n<li><p>提供一种在 cookie 之外存储会话数据的途径。</p>\n</li>\n<li><p>提供一种存储大量可以跨会话存在的数据机制。</p>\n</li>\n</ul>\n<h4 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h4><p>最初的 Web Storage 规范包含了两种对象的定义： sessionStorage 和 globalStorage。 它们是以 window  的对象属性的形式存在的。</p>\n<h5 id=\"Storage-类型\"><a href=\"#Storage-类型\" class=\"headerlink\" title=\"Storage 类型\"></a>Storage 类型</h5><p>  Storage 类型提供最大的存储空间, 来存储名值对。( 只能存储字符串，非字符串会在存储前转换成字符串 )<br><a id=\"more\"></a></p>\n<p>  Storage 的实例与其他对象类似，有如下方法。</p>\n<ul>\n<li><p>clear(): 删除所有值; Ff 中没有实现</p>\n</li>\n<li><p>getItem(name): 根据指定的名字 name 获取对应的值</p>\n</li>\n<li><p>key(index): 获取 index 位置处的值的名字</p>\n</li>\n<li><p>removeItem(name, value): 删除由 name 指定的名值对</p>\n</li>\n<li><p>setItem(name, value): 为指定的 name 设置一个对应的值</p>\n</li>\n</ul>\n<p>其中， getItem(), removeItem(), setItem() 方法可以直接调用，也可以通过 Storage 对象间接调用。</p>\n<p>因为每个项目都是作为属性存储在该对象上的，所以可以通过 点语法 或者 方括号 访问属性来读取，设置值，或 通过 delete 来删除值。 ( <strong>不建议</strong> )</p>\n<p>我们还可以用 <strong>length</strong> 属性来判断有多少名值对，但无法判断所有数据的大小。( IE8 提供了 remainingSpace 属性，用于获取还可以使用的存储空间的字节数 )</p>\n<h5 id=\"sessionStorage-对象-Storage-的一个实例\"><a href=\"#sessionStorage-对象-Storage-的一个实例\" class=\"headerlink\" title=\"sessionStorage 对象 ( Storage 的一个实例 )\"></a>sessionStorage 对象 ( Storage 的一个实例 )</h5><ul>\n<li><p>存储特定于每个会话的数据 ( 即该数据只保持到 <strong>浏览器</strong> 关闭 )</p>\n</li>\n<li><p>可以跨越页面刷新而存在 ( <strong>不是跨越会话</strong> )</p>\n</li>\n<li><p>如果浏览器支持，浏览器崩溃重启之后依然可以使用 ( Ff 和 Webkit 支持, IE 不行 )</p>\n</li>\n<li><p>sessionStorage 对象绑定于某个服务器会话。( 文件本地运行不可用 )</p>\n</li>\n<li><p>存储在它里面的数据只能由最初给对象存储数据的页面访问到，所以对 <strong>多页面</strong> 应用有限制</p>\n</li>\n<li><p>由于它是 Storage 的一个实例，所以可以用 setItem() 或者直接设置新的属性来存储数据</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 使用方法存储数据</div><div class=\"line\">sessionStorage.setItem(&quot;name&quot;, &quot;Nicholas&quot;);</div><div class=\"line\"></div><div class=\"line\">// 使用属性存储数据</div><div class=\"line\">sessionStorage.book = &quot;Professional JavaScript&quot;;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>不同浏览器写入数据方面略有不同。Ff 和 Webkit 同步写入， IE  异步写入。 所以，IE 在设置数据和将数据实际写入磁盘之间可能会有一些延迟, 但是它会更快的回复执行。</p>\n</li>\n<li><p>IE8 中可以强制把数据写入磁盘： 在设置新数据前使用 begin() , 在所有设置完了后调用 commit() 。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sessionStorage.begin();</div><div class=\"line\">sessionStorage.name = &quot;Nicholas&quot;;</div><div class=\"line\">sessionStorage.book = &quot;Professional JavaScript&quot;;</div><div class=\"line\">sessionStorage.commit();</div></pre></td></tr></table></figure>\n<p>这样就确保 name book 在调用 commit() 后被立刻写入了磁盘。 begin() 是确保在这段代码执行的时候不会有其他磁盘写入操作。</p>\n<ul>\n<li><p>读取数据可以使用 getItem() 或 通过直接访问属性名。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 使用方法获取</div><div class=\"line\">var name = sessionStorage.getItem(&quot;name&quot;);</div><div class=\"line\"></div><div class=\"line\">// 使用属性读取</div><div class=\"line\">var book = sessionStorage.book;</div></pre></td></tr></table></figure>\n</li>\n<li><p>迭代</p>\n<ul>\n<li>通过 length 和 key()</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">for(var i = 0, len = sessionStorage.length(); i &lt; len; i++) &#123;</div><div class=\"line\">  var key = sessionStorage.key(i);</div><div class=\"line\">  var value = sessionStorage.getItem(key);</div><div class=\"line\">  alert(key + &quot;=&quot; + value);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<pre><code>- 通过 for  in\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">for (var key in sessionStorage) &#123;</div><div class=\"line\">  var value = sessionStorage.getItem(key);</div><div class=\"line\">  alert(key + &quot;=&quot; + value);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>删除</p>\n<ul>\n<li>delete 操作符</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Webkit 中无效</div><div class=\"line\">delete sessionStorage.name</div></pre></td></tr></table></figure>\n<pre><code>- removeItem()\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// removeItem()</div><div class=\"line\">sessionStorage.removeItem(&apos;book&apos;);</div></pre></td></tr></table></figure>\n<h5 id=\"globalStorage-对象\"><a href=\"#globalStorage-对象\" class=\"headerlink\" title=\"globalStorage 对象\"></a>globalStorage 对象</h5><pre><code>- 目的是实现跨越会话的存储数据，但是有特定的访问权限\n\n- 使用之前先指定哪些域可以访问该数据。( 通过方括号标记使用属性实现 )\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 保存数据</div><div class=\"line\">globalStorage[&quot;wrox.com&quot;].name = &quot;Nicholas&quot;;</div><div class=\"line\"></div><div class=\"line\">// 获取数据</div><div class=\"line\">var name = globalStorage[&quot;wrox.com&quot;].name;</div></pre></td></tr></table></figure>\n<p>上面是针对 wrox.com 的存储空间。对于  wrox.com 和 它的子域都是可访问的</p>\n<pre><code>- globalStorage 对象 __不是  Storage 的实例__\n- globalStorage[&quot;wrox.com&quot;] 才是\n\n- 可以这样限制只有 子域名 www.wrox.com 可访问\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 保存数据</div><div class=\"line\">globalStorage[&quot;www.wrox.com&quot;].name = &quot;Nicholas&quot;;</div><div class=\"line\"></div><div class=\"line\">// 获取数据</div><div class=\"line\">var name = globalStorage[&quot;www.wrox.com&quot;].name;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>对于 globalStorage<br>空间的访问，是依据发起请求的页面的 <strong>域名，协议，端口</strong> 来限制的。</p>\n<p>比如：</p>\n<p>通过 HTTP 不能访问 通过 HTTPS 存储的数据</p>\n<p>端口不同，不能访问</p>\n</li>\n<li><p><strong>globalStorage 的每个属性都是 Storage 的实例</strong></p>\n<p>可以这样子：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">globalStorage[&quot;www.wrox.com&quot;].name = &quot;Nicholas&quot;;</div><div class=\"line\">globalStorage[&quot;www.wrox.com&quot;].book = &quot;Professional JavaScript&quot;;</div><div class=\"line\">globalStorage[&quot;www.wrox.com&quot;].removeItem(&quot;name&quot;);</div><div class=\"line\"></div><div class=\"line\">var book = globalStorage[&quot;www.wrox.com&quot;].getItem(&quot;book&quot;);</div></pre></td></tr></table></figure>\n<ul>\n<li><p>当不能确定域名的时候 用 location.host</p>\n</li>\n<li><p>若不使用 removeItem() / delete 删除，或 用户未清除缓存， globalStorage 里的数据会一直保留在磁盘上</p>\n</li>\n</ul>\n<h5 id=\"localStorage\"><a href=\"#localStorage\" class=\"headerlink\" title=\"localStorage\"></a>localStorage</h5><h2 id=\"localStorage-在-HTML5-规范中作为-持久保存-客户端数据的方案取代了-globalStorage\"><a href=\"#localStorage-在-HTML5-规范中作为-持久保存-客户端数据的方案取代了-globalStorage\" class=\"headerlink\" title=\"  localStorage 在 HTML5 规范中作为 持久保存 客户端数据的方案取代了 globalStorage\"></a>  localStorage 在 HTML5 规范中作为 持久保存 客户端数据的方案取代了 globalStorage</h2><ul>\n<li><p>localStorage 不能指定任何访问规则。</p>\n</li>\n<li><p>要访问同一个 localStorage 对象， 页面必须来自同一个域名，使用同一个端口，在同一个协议下 ( 相当于 globalStorage[location.host] )</p>\n</li>\n<li><p>localStorage 是 Storage 的实例，可以像使用 sessionStorage 一样来使用它</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"> // 使用方法存储数据</div><div class=\"line\"> localStorage.setItem(&quot;name&quot;, &quot;Nicholas&quot;);</div><div class=\"line\"></div><div class=\"line\">// 使用属性存储数据</div><div class=\"line\"> localStorage.book = &quot;Professional JavaScript&quot;;</div><div class=\"line\"></div><div class=\"line\"> //  使用方法 读取数据</div><div class=\"line\"> var name = localStorage.getItem(&quot;name&quot;);</div><div class=\"line\"></div><div class=\"line\"> // 使用属性读取数据</div><div class=\"line\"> var book = localStorage.book;</div></pre></td></tr></table></figure>\n<ul>\n<li>存储在 localStorage 中的数据和存储在 globalStorage 中的数据一样， <strong>数据保留到通过 JS 删除，或者用户清除缓存  </strong></li>\n</ul>\n<h5 id=\"storage-事件\"><a href=\"#storage-事件\" class=\"headerlink\" title=\"storage 事件\"></a>storage 事件</h5><p>  对 storage 对象进行任何修改，都会在文档上触发 storage 事件。</p>\n<p>  这个事件的 event 对象有以下几个属性</p>\n<pre><code>+ domain&apos;:&apos; 发生变化的存储空间的域名\n+ key&apos;&apos;:&apos;&apos; 设置或者删除的键名\n+ newValue&apos;:&apos; 如果是设置值，则是新值; 如果是删除键，则是 null\n+ oldValue&apos;:&apos; 键被更改之前的值\n</code></pre><p>  其中 IE8 和 Ff 只实现了 domain 属性。 webkit 尚不支持 storage 事件。</p>\n<h5 id=\"限制\"><a href=\"#限制\" class=\"headerlink\" title=\"限制\"></a>限制</h5><ul>\n<li><p>因浏览器而异</p>\n</li>\n<li><p>以每个 来源( 协议，端口，域 ) 为单位 ( 每个来源都有固定的空间 )</p>\n</li>\n<li><p>localStorage 多数为 5MB 限制， Chorme 和 Safari 是 2.5MB 限制。 IOS 版的 Safari , Android 版 Webkit 也是 2.5MB。</p>\n</li>\n<li><p>sessionStorage， 有的没有限制，  Chorme 和 Safari , IOS 版的 Safari , Android 版 Webkit 也是 2.5MB。<br>IE8+ 和 Opera 是 5MB</p>\n</li>\n</ul>\n<p>–<br>参考 :</p>\n<p>  JavaScript 高级程序设计</p>\n","excerpt":"<h3 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h3><ul>\n<li><p>提供一种在 cookie 之外存储会话数据的途径。</p>\n</li>\n<li><p>提供一种存储大量可以跨会话存在的数据机制。</p>\n</li>\n</ul>\n<h4 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h4><p>最初的 Web Storage 规范包含了两种对象的定义： sessionStorage 和 globalStorage。 它们是以 window  的对象属性的形式存在的。</p>\n<h5 id=\"Storage-类型\"><a href=\"#Storage-类型\" class=\"headerlink\" title=\"Storage 类型\"></a>Storage 类型</h5><p>  Storage 类型提供最大的存储空间, 来存储名值对。( 只能存储字符串，非字符串会在存储前转换成字符串 )<br>","more":"</p>\n<p>  Storage 的实例与其他对象类似，有如下方法。</p>\n<ul>\n<li><p>clear(): 删除所有值; Ff 中没有实现</p>\n</li>\n<li><p>getItem(name): 根据指定的名字 name 获取对应的值</p>\n</li>\n<li><p>key(index): 获取 index 位置处的值的名字</p>\n</li>\n<li><p>removeItem(name, value): 删除由 name 指定的名值对</p>\n</li>\n<li><p>setItem(name, value): 为指定的 name 设置一个对应的值</p>\n</li>\n</ul>\n<p>其中， getItem(), removeItem(), setItem() 方法可以直接调用，也可以通过 Storage 对象间接调用。</p>\n<p>因为每个项目都是作为属性存储在该对象上的，所以可以通过 点语法 或者 方括号 访问属性来读取，设置值，或 通过 delete 来删除值。 ( <strong>不建议</strong> )</p>\n<p>我们还可以用 <strong>length</strong> 属性来判断有多少名值对，但无法判断所有数据的大小。( IE8 提供了 remainingSpace 属性，用于获取还可以使用的存储空间的字节数 )</p>\n<h5 id=\"sessionStorage-对象-Storage-的一个实例\"><a href=\"#sessionStorage-对象-Storage-的一个实例\" class=\"headerlink\" title=\"sessionStorage 对象 ( Storage 的一个实例 )\"></a>sessionStorage 对象 ( Storage 的一个实例 )</h5><ul>\n<li><p>存储特定于每个会话的数据 ( 即该数据只保持到 <strong>浏览器</strong> 关闭 )</p>\n</li>\n<li><p>可以跨越页面刷新而存在 ( <strong>不是跨越会话</strong> )</p>\n</li>\n<li><p>如果浏览器支持，浏览器崩溃重启之后依然可以使用 ( Ff 和 Webkit 支持, IE 不行 )</p>\n</li>\n<li><p>sessionStorage 对象绑定于某个服务器会话。( 文件本地运行不可用 )</p>\n</li>\n<li><p>存储在它里面的数据只能由最初给对象存储数据的页面访问到，所以对 <strong>多页面</strong> 应用有限制</p>\n</li>\n<li><p>由于它是 Storage 的一个实例，所以可以用 setItem() 或者直接设置新的属性来存储数据</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 使用方法存储数据</div><div class=\"line\">sessionStorage.setItem(&quot;name&quot;, &quot;Nicholas&quot;);</div><div class=\"line\"></div><div class=\"line\">// 使用属性存储数据</div><div class=\"line\">sessionStorage.book = &quot;Professional JavaScript&quot;;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>不同浏览器写入数据方面略有不同。Ff 和 Webkit 同步写入， IE  异步写入。 所以，IE 在设置数据和将数据实际写入磁盘之间可能会有一些延迟, 但是它会更快的回复执行。</p>\n</li>\n<li><p>IE8 中可以强制把数据写入磁盘： 在设置新数据前使用 begin() , 在所有设置完了后调用 commit() 。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sessionStorage.begin();</div><div class=\"line\">sessionStorage.name = &quot;Nicholas&quot;;</div><div class=\"line\">sessionStorage.book = &quot;Professional JavaScript&quot;;</div><div class=\"line\">sessionStorage.commit();</div></pre></td></tr></table></figure>\n<p>这样就确保 name book 在调用 commit() 后被立刻写入了磁盘。 begin() 是确保在这段代码执行的时候不会有其他磁盘写入操作。</p>\n<ul>\n<li><p>读取数据可以使用 getItem() 或 通过直接访问属性名。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 使用方法获取</div><div class=\"line\">var name = sessionStorage.getItem(&quot;name&quot;);</div><div class=\"line\"></div><div class=\"line\">// 使用属性读取</div><div class=\"line\">var book = sessionStorage.book;</div></pre></td></tr></table></figure>\n</li>\n<li><p>迭代</p>\n<ul>\n<li>通过 length 和 key()</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">for(var i = 0, len = sessionStorage.length(); i &lt; len; i++) &#123;</div><div class=\"line\">  var key = sessionStorage.key(i);</div><div class=\"line\">  var value = sessionStorage.getItem(key);</div><div class=\"line\">  alert(key + &quot;=&quot; + value);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<pre><code>- 通过 for  in\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">for (var key in sessionStorage) &#123;</div><div class=\"line\">  var value = sessionStorage.getItem(key);</div><div class=\"line\">  alert(key + &quot;=&quot; + value);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>删除</p>\n<ul>\n<li>delete 操作符</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Webkit 中无效</div><div class=\"line\">delete sessionStorage.name</div></pre></td></tr></table></figure>\n<pre><code>- removeItem()\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// removeItem()</div><div class=\"line\">sessionStorage.removeItem(&apos;book&apos;);</div></pre></td></tr></table></figure>\n<h5 id=\"globalStorage-对象\"><a href=\"#globalStorage-对象\" class=\"headerlink\" title=\"globalStorage 对象\"></a>globalStorage 对象</h5><pre><code>- 目的是实现跨越会话的存储数据，但是有特定的访问权限\n\n- 使用之前先指定哪些域可以访问该数据。( 通过方括号标记使用属性实现 )\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 保存数据</div><div class=\"line\">globalStorage[&quot;wrox.com&quot;].name = &quot;Nicholas&quot;;</div><div class=\"line\"></div><div class=\"line\">// 获取数据</div><div class=\"line\">var name = globalStorage[&quot;wrox.com&quot;].name;</div></pre></td></tr></table></figure>\n<p>上面是针对 wrox.com 的存储空间。对于  wrox.com 和 它的子域都是可访问的</p>\n<pre><code>- globalStorage 对象 __不是  Storage 的实例__\n- globalStorage[&quot;wrox.com&quot;] 才是\n\n- 可以这样限制只有 子域名 www.wrox.com 可访问\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 保存数据</div><div class=\"line\">globalStorage[&quot;www.wrox.com&quot;].name = &quot;Nicholas&quot;;</div><div class=\"line\"></div><div class=\"line\">// 获取数据</div><div class=\"line\">var name = globalStorage[&quot;www.wrox.com&quot;].name;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>对于 globalStorage<br>空间的访问，是依据发起请求的页面的 <strong>域名，协议，端口</strong> 来限制的。</p>\n<p>比如：</p>\n<p>通过 HTTP 不能访问 通过 HTTPS 存储的数据</p>\n<p>端口不同，不能访问</p>\n</li>\n<li><p><strong>globalStorage 的每个属性都是 Storage 的实例</strong></p>\n<p>可以这样子：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">globalStorage[&quot;www.wrox.com&quot;].name = &quot;Nicholas&quot;;</div><div class=\"line\">globalStorage[&quot;www.wrox.com&quot;].book = &quot;Professional JavaScript&quot;;</div><div class=\"line\">globalStorage[&quot;www.wrox.com&quot;].removeItem(&quot;name&quot;);</div><div class=\"line\"></div><div class=\"line\">var book = globalStorage[&quot;www.wrox.com&quot;].getItem(&quot;book&quot;);</div></pre></td></tr></table></figure>\n<ul>\n<li><p>当不能确定域名的时候 用 location.host</p>\n</li>\n<li><p>若不使用 removeItem() / delete 删除，或 用户未清除缓存， globalStorage 里的数据会一直保留在磁盘上</p>\n</li>\n</ul>\n<h5 id=\"localStorage\"><a href=\"#localStorage\" class=\"headerlink\" title=\"localStorage\"></a>localStorage</h5><h2 id=\"localStorage-在-HTML5-规范中作为-持久保存-客户端数据的方案取代了-globalStorage\"><a href=\"#localStorage-在-HTML5-规范中作为-持久保存-客户端数据的方案取代了-globalStorage\" class=\"headerlink\" title=\"  localStorage 在 HTML5 规范中作为 持久保存 客户端数据的方案取代了 globalStorage\"></a>  localStorage 在 HTML5 规范中作为 持久保存 客户端数据的方案取代了 globalStorage</h2><ul>\n<li><p>localStorage 不能指定任何访问规则。</p>\n</li>\n<li><p>要访问同一个 localStorage 对象， 页面必须来自同一个域名，使用同一个端口，在同一个协议下 ( 相当于 globalStorage[location.host] )</p>\n</li>\n<li><p>localStorage 是 Storage 的实例，可以像使用 sessionStorage 一样来使用它</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"> // 使用方法存储数据</div><div class=\"line\"> localStorage.setItem(&quot;name&quot;, &quot;Nicholas&quot;);</div><div class=\"line\"></div><div class=\"line\">// 使用属性存储数据</div><div class=\"line\"> localStorage.book = &quot;Professional JavaScript&quot;;</div><div class=\"line\"></div><div class=\"line\"> //  使用方法 读取数据</div><div class=\"line\"> var name = localStorage.getItem(&quot;name&quot;);</div><div class=\"line\"></div><div class=\"line\"> // 使用属性读取数据</div><div class=\"line\"> var book = localStorage.book;</div></pre></td></tr></table></figure>\n<ul>\n<li>存储在 localStorage 中的数据和存储在 globalStorage 中的数据一样， <strong>数据保留到通过 JS 删除，或者用户清除缓存  </strong></li>\n</ul>\n<h5 id=\"storage-事件\"><a href=\"#storage-事件\" class=\"headerlink\" title=\"storage 事件\"></a>storage 事件</h5><p>  对 storage 对象进行任何修改，都会在文档上触发 storage 事件。</p>\n<p>  这个事件的 event 对象有以下几个属性</p>\n<pre><code>+ domain&apos;:&apos; 发生变化的存储空间的域名\n+ key&apos;&apos;:&apos;&apos; 设置或者删除的键名\n+ newValue&apos;:&apos; 如果是设置值，则是新值; 如果是删除键，则是 null\n+ oldValue&apos;:&apos; 键被更改之前的值\n</code></pre><p>  其中 IE8 和 Ff 只实现了 domain 属性。 webkit 尚不支持 storage 事件。</p>\n<h5 id=\"限制\"><a href=\"#限制\" class=\"headerlink\" title=\"限制\"></a>限制</h5><ul>\n<li><p>因浏览器而异</p>\n</li>\n<li><p>以每个 来源( 协议，端口，域 ) 为单位 ( 每个来源都有固定的空间 )</p>\n</li>\n<li><p>localStorage 多数为 5MB 限制， Chorme 和 Safari 是 2.5MB 限制。 IOS 版的 Safari , Android 版 Webkit 也是 2.5MB。</p>\n</li>\n<li><p>sessionStorage， 有的没有限制，  Chorme 和 Safari , IOS 版的 Safari , Android 版 Webkit 也是 2.5MB。<br>IE8+ 和 Opera 是 5MB</p>\n</li>\n</ul>\n<p>–<br>参考 :</p>\n<p>  JavaScript 高级程序设计</p>"},{"title":"React 优化","date":"2016-12-06T16:00:00.000Z","auto_spacing":true,"_content":"\n#### 背景\n\n这两天，把自己用 React 的第一项目小小重新改了下。其实我内心是有一点小拒绝的 。。。因为，通过这三个月的练手，这个项目和之后的一个小项目，加上我对第二个小项目重写了大概 3～4 遍，(至今还对它不是很满意 ),  我对 React 的这种思维方式及代码规范收集到了更多的知识。\n\n我是大概看了两三天的 API 然后找到一个实践教程 ( 不知道这么叫对不对...), _Hacking With React_ 。\n\n<!-- more-->\n\n然后就直接开始做项目了，刚开始的时候，我完全不知道从哪里下手，该怎么做，那个时候甚至不知道除了 state 和 props，别的变量在组件内声明是不是一个好的做法。因此，基本上全都用 state，也不知道用 componentShouldMount 来去除避免不需要的 Mount。\n\n导致的结果就是，整个组件的结构都一团糟，全是 state, 无用代码大概有 1/2 到 2/3。\n\n其实我也并不是不想整理，而是时间的问题，我是准备之后用它练手 Redux  ( 现在也就大概能初步上手的样子 )。但是，迫于无奈，我现在必须要稍微整理下 (准备找工作 )。\n\n这次整理，不动整体的组件的结构，只是将 components 的写法规整。\n\n\n#### 整理过程\n\n首先，因为当时是跟后端对接的，我在项目的最后把本来写在组件里的实例数据全删了。这个项目中，我还不会使用 mock  之类的，在我的电脑上搭了一个 nginx 起了一个服务器来返回数据 ( 里面是后端的代码 )。然后，这两天我用的时候，重新 pull 了一下代码，然后发现，数据只有一两个网页能用，别的都不能用，貌似后端后来之后又改过代码。尝试了多次，试了一下去找后端的代码，发现看不懂，遂弃。\n\n本来想拿 superagent-mock 做一个简单的数，又考虑希望直接可以放在网上浏览，所以最后决定直接在代码里面放数据 ( 主要放在 container 组件 )，生成静态页面就好了。\n\n然后，我从每个 container 组件入手，主要根据的 fetching 成功后的数据整理，大概将数据还原，然后再一个一个的组件的确认调整。\n\n数据通了我就可以调整代码了，主要的整理的有这几个点：\n\n1. 组件里的自定义 Function ( 方法 ) 都在 constructor 里绑定 this ( .bind(this) )\n\n2. 将大部分的变量 ( 属性 ) 移出 state，同样在 constructor 里声明 ( this.num = 0 之类 )。\n\n3. 其中还有一大部分的 state 来自 props，同样将它们大部分都移出 state。\n\n4. 将组件中用到上述两条中的 this.state.XXX, 改成相应正确调用的形式。\n\n5. 同样由于前两条，很多的 componentWillReceiveProps 和 componentWillUpdate 需要移出。\n\n6. 对于 render 里面很多写 this.state.XXX 和 this.props.XXX 情况，用 ES6解构赋值 const { n1,n2 } = this.state, 这种形式。\n\n7. map 函数中的 function(){}  ( 偶尔还会给后面 加 bind( this ) ), 改成箭头函数，同时去除 bind。\n\n8. 将里面大部分的用 let 声明的常量用 const 声明。\n\n9. 哦对，我之前一直都没有初始化 props, 需要的组件额后面加上 XXX.defaultProps, XXX.propTypes。\n\n10. 将某些 class componennt 改成 function component。\n\n11. 将某些注册监听滚动的组件，在 unmount 的时候解除监听。 ( 监听事件和解除监听事件这里不是很懂 )\n\n12. 将某些组件的 React.Component 改成 React.PureComponent ( 相比于 shouldComponentUnpadte 方便多～ )\n\n嗯，大概这一次就大概改这些吧～ \n\n更多的优化留给之后啦～\n\n\n__待优化的方向，__\n\n- 组件细分\n- load transtion 之类的，优化效果\n- eslint ( 好处多多 )\n- 数据 Immutable \n- Redux 用起来！\n- CSS module \n- class 命名\n\n其中，Redux 小试了一下，Css module 和 Immutable 都没有用过。\n\n\n---\n\n标记下： 我在调试的时候，在 Chrome React 的那个调试工具，发现有时候会多出几套 组件，就是相当于把现在的组件全复制了几份，不知道是哪里出的问题。。复现不了。。。\n\n\n\n\n{% blockquote %}\n#### 更多组件优化参考\n\n[React移动web极致优化](http://dev.qq.com/topic/579083d1c9da73584b02587d)\n\n[React：创建可维护、高性能的 UI 组件](http://www.ibm.com/developerworks/cn/web/wa-react-intro/)\n\n{% endblockquote %}\n \n\n","source":"_posts/React Review .md","raw":"---\ntitle: React 优化 \ndate: 2016-12-07\ncategories:\n- 编程\ntags:\n- 总结\nauto_spacing: true\n---\n\n#### 背景\n\n这两天，把自己用 React 的第一项目小小重新改了下。其实我内心是有一点小拒绝的 。。。因为，通过这三个月的练手，这个项目和之后的一个小项目，加上我对第二个小项目重写了大概 3～4 遍，(至今还对它不是很满意 ),  我对 React 的这种思维方式及代码规范收集到了更多的知识。\n\n我是大概看了两三天的 API 然后找到一个实践教程 ( 不知道这么叫对不对...), _Hacking With React_ 。\n\n<!-- more-->\n\n然后就直接开始做项目了，刚开始的时候，我完全不知道从哪里下手，该怎么做，那个时候甚至不知道除了 state 和 props，别的变量在组件内声明是不是一个好的做法。因此，基本上全都用 state，也不知道用 componentShouldMount 来去除避免不需要的 Mount。\n\n导致的结果就是，整个组件的结构都一团糟，全是 state, 无用代码大概有 1/2 到 2/3。\n\n其实我也并不是不想整理，而是时间的问题，我是准备之后用它练手 Redux  ( 现在也就大概能初步上手的样子 )。但是，迫于无奈，我现在必须要稍微整理下 (准备找工作 )。\n\n这次整理，不动整体的组件的结构，只是将 components 的写法规整。\n\n\n#### 整理过程\n\n首先，因为当时是跟后端对接的，我在项目的最后把本来写在组件里的实例数据全删了。这个项目中，我还不会使用 mock  之类的，在我的电脑上搭了一个 nginx 起了一个服务器来返回数据 ( 里面是后端的代码 )。然后，这两天我用的时候，重新 pull 了一下代码，然后发现，数据只有一两个网页能用，别的都不能用，貌似后端后来之后又改过代码。尝试了多次，试了一下去找后端的代码，发现看不懂，遂弃。\n\n本来想拿 superagent-mock 做一个简单的数，又考虑希望直接可以放在网上浏览，所以最后决定直接在代码里面放数据 ( 主要放在 container 组件 )，生成静态页面就好了。\n\n然后，我从每个 container 组件入手，主要根据的 fetching 成功后的数据整理，大概将数据还原，然后再一个一个的组件的确认调整。\n\n数据通了我就可以调整代码了，主要的整理的有这几个点：\n\n1. 组件里的自定义 Function ( 方法 ) 都在 constructor 里绑定 this ( .bind(this) )\n\n2. 将大部分的变量 ( 属性 ) 移出 state，同样在 constructor 里声明 ( this.num = 0 之类 )。\n\n3. 其中还有一大部分的 state 来自 props，同样将它们大部分都移出 state。\n\n4. 将组件中用到上述两条中的 this.state.XXX, 改成相应正确调用的形式。\n\n5. 同样由于前两条，很多的 componentWillReceiveProps 和 componentWillUpdate 需要移出。\n\n6. 对于 render 里面很多写 this.state.XXX 和 this.props.XXX 情况，用 ES6解构赋值 const { n1,n2 } = this.state, 这种形式。\n\n7. map 函数中的 function(){}  ( 偶尔还会给后面 加 bind( this ) ), 改成箭头函数，同时去除 bind。\n\n8. 将里面大部分的用 let 声明的常量用 const 声明。\n\n9. 哦对，我之前一直都没有初始化 props, 需要的组件额后面加上 XXX.defaultProps, XXX.propTypes。\n\n10. 将某些 class componennt 改成 function component。\n\n11. 将某些注册监听滚动的组件，在 unmount 的时候解除监听。 ( 监听事件和解除监听事件这里不是很懂 )\n\n12. 将某些组件的 React.Component 改成 React.PureComponent ( 相比于 shouldComponentUnpadte 方便多～ )\n\n嗯，大概这一次就大概改这些吧～ \n\n更多的优化留给之后啦～\n\n\n__待优化的方向，__\n\n- 组件细分\n- load transtion 之类的，优化效果\n- eslint ( 好处多多 )\n- 数据 Immutable \n- Redux 用起来！\n- CSS module \n- class 命名\n\n其中，Redux 小试了一下，Css module 和 Immutable 都没有用过。\n\n\n---\n\n标记下： 我在调试的时候，在 Chrome React 的那个调试工具，发现有时候会多出几套 组件，就是相当于把现在的组件全复制了几份，不知道是哪里出的问题。。复现不了。。。\n\n\n\n\n{% blockquote %}\n#### 更多组件优化参考\n\n[React移动web极致优化](http://dev.qq.com/topic/579083d1c9da73584b02587d)\n\n[React：创建可维护、高性能的 UI 组件](http://www.ibm.com/developerworks/cn/web/wa-react-intro/)\n\n{% endblockquote %}\n \n\n","slug":"React Review ","published":1,"updated":"2016-12-09T08:06:36.000Z","_id":"ciwfxj93o00078mra5nn0ff90","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>这两天，把自己用 React 的第一项目小小重新改了下。其实我内心是有一点小拒绝的 。。。因为，通过这三个月的练手，这个项目和之后的一个小项目，加上我对第二个小项目重写了大概 3～4 遍，(至今还对它不是很满意 ),  我对 React 的这种思维方式及代码规范收集到了更多的知识。</p>\n<p>我是大概看了两三天的 API 然后找到一个实践教程 ( 不知道这么叫对不对…), <em>Hacking With React</em> 。</p>\n<a id=\"more\"></a>\n<p>然后就直接开始做项目了，刚开始的时候，我完全不知道从哪里下手，该怎么做，那个时候甚至不知道除了 state 和 props，别的变量在组件内声明是不是一个好的做法。因此，基本上全都用 state，也不知道用 componentShouldMount 来去除避免不需要的 Mount。</p>\n<p>导致的结果就是，整个组件的结构都一团糟，全是 state, 无用代码大概有 1/2 到 2/3。</p>\n<p>其实我也并不是不想整理，而是时间的问题，我是准备之后用它练手 Redux  ( 现在也就大概能初步上手的样子 )。但是，迫于无奈，我现在必须要稍微整理下 (准备找工作 )。</p>\n<p>这次整理，不动整体的组件的结构，只是将 components 的写法规整。</p>\n<h4 id=\"整理过程\"><a href=\"#整理过程\" class=\"headerlink\" title=\"整理过程\"></a>整理过程</h4><p>首先，因为当时是跟后端对接的，我在项目的最后把本来写在组件里的实例数据全删了。这个项目中，我还不会使用 mock  之类的，在我的电脑上搭了一个 nginx 起了一个服务器来返回数据 ( 里面是后端的代码 )。然后，这两天我用的时候，重新 pull 了一下代码，然后发现，数据只有一两个网页能用，别的都不能用，貌似后端后来之后又改过代码。尝试了多次，试了一下去找后端的代码，发现看不懂，遂弃。</p>\n<p>本来想拿 superagent-mock 做一个简单的数，又考虑希望直接可以放在网上浏览，所以最后决定直接在代码里面放数据 ( 主要放在 container 组件 )，生成静态页面就好了。</p>\n<p>然后，我从每个 container 组件入手，主要根据的 fetching 成功后的数据整理，大概将数据还原，然后再一个一个的组件的确认调整。</p>\n<p>数据通了我就可以调整代码了，主要的整理的有这几个点：</p>\n<ol>\n<li><p>组件里的自定义 Function ( 方法 ) 都在 constructor 里绑定 this ( .bind(this) )</p>\n</li>\n<li><p>将大部分的变量 ( 属性 ) 移出 state，同样在 constructor 里声明 ( this.num = 0 之类 )。</p>\n</li>\n<li><p>其中还有一大部分的 state 来自 props，同样将它们大部分都移出 state。</p>\n</li>\n<li><p>将组件中用到上述两条中的 this.state.XXX, 改成相应正确调用的形式。</p>\n</li>\n<li><p>同样由于前两条，很多的 componentWillReceiveProps 和 componentWillUpdate 需要移出。</p>\n</li>\n<li><p>对于 render 里面很多写 this.state.XXX 和 this.props.XXX 情况，用 ES6解构赋值 const { n1,n2 } = this.state, 这种形式。</p>\n</li>\n<li><p>map 函数中的 function(){}  ( 偶尔还会给后面 加 bind( this ) ), 改成箭头函数，同时去除 bind。</p>\n</li>\n<li><p>将里面大部分的用 let 声明的常量用 const 声明。</p>\n</li>\n<li><p>哦对，我之前一直都没有初始化 props, 需要的组件额后面加上 XXX.defaultProps, XXX.propTypes。</p>\n</li>\n<li><p>将某些 class componennt 改成 function component。</p>\n</li>\n<li><p>将某些注册监听滚动的组件，在 unmount 的时候解除监听。 ( 监听事件和解除监听事件这里不是很懂 )</p>\n</li>\n<li><p>将某些组件的 React.Component 改成 React.PureComponent ( 相比于 shouldComponentUnpadte 方便多～ )</p>\n</li>\n</ol>\n<p>嗯，大概这一次就大概改这些吧～ </p>\n<p>更多的优化留给之后啦～</p>\n<p><strong>待优化的方向，</strong></p>\n<ul>\n<li>组件细分</li>\n<li>load transtion 之类的，优化效果</li>\n<li>eslint ( 好处多多 )</li>\n<li>数据 Immutable </li>\n<li>Redux 用起来！</li>\n<li>CSS module </li>\n<li>class 命名</li>\n</ul>\n<p>其中，Redux 小试了一下，Css module 和 Immutable 都没有用过。</p>\n<hr>\n<p>标记下： 我在调试的时候，在 Chrome React 的那个调试工具，发现有时候会多出几套 组件，就是相当于把现在的组件全复制了几份，不知道是哪里出的问题。。复现不了。。。</p>\n<blockquote><h4 id=\"更多组件优化参考\"><a href=\"#更多组件优化参考\" class=\"headerlink\" title=\"更多组件优化参考\"></a>更多组件优化参考</h4><p><a href=\"http://dev.qq.com/topic/579083d1c9da73584b02587d\" target=\"_blank\" rel=\"external\">React移动web极致优化</a></p>\n<p><a href=\"http://www.ibm.com/developerworks/cn/web/wa-react-intro/\" target=\"_blank\" rel=\"external\">React：创建可维护、高性能的 UI 组件</a></p>\n</blockquote>\n","excerpt":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>这两天，把自己用 React 的第一项目小小重新改了下。其实我内心是有一点小拒绝的 。。。因为，通过这三个月的练手，这个项目和之后的一个小项目，加上我对第二个小项目重写了大概 3～4 遍，(至今还对它不是很满意 ),  我对 React 的这种思维方式及代码规范收集到了更多的知识。</p>\n<p>我是大概看了两三天的 API 然后找到一个实践教程 ( 不知道这么叫对不对…), <em>Hacking With React</em> 。</p>","more":"<p>然后就直接开始做项目了，刚开始的时候，我完全不知道从哪里下手，该怎么做，那个时候甚至不知道除了 state 和 props，别的变量在组件内声明是不是一个好的做法。因此，基本上全都用 state，也不知道用 componentShouldMount 来去除避免不需要的 Mount。</p>\n<p>导致的结果就是，整个组件的结构都一团糟，全是 state, 无用代码大概有 1/2 到 2/3。</p>\n<p>其实我也并不是不想整理，而是时间的问题，我是准备之后用它练手 Redux  ( 现在也就大概能初步上手的样子 )。但是，迫于无奈，我现在必须要稍微整理下 (准备找工作 )。</p>\n<p>这次整理，不动整体的组件的结构，只是将 components 的写法规整。</p>\n<h4 id=\"整理过程\"><a href=\"#整理过程\" class=\"headerlink\" title=\"整理过程\"></a>整理过程</h4><p>首先，因为当时是跟后端对接的，我在项目的最后把本来写在组件里的实例数据全删了。这个项目中，我还不会使用 mock  之类的，在我的电脑上搭了一个 nginx 起了一个服务器来返回数据 ( 里面是后端的代码 )。然后，这两天我用的时候，重新 pull 了一下代码，然后发现，数据只有一两个网页能用，别的都不能用，貌似后端后来之后又改过代码。尝试了多次，试了一下去找后端的代码，发现看不懂，遂弃。</p>\n<p>本来想拿 superagent-mock 做一个简单的数，又考虑希望直接可以放在网上浏览，所以最后决定直接在代码里面放数据 ( 主要放在 container 组件 )，生成静态页面就好了。</p>\n<p>然后，我从每个 container 组件入手，主要根据的 fetching 成功后的数据整理，大概将数据还原，然后再一个一个的组件的确认调整。</p>\n<p>数据通了我就可以调整代码了，主要的整理的有这几个点：</p>\n<ol>\n<li><p>组件里的自定义 Function ( 方法 ) 都在 constructor 里绑定 this ( .bind(this) )</p>\n</li>\n<li><p>将大部分的变量 ( 属性 ) 移出 state，同样在 constructor 里声明 ( this.num = 0 之类 )。</p>\n</li>\n<li><p>其中还有一大部分的 state 来自 props，同样将它们大部分都移出 state。</p>\n</li>\n<li><p>将组件中用到上述两条中的 this.state.XXX, 改成相应正确调用的形式。</p>\n</li>\n<li><p>同样由于前两条，很多的 componentWillReceiveProps 和 componentWillUpdate 需要移出。</p>\n</li>\n<li><p>对于 render 里面很多写 this.state.XXX 和 this.props.XXX 情况，用 ES6解构赋值 const { n1,n2 } = this.state, 这种形式。</p>\n</li>\n<li><p>map 函数中的 function(){}  ( 偶尔还会给后面 加 bind( this ) ), 改成箭头函数，同时去除 bind。</p>\n</li>\n<li><p>将里面大部分的用 let 声明的常量用 const 声明。</p>\n</li>\n<li><p>哦对，我之前一直都没有初始化 props, 需要的组件额后面加上 XXX.defaultProps, XXX.propTypes。</p>\n</li>\n<li><p>将某些 class componennt 改成 function component。</p>\n</li>\n<li><p>将某些注册监听滚动的组件，在 unmount 的时候解除监听。 ( 监听事件和解除监听事件这里不是很懂 )</p>\n</li>\n<li><p>将某些组件的 React.Component 改成 React.PureComponent ( 相比于 shouldComponentUnpadte 方便多～ )</p>\n</li>\n</ol>\n<p>嗯，大概这一次就大概改这些吧～ </p>\n<p>更多的优化留给之后啦～</p>\n<p><strong>待优化的方向，</strong></p>\n<ul>\n<li>组件细分</li>\n<li>load transtion 之类的，优化效果</li>\n<li>eslint ( 好处多多 )</li>\n<li>数据 Immutable </li>\n<li>Redux 用起来！</li>\n<li>CSS module </li>\n<li>class 命名</li>\n</ul>\n<p>其中，Redux 小试了一下，Css module 和 Immutable 都没有用过。</p>\n<hr>\n<p>标记下： 我在调试的时候，在 Chrome React 的那个调试工具，发现有时候会多出几套 组件，就是相当于把现在的组件全复制了几份，不知道是哪里出的问题。。复现不了。。。</p>\n<blockquote><h4 id=\"更多组件优化参考\"><a href=\"#更多组件优化参考\" class=\"headerlink\" title=\"更多组件优化参考\"></a>更多组件优化参考</h4><p><a href=\"http://dev.qq.com/topic/579083d1c9da73584b02587d\">React移动web极致优化</a></p>\n<p><a href=\"http://www.ibm.com/developerworks/cn/web/wa-react-intro/\">React：创建可维护、高性能的 UI 组件</a></p>\n</blockquote>"},{"title":"从文章到网页的操作流程以及 CI 设置","_content":"\n记录一下,  才开始用的 CI 的流程，防止忘记～～\n\n现在的这个博客, github 上有两个库, 一个是源代码的库，包括写的草稿，hexo 的构建系统，各种插件，等。 另一个是发布的库，就是 hexo deploy 后的 public 的那部分。\n\n<!-- more -->\n同时本地也有对应的两个文件夹。\n\n流程：\n\n#### 本地操作\n\n1. 在本地的 源代码 库，写文章，做各种改动。然后，本地测试一下。\n\n2. 生成 public 的发布部分，然后将 public 部分，copy 到 public 文件夹下。\n\n3. 发布的库，确定一下无误， git push 到 github 上。\n\n####  CI 部分\n\n这一部分都已经配好了，不用我操作，就记录一下过程。\n\n1. 上一部分的 github 设置了一个 webhook, 当 push 了新的东西的时候, 就会给 CI 发一个 post\n\n2. CI 接收到了来自 github 的 post, 触发它开始运作，首先将这个仓库的代码 git pull 下来 ( 到服务器上的 dev 的文件夹 ), 然后在这里执行自定义命令\n\n3. 关于上一步，我是没有自定义命令，因为我不是很需要。( 我是直接跳到第 5 步 ) 一般来说这里都会有 测试，确保文件和代码在线上没有问题。\n\n4. 之后，应该还应该还有另一个 prod 的文件夹，当收到来自 dev 文件夹测试成功的消息后, 将某些文件 copy 来这个文件夹里。\n\n5. 设置 nginx 静态资源指向 prod 文件夹, 当 prod 里面的文件发生变化，网页的内容页就会变化。\n\n","source":"_posts/ci.md","raw":"---\ntitle: 从文章到网页的操作流程以及 CI 设置\ncategories:\n- 编程\ntags:\n- 记录\n- 操作\n- CI\n---\n\n记录一下,  才开始用的 CI 的流程，防止忘记～～\n\n现在的这个博客, github 上有两个库, 一个是源代码的库，包括写的草稿，hexo 的构建系统，各种插件，等。 另一个是发布的库，就是 hexo deploy 后的 public 的那部分。\n\n<!-- more -->\n同时本地也有对应的两个文件夹。\n\n流程：\n\n#### 本地操作\n\n1. 在本地的 源代码 库，写文章，做各种改动。然后，本地测试一下。\n\n2. 生成 public 的发布部分，然后将 public 部分，copy 到 public 文件夹下。\n\n3. 发布的库，确定一下无误， git push 到 github 上。\n\n####  CI 部分\n\n这一部分都已经配好了，不用我操作，就记录一下过程。\n\n1. 上一部分的 github 设置了一个 webhook, 当 push 了新的东西的时候, 就会给 CI 发一个 post\n\n2. CI 接收到了来自 github 的 post, 触发它开始运作，首先将这个仓库的代码 git pull 下来 ( 到服务器上的 dev 的文件夹 ), 然后在这里执行自定义命令\n\n3. 关于上一步，我是没有自定义命令，因为我不是很需要。( 我是直接跳到第 5 步 ) 一般来说这里都会有 测试，确保文件和代码在线上没有问题。\n\n4. 之后，应该还应该还有另一个 prod 的文件夹，当收到来自 dev 文件夹测试成功的消息后, 将某些文件 copy 来这个文件夹里。\n\n5. 设置 nginx 静态资源指向 prod 文件夹, 当 prod 里面的文件发生变化，网页的内容页就会变化。\n\n","slug":"ci","published":1,"date":"2016-12-04T13:10:01.000Z","updated":"2016-12-09T08:21:03.000Z","_id":"ciwfxj93w00098mrav765ea0k","comments":1,"layout":"post","photos":[],"link":"","content":"<p>记录一下,  才开始用的 CI 的流程，防止忘记～～</p>\n<p>现在的这个博客, github 上有两个库, 一个是源代码的库，包括写的草稿，hexo 的构建系统，各种插件，等。 另一个是发布的库，就是 hexo deploy 后的 public 的那部分。</p>\n<a id=\"more\"></a>\n<p>同时本地也有对应的两个文件夹。</p>\n<p>流程：</p>\n<h4 id=\"本地操作\"><a href=\"#本地操作\" class=\"headerlink\" title=\"本地操作\"></a>本地操作</h4><ol>\n<li><p>在本地的 源代码 库，写文章，做各种改动。然后，本地测试一下。</p>\n</li>\n<li><p>生成 public 的发布部分，然后将 public 部分，copy 到 public 文件夹下。</p>\n</li>\n<li><p>发布的库，确定一下无误， git push 到 github 上。</p>\n</li>\n</ol>\n<h4 id=\"CI-部分\"><a href=\"#CI-部分\" class=\"headerlink\" title=\"CI 部分\"></a>CI 部分</h4><p>这一部分都已经配好了，不用我操作，就记录一下过程。</p>\n<ol>\n<li><p>上一部分的 github 设置了一个 webhook, 当 push 了新的东西的时候, 就会给 CI 发一个 post</p>\n</li>\n<li><p>CI 接收到了来自 github 的 post, 触发它开始运作，首先将这个仓库的代码 git pull 下来 ( 到服务器上的 dev 的文件夹 ), 然后在这里执行自定义命令</p>\n</li>\n<li><p>关于上一步，我是没有自定义命令，因为我不是很需要。( 我是直接跳到第 5 步 ) 一般来说这里都会有 测试，确保文件和代码在线上没有问题。</p>\n</li>\n<li><p>之后，应该还应该还有另一个 prod 的文件夹，当收到来自 dev 文件夹测试成功的消息后, 将某些文件 copy 来这个文件夹里。</p>\n</li>\n<li><p>设置 nginx 静态资源指向 prod 文件夹, 当 prod 里面的文件发生变化，网页的内容页就会变化。</p>\n</li>\n</ol>\n","excerpt":"<p>记录一下,  才开始用的 CI 的流程，防止忘记～～</p>\n<p>现在的这个博客, github 上有两个库, 一个是源代码的库，包括写的草稿，hexo 的构建系统，各种插件，等。 另一个是发布的库，就是 hexo deploy 后的 public 的那部分。</p>","more":"<p>同时本地也有对应的两个文件夹。</p>\n<p>流程：</p>\n<h4 id=\"本地操作\"><a href=\"#本地操作\" class=\"headerlink\" title=\"本地操作\"></a>本地操作</h4><ol>\n<li><p>在本地的 源代码 库，写文章，做各种改动。然后，本地测试一下。</p>\n</li>\n<li><p>生成 public 的发布部分，然后将 public 部分，copy 到 public 文件夹下。</p>\n</li>\n<li><p>发布的库，确定一下无误， git push 到 github 上。</p>\n</li>\n</ol>\n<h4 id=\"CI-部分\"><a href=\"#CI-部分\" class=\"headerlink\" title=\"CI 部分\"></a>CI 部分</h4><p>这一部分都已经配好了，不用我操作，就记录一下过程。</p>\n<ol>\n<li><p>上一部分的 github 设置了一个 webhook, 当 push 了新的东西的时候, 就会给 CI 发一个 post</p>\n</li>\n<li><p>CI 接收到了来自 github 的 post, 触发它开始运作，首先将这个仓库的代码 git pull 下来 ( 到服务器上的 dev 的文件夹 ), 然后在这里执行自定义命令</p>\n</li>\n<li><p>关于上一步，我是没有自定义命令，因为我不是很需要。( 我是直接跳到第 5 步 ) 一般来说这里都会有 测试，确保文件和代码在线上没有问题。</p>\n</li>\n<li><p>之后，应该还应该还有另一个 prod 的文件夹，当收到来自 dev 文件夹测试成功的消息后, 将某些文件 copy 来这个文件夹里。</p>\n</li>\n<li><p>设置 nginx 静态资源指向 prod 文件夹, 当 prod 里面的文件发生变化，网页的内容页就会变化。</p>\n</li>\n</ol>"},{"title":"闭包","auto_spacing":true,"_content":"\n\n### 基础知识\n\n - 闭包是指有权访问另一个函数作用域中的变量的函数。\n\n - 创建闭包的常见方式：在 一个函数内部创建另一个函数\n\n```\nfunction createComparisonFunction(propertyName) {\n    return function(obj1, obj2) {\n        var v1 = obj1[propertyName]; // 这里两行访问了外部函数的变量\n        var v2 = obj2[propertyName]; // 这里两行访问了外部函数的变量\n\n        if(v1 < v2) {\n            return -1;\n        } else if (v1 > v2) {\n            return 1;\n        } else {\n            return 0;\n        }\n    };\n}\n\n```\n<!-- more -->\n如上面例子，内部函数访问了外部函数的变量，即使这个内部函数被返回了，在其他地方被调用了，依旧能访问外部变量 propertyName。\n\n - 为什么呢？\n\n   简单的说是因为内部函数的**作用域链**中包含了外部函数 createComparisonFunction 的作用域。\n\n\n#### 作用域链：\n\n  - 本质上是一个指向变量对象的指针列表。\n\n  - 当某个函数被调用的时候，会创建一个执行环境( execution context )及相应的作用域链。\n\n  - 然后，使用 arguments 和其他命名参数的值来初始化函数的活动对象( activation object )。\n\n  - 在作用域链中，外部函数的活动对象始终处于第二位，外部函数的外部函数的活动对象处于第三位。。。。直至作用域链终点的全局执行环境。\n  - 无论在什么时候函数访问一个变量的时候，就会从作用域链中搜索具有相应名字的变量。\n\n\n __为了了解调用函数后都发生了什么我们先从一个简单的例子下手：__\n\n```\nfunction compare(v1, v2) {\n    if(v1 < v2) {\n        return -1;\n    } else if (v1 > v2) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nvar result = compare(5, 10);\n\n```\n\n当调用 compare() 时，会创建一个包含 arguments, v1, v2 的**活动对象**。 全局执行环境的变量对象（包含 compare() 和 result）在 compare() 执行环境的作用域链中处于第二位。\n\n\n**每个执行环境都有一个表示变量的对象 -- 变量对象**。全局执行环境的变量对象始终存在，而像 compare（） 函数这样的局部环境的变量对象，只在函数**执行过程**中存在。\n\n - 在**创建** compare() 函数时，会创建一个**预先**包含**全局变量对象**的作用域链，这个作用域链被保存在 内部的 **[[Scope]]** 属性中。\n\n - 当调用 compare() 时，会为函数创建一个执行环境，然后通过**复制 [[Scope]]** 属性中的对象**构建**起执行环境的**作用域链**。\n\n - 然后，又有一个**活动对象**（函数的变量对象）被创建并被**推入**执行环境作用域的前端。\n\n在上面的例子中，compare() 执行环境的作用域中包含两个变量对象：本地活动对象和全局变量对象。\n\n无论在什么时候函数访问一个变量的时候，就会从作用域链中搜索具有相应名字的变量。\n\n##### 当函数执行完后，局部的活动对象就会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）。  但是，闭包不同。\n\n\n在一个函数内部定义的函数将会包含（外部函数）的活动对象添加道它的作用域链中。 因此在第一个例子中，如下：\n\n```\nfunction createComparisonFunction(propertyName) {\n    return function(obj1, obj2) {\n        var v1 = obj1[propertyName]; // 这里两行访问了外部函数的变量\n        var v2 = obj2[propertyName]; // 这里两行访问了外部函数的变量\n\n        if(v1 < v2) {\n            return -1;\n        } else if (v1 > v2) {\n            return 1;\n        } else {\n            return 0;\n        }\n    };\n}\n\n```\n\n在 createComparisonFunction() **内部定义**的**匿名函数**的作用域链中，实际上将会包含外部函数 createComparisonFunction() 的活动对象。\n\n在匿名函数从createComparisonFunction() 中返回后，它的作用域链被初始化为 **包含 createComparisonFunction() 函数的活动对象和全局变量对象**。\n\n这样匿名函数就可以访问在 在匿名函数从createComparisonFunction 中定义的变量了。\n\n更重要的是 createComparisonFunction 函数在执行完后，其活动对象也不会被销毁，因为\n匿名函数的作用域链仍然在引用这个活动对象。（也就是说，当createComparisonFunction 函数返回后，其执行环境的作用域链会被销毁，**==但他的活动对象留在了内存中==**，直到匿名函数被销毁。\n\n例如：\n```\n// 创建函数\nvar compareName = createComparisonFunction(\"name\");\n\n// 调用函数\nvar result = compareName({name:\"Nicholas\"}, {name: \"Greg\"});\n\n// 解除对匿名函数的引用 (以便释放内存)\ncompareName = null\n```\n**通过将 compareName = null 解除该函数的引用**，就等于通知垃圾回收例程将其清除。\n\n\n### 闭包与变量\n\n**作用域链这种机制引出一个值得注意的副作用： 闭包只能取得包含函数中任何变量的 **最后一个值**。 如下：\n\n```\nfunction createFunctions(){\n    var result = new Array();\n\n    for(var i =0; i<10; i++) {\n        result[i] = function(){\n            return i;\n        };\n    }\n\n    return result;\n}\n```\n\n这个函数会返回一个函数数组。\n\n表面上看应该返回的数组类似于 [0,1,2,3 ....] 这个样子的，但是实际上返回的是 **[10, 10, 10, 10 ...]** 这个样子的。\n\n因为**每个函数**的作用域链上都保存着createFunctions 函数的**活动对象**，所以他们都引用的是**同一个变量 i**。 当createFunctions 函数**返回**后， 变量 i 的值是 10。\n\n但是， 我们可以通过创建另一个匿名函数强制让闭包的行为符合预期。如下：\n\n```\nfunction createFunctions(){\n    var result = new Array();\n\n    for(var i =0; i<10; i++) {\n        result[i] = (function(num){\n            return function(){\n                return num;\n            };\n        })(i);\n    }\n\n    return result;\n}\n```\n\n这样，每个函数就会返回各自不同的索引值了。\n\n在这个版本中，我们没有直接把闭包赋给数组，而是定义了一个匿名函数，并将立即执行该函数的结果赋给数组。 这个匿名函数有一个参数 num ,也就是最终函数要返回的值。\n\n在调用每个匿名函数时，我们传入了变量 i， **函数参数是按值传递的**，所以就会将变量 i 的当前值复制给 参数 num, 而在这个匿名函数的**内部**，又创建并返回了一个访问 num 的**闭包**。这样， result 数组中的**每个函数**都有自己 num 变量的一个**副本**，因此就可以返回各自不同的数值了。\n\n\n### 闭包中的 this\n\n- this 对象是在运行时基于函数的执行环境绑定的。\n- 全局函数中， this === window, 当函数被当作某个对象的方法调用时候， this 等于那个对象。\n- 匿名函数的执行环境具有全局性，因此其 this 对像，通常指向  window 。但由于编写闭包的方式不同，这一点可能不会那么明显。 如下：\n\n```\nvar name = \"The Window\";\n\nvar object = {\n    name: \"My Object\",\n\n    getNameFunc: function(){\n        return function(){\n          return this.name;\n        };\n    }\n};\n\nalert(object.getNameFunc()()); // \"The Window\" 在非严格模式\n```\n- 调用 object.getNameFunc()() 会立即调用它返回的函数，结果就是返回一个字符串。 （ The Window ／ 全局 name 变量的值 )\n\n- **为什么匿名函数没有取得其外部作用域的 this ?**\n\n- 每个函数在被**调用**的时候都会**自动取得**两个特殊\n变量： **arguments 和 this**。\n\n- 内部函数在搜索这两个变量时，只会搜索到**其活动对象为止**，因此永远不可能直接访问到外部函数中的这两个变量。\n\n- 不过，如果把外部作用域中的 this 对象保存在一个闭包能够访问到的变量中，就可以让闭包访问该对象了。\n\n```\nvar name = \"The Window\";\n\nvar object = {\n    name: \"My Object\",\n\n    getNameFunc: function(){\n        var that = this;\n\n        return function(){\n          return that.name;\n        };\n    }\n};\n\nalert(object.getNameFunc()()); // \"My Object\"\n```\n\n我们将  this 对象赋值给了一个名叫 that 的变量。所以在定义了闭包之后，闭包也可以访问这个变量。即使在函数返回了之后，that 也仍然引用着 object ，所以调用 object.getNameFunc()()就返回了 My Object.\n\n\n- 在几种特殊的情况下，this 的值可能会意外地改变。 比如：\n\n```\nvar name = \"The Window\";\n\nvar object = {\n    name: \"My Object\",\n\n    getName: function(){\n\n        return this.name;\n\n    }\n};\n\n```\n这里的 getName() 方法只简单地返回 this.name 的值。 以下是几种调用  object.getName() 的方式及各自的结果。\n\n```\nobject.getName(); // My Object\n\n(object.getName)(); // My Object\n\n(object.getName = object.getName)(); // \"The Window\" 严格模式\n\n```\n- 第一个：this.name 就是 object.name\n- 第二个：(object.name) 和 object.name 定义相同， 所以依旧返回 My Object\n- 第三个：代码先执行了一条赋值语句，然后再调用赋值后的结果。因为这个赋值表达式的值是函数本身，所以 this 的值不可能得到维持，所以返回 \"The Window\"\n\n### 闭包中的 内存泄漏\n\n如果闭包的作用域链中保存着一个 HTML 元素，那么就意味着该元素将无法被销毁。\n\n\n\n{% blockquote %}\n\n参考：\n\nJavaScript 高级程序设计\n\n[Javascript闭包——懂不懂由你，反正我是懂了](http://www.cnblogs.com/frankfang/archive/2011/08/03/2125663.html)\n\n[什么是闭包，我的理解](http://www.cnblogs.com/mzwr1982/archive/2012/05/20/2509295.html)\n\n[什么是闭包，我的理解](http://www.cnblogs.com/xiaotie/archive/2011/08/03/2126145.html)\n\n[js中的闭包之我理解](http://www.cnblogs.com/mzwr1982/archive/2012/05/20/2509295.html)\n\n[如何通俗易懂的解释javascript里面的‘闭包’？](https://www.zhihu.com/question/34547104)\n\n[高效使用 JavaScript 闭包](http://www.ibm.com/developerworks/cn/web/wa-use-javascript-closures-efficiently/index.html)\n\n{% endblockquote %}\n","source":"_posts/closure.md","raw":"---\ntitle: 闭包\ncategories:\n- 编程\ntags:\n- 抄抄抄\n- JS 基础\nauto_spacing: true\n---\n\n\n### 基础知识\n\n - 闭包是指有权访问另一个函数作用域中的变量的函数。\n\n - 创建闭包的常见方式：在 一个函数内部创建另一个函数\n\n```\nfunction createComparisonFunction(propertyName) {\n    return function(obj1, obj2) {\n        var v1 = obj1[propertyName]; // 这里两行访问了外部函数的变量\n        var v2 = obj2[propertyName]; // 这里两行访问了外部函数的变量\n\n        if(v1 < v2) {\n            return -1;\n        } else if (v1 > v2) {\n            return 1;\n        } else {\n            return 0;\n        }\n    };\n}\n\n```\n<!-- more -->\n如上面例子，内部函数访问了外部函数的变量，即使这个内部函数被返回了，在其他地方被调用了，依旧能访问外部变量 propertyName。\n\n - 为什么呢？\n\n   简单的说是因为内部函数的**作用域链**中包含了外部函数 createComparisonFunction 的作用域。\n\n\n#### 作用域链：\n\n  - 本质上是一个指向变量对象的指针列表。\n\n  - 当某个函数被调用的时候，会创建一个执行环境( execution context )及相应的作用域链。\n\n  - 然后，使用 arguments 和其他命名参数的值来初始化函数的活动对象( activation object )。\n\n  - 在作用域链中，外部函数的活动对象始终处于第二位，外部函数的外部函数的活动对象处于第三位。。。。直至作用域链终点的全局执行环境。\n  - 无论在什么时候函数访问一个变量的时候，就会从作用域链中搜索具有相应名字的变量。\n\n\n __为了了解调用函数后都发生了什么我们先从一个简单的例子下手：__\n\n```\nfunction compare(v1, v2) {\n    if(v1 < v2) {\n        return -1;\n    } else if (v1 > v2) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nvar result = compare(5, 10);\n\n```\n\n当调用 compare() 时，会创建一个包含 arguments, v1, v2 的**活动对象**。 全局执行环境的变量对象（包含 compare() 和 result）在 compare() 执行环境的作用域链中处于第二位。\n\n\n**每个执行环境都有一个表示变量的对象 -- 变量对象**。全局执行环境的变量对象始终存在，而像 compare（） 函数这样的局部环境的变量对象，只在函数**执行过程**中存在。\n\n - 在**创建** compare() 函数时，会创建一个**预先**包含**全局变量对象**的作用域链，这个作用域链被保存在 内部的 **[[Scope]]** 属性中。\n\n - 当调用 compare() 时，会为函数创建一个执行环境，然后通过**复制 [[Scope]]** 属性中的对象**构建**起执行环境的**作用域链**。\n\n - 然后，又有一个**活动对象**（函数的变量对象）被创建并被**推入**执行环境作用域的前端。\n\n在上面的例子中，compare() 执行环境的作用域中包含两个变量对象：本地活动对象和全局变量对象。\n\n无论在什么时候函数访问一个变量的时候，就会从作用域链中搜索具有相应名字的变量。\n\n##### 当函数执行完后，局部的活动对象就会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）。  但是，闭包不同。\n\n\n在一个函数内部定义的函数将会包含（外部函数）的活动对象添加道它的作用域链中。 因此在第一个例子中，如下：\n\n```\nfunction createComparisonFunction(propertyName) {\n    return function(obj1, obj2) {\n        var v1 = obj1[propertyName]; // 这里两行访问了外部函数的变量\n        var v2 = obj2[propertyName]; // 这里两行访问了外部函数的变量\n\n        if(v1 < v2) {\n            return -1;\n        } else if (v1 > v2) {\n            return 1;\n        } else {\n            return 0;\n        }\n    };\n}\n\n```\n\n在 createComparisonFunction() **内部定义**的**匿名函数**的作用域链中，实际上将会包含外部函数 createComparisonFunction() 的活动对象。\n\n在匿名函数从createComparisonFunction() 中返回后，它的作用域链被初始化为 **包含 createComparisonFunction() 函数的活动对象和全局变量对象**。\n\n这样匿名函数就可以访问在 在匿名函数从createComparisonFunction 中定义的变量了。\n\n更重要的是 createComparisonFunction 函数在执行完后，其活动对象也不会被销毁，因为\n匿名函数的作用域链仍然在引用这个活动对象。（也就是说，当createComparisonFunction 函数返回后，其执行环境的作用域链会被销毁，**==但他的活动对象留在了内存中==**，直到匿名函数被销毁。\n\n例如：\n```\n// 创建函数\nvar compareName = createComparisonFunction(\"name\");\n\n// 调用函数\nvar result = compareName({name:\"Nicholas\"}, {name: \"Greg\"});\n\n// 解除对匿名函数的引用 (以便释放内存)\ncompareName = null\n```\n**通过将 compareName = null 解除该函数的引用**，就等于通知垃圾回收例程将其清除。\n\n\n### 闭包与变量\n\n**作用域链这种机制引出一个值得注意的副作用： 闭包只能取得包含函数中任何变量的 **最后一个值**。 如下：\n\n```\nfunction createFunctions(){\n    var result = new Array();\n\n    for(var i =0; i<10; i++) {\n        result[i] = function(){\n            return i;\n        };\n    }\n\n    return result;\n}\n```\n\n这个函数会返回一个函数数组。\n\n表面上看应该返回的数组类似于 [0,1,2,3 ....] 这个样子的，但是实际上返回的是 **[10, 10, 10, 10 ...]** 这个样子的。\n\n因为**每个函数**的作用域链上都保存着createFunctions 函数的**活动对象**，所以他们都引用的是**同一个变量 i**。 当createFunctions 函数**返回**后， 变量 i 的值是 10。\n\n但是， 我们可以通过创建另一个匿名函数强制让闭包的行为符合预期。如下：\n\n```\nfunction createFunctions(){\n    var result = new Array();\n\n    for(var i =0; i<10; i++) {\n        result[i] = (function(num){\n            return function(){\n                return num;\n            };\n        })(i);\n    }\n\n    return result;\n}\n```\n\n这样，每个函数就会返回各自不同的索引值了。\n\n在这个版本中，我们没有直接把闭包赋给数组，而是定义了一个匿名函数，并将立即执行该函数的结果赋给数组。 这个匿名函数有一个参数 num ,也就是最终函数要返回的值。\n\n在调用每个匿名函数时，我们传入了变量 i， **函数参数是按值传递的**，所以就会将变量 i 的当前值复制给 参数 num, 而在这个匿名函数的**内部**，又创建并返回了一个访问 num 的**闭包**。这样， result 数组中的**每个函数**都有自己 num 变量的一个**副本**，因此就可以返回各自不同的数值了。\n\n\n### 闭包中的 this\n\n- this 对象是在运行时基于函数的执行环境绑定的。\n- 全局函数中， this === window, 当函数被当作某个对象的方法调用时候， this 等于那个对象。\n- 匿名函数的执行环境具有全局性，因此其 this 对像，通常指向  window 。但由于编写闭包的方式不同，这一点可能不会那么明显。 如下：\n\n```\nvar name = \"The Window\";\n\nvar object = {\n    name: \"My Object\",\n\n    getNameFunc: function(){\n        return function(){\n          return this.name;\n        };\n    }\n};\n\nalert(object.getNameFunc()()); // \"The Window\" 在非严格模式\n```\n- 调用 object.getNameFunc()() 会立即调用它返回的函数，结果就是返回一个字符串。 （ The Window ／ 全局 name 变量的值 )\n\n- **为什么匿名函数没有取得其外部作用域的 this ?**\n\n- 每个函数在被**调用**的时候都会**自动取得**两个特殊\n变量： **arguments 和 this**。\n\n- 内部函数在搜索这两个变量时，只会搜索到**其活动对象为止**，因此永远不可能直接访问到外部函数中的这两个变量。\n\n- 不过，如果把外部作用域中的 this 对象保存在一个闭包能够访问到的变量中，就可以让闭包访问该对象了。\n\n```\nvar name = \"The Window\";\n\nvar object = {\n    name: \"My Object\",\n\n    getNameFunc: function(){\n        var that = this;\n\n        return function(){\n          return that.name;\n        };\n    }\n};\n\nalert(object.getNameFunc()()); // \"My Object\"\n```\n\n我们将  this 对象赋值给了一个名叫 that 的变量。所以在定义了闭包之后，闭包也可以访问这个变量。即使在函数返回了之后，that 也仍然引用着 object ，所以调用 object.getNameFunc()()就返回了 My Object.\n\n\n- 在几种特殊的情况下，this 的值可能会意外地改变。 比如：\n\n```\nvar name = \"The Window\";\n\nvar object = {\n    name: \"My Object\",\n\n    getName: function(){\n\n        return this.name;\n\n    }\n};\n\n```\n这里的 getName() 方法只简单地返回 this.name 的值。 以下是几种调用  object.getName() 的方式及各自的结果。\n\n```\nobject.getName(); // My Object\n\n(object.getName)(); // My Object\n\n(object.getName = object.getName)(); // \"The Window\" 严格模式\n\n```\n- 第一个：this.name 就是 object.name\n- 第二个：(object.name) 和 object.name 定义相同， 所以依旧返回 My Object\n- 第三个：代码先执行了一条赋值语句，然后再调用赋值后的结果。因为这个赋值表达式的值是函数本身，所以 this 的值不可能得到维持，所以返回 \"The Window\"\n\n### 闭包中的 内存泄漏\n\n如果闭包的作用域链中保存着一个 HTML 元素，那么就意味着该元素将无法被销毁。\n\n\n\n{% blockquote %}\n\n参考：\n\nJavaScript 高级程序设计\n\n[Javascript闭包——懂不懂由你，反正我是懂了](http://www.cnblogs.com/frankfang/archive/2011/08/03/2125663.html)\n\n[什么是闭包，我的理解](http://www.cnblogs.com/mzwr1982/archive/2012/05/20/2509295.html)\n\n[什么是闭包，我的理解](http://www.cnblogs.com/xiaotie/archive/2011/08/03/2126145.html)\n\n[js中的闭包之我理解](http://www.cnblogs.com/mzwr1982/archive/2012/05/20/2509295.html)\n\n[如何通俗易懂的解释javascript里面的‘闭包’？](https://www.zhihu.com/question/34547104)\n\n[高效使用 JavaScript 闭包](http://www.ibm.com/developerworks/cn/web/wa-use-javascript-closures-efficiently/index.html)\n\n{% endblockquote %}\n","slug":"closure","published":1,"date":"2016-12-05T06:17:38.000Z","updated":"2016-12-10T06:49:51.000Z","_id":"ciwfxj944000b8mraewjwm2tj","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h3><ul>\n<li><p>闭包是指有权访问另一个函数作用域中的变量的函数。</p>\n</li>\n<li><p>创建闭包的常见方式：在 一个函数内部创建另一个函数</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function createComparisonFunction(propertyName) &#123;</div><div class=\"line\">    return function(obj1, obj2) &#123;</div><div class=\"line\">        var v1 = obj1[propertyName]; // 这里两行访问了外部函数的变量</div><div class=\"line\">        var v2 = obj2[propertyName]; // 这里两行访问了外部函数的变量</div><div class=\"line\"></div><div class=\"line\">        if(v1 &lt; v2) &#123;</div><div class=\"line\">            return -1;</div><div class=\"line\">        &#125; else if (v1 &gt; v2) &#123;</div><div class=\"line\">            return 1;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            return 0;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>如上面例子，内部函数访问了外部函数的变量，即使这个内部函数被返回了，在其他地方被调用了，依旧能访问外部变量 propertyName。</p>\n<ul>\n<li><p>为什么呢？</p>\n<p>简单的说是因为内部函数的<strong>作用域链</strong>中包含了外部函数 createComparisonFunction 的作用域。</p>\n</li>\n</ul>\n<h4 id=\"作用域链：\"><a href=\"#作用域链：\" class=\"headerlink\" title=\"作用域链：\"></a>作用域链：</h4><ul>\n<li><p>本质上是一个指向变量对象的指针列表。</p>\n</li>\n<li><p>当某个函数被调用的时候，会创建一个执行环境( execution context )及相应的作用域链。</p>\n</li>\n<li><p>然后，使用 arguments 和其他命名参数的值来初始化函数的活动对象( activation object )。</p>\n</li>\n<li><p>在作用域链中，外部函数的活动对象始终处于第二位，外部函数的外部函数的活动对象处于第三位。。。。直至作用域链终点的全局执行环境。</p>\n</li>\n<li>无论在什么时候函数访问一个变量的时候，就会从作用域链中搜索具有相应名字的变量。</li>\n</ul>\n<p> <strong>为了了解调用函数后都发生了什么我们先从一个简单的例子下手：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function compare(v1, v2) &#123;</div><div class=\"line\">    if(v1 &lt; v2) &#123;</div><div class=\"line\">        return -1;</div><div class=\"line\">    &#125; else if (v1 &gt; v2) &#123;</div><div class=\"line\">        return 1;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        return 0;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var result = compare(5, 10);</div></pre></td></tr></table></figure>\n<p>当调用 compare() 时，会创建一个包含 arguments, v1, v2 的<strong>活动对象</strong>。 全局执行环境的变量对象（包含 compare() 和 result）在 compare() 执行环境的作用域链中处于第二位。</p>\n<p><strong>每个执行环境都有一个表示变量的对象 – 变量对象</strong>。全局执行环境的变量对象始终存在，而像 compare（） 函数这样的局部环境的变量对象，只在函数<strong>执行过程</strong>中存在。</p>\n<ul>\n<li><p>在<strong>创建</strong> compare() 函数时，会创建一个<strong>预先</strong>包含<strong>全局变量对象</strong>的作用域链，这个作用域链被保存在 内部的 <strong>[[Scope]]</strong> 属性中。</p>\n</li>\n<li><p>当调用 compare() 时，会为函数创建一个执行环境，然后通过<strong>复制 [[Scope]]</strong> 属性中的对象<strong>构建</strong>起执行环境的<strong>作用域链</strong>。</p>\n</li>\n<li><p>然后，又有一个<strong>活动对象</strong>（函数的变量对象）被创建并被<strong>推入</strong>执行环境作用域的前端。</p>\n</li>\n</ul>\n<p>在上面的例子中，compare() 执行环境的作用域中包含两个变量对象：本地活动对象和全局变量对象。</p>\n<p>无论在什么时候函数访问一个变量的时候，就会从作用域链中搜索具有相应名字的变量。</p>\n<h5 id=\"当函数执行完后，局部的活动对象就会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）。-但是，闭包不同。\"><a href=\"#当函数执行完后，局部的活动对象就会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）。-但是，闭包不同。\" class=\"headerlink\" title=\"当函数执行完后，局部的活动对象就会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）。  但是，闭包不同。\"></a>当函数执行完后，局部的活动对象就会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）。  但是，闭包不同。</h5><p>在一个函数内部定义的函数将会包含（外部函数）的活动对象添加道它的作用域链中。 因此在第一个例子中，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function createComparisonFunction(propertyName) &#123;</div><div class=\"line\">    return function(obj1, obj2) &#123;</div><div class=\"line\">        var v1 = obj1[propertyName]; // 这里两行访问了外部函数的变量</div><div class=\"line\">        var v2 = obj2[propertyName]; // 这里两行访问了外部函数的变量</div><div class=\"line\"></div><div class=\"line\">        if(v1 &lt; v2) &#123;</div><div class=\"line\">            return -1;</div><div class=\"line\">        &#125; else if (v1 &gt; v2) &#123;</div><div class=\"line\">            return 1;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            return 0;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在 createComparisonFunction() <strong>内部定义</strong>的<strong>匿名函数</strong>的作用域链中，实际上将会包含外部函数 createComparisonFunction() 的活动对象。</p>\n<p>在匿名函数从createComparisonFunction() 中返回后，它的作用域链被初始化为 <strong>包含 createComparisonFunction() 函数的活动对象和全局变量对象</strong>。</p>\n<p>这样匿名函数就可以访问在 在匿名函数从createComparisonFunction 中定义的变量了。</p>\n<p>更重要的是 createComparisonFunction 函数在执行完后，其活动对象也不会被销毁，因为<br>匿名函数的作用域链仍然在引用这个活动对象。（也就是说，当createComparisonFunction 函数返回后，其执行环境的作用域链会被销毁，<strong>==但他的活动对象留在了内存中==</strong>，直到匿名函数被销毁。</p>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 创建函数</div><div class=\"line\">var compareName = createComparisonFunction(&quot;name&quot;);</div><div class=\"line\"></div><div class=\"line\">// 调用函数</div><div class=\"line\">var result = compareName(&#123;name:&quot;Nicholas&quot;&#125;, &#123;name: &quot;Greg&quot;&#125;);</div><div class=\"line\"></div><div class=\"line\">// 解除对匿名函数的引用 (以便释放内存)</div><div class=\"line\">compareName = null</div></pre></td></tr></table></figure></p>\n<p><strong>通过将 compareName = null 解除该函数的引用</strong>，就等于通知垃圾回收例程将其清除。</p>\n<h3 id=\"闭包与变量\"><a href=\"#闭包与变量\" class=\"headerlink\" title=\"闭包与变量\"></a>闭包与变量</h3><p><strong>作用域链这种机制引出一个值得注意的副作用： 闭包只能取得包含函数中任何变量的 </strong>最后一个值**。 如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function createFunctions()&#123;</div><div class=\"line\">    var result = new Array();</div><div class=\"line\"></div><div class=\"line\">    for(var i =0; i&lt;10; i++) &#123;</div><div class=\"line\">        result[i] = function()&#123;</div><div class=\"line\">            return i;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个函数会返回一个函数数组。</p>\n<p>表面上看应该返回的数组类似于 [0,1,2,3 ….] 这个样子的，但是实际上返回的是 <strong>[10, 10, 10, 10 …]</strong> 这个样子的。</p>\n<p>因为<strong>每个函数</strong>的作用域链上都保存着createFunctions 函数的<strong>活动对象</strong>，所以他们都引用的是<strong>同一个变量 i</strong>。 当createFunctions 函数<strong>返回</strong>后， 变量 i 的值是 10。</p>\n<p>但是， 我们可以通过创建另一个匿名函数强制让闭包的行为符合预期。如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">function createFunctions()&#123;</div><div class=\"line\">    var result = new Array();</div><div class=\"line\"></div><div class=\"line\">    for(var i =0; i&lt;10; i++) &#123;</div><div class=\"line\">        result[i] = (function(num)&#123;</div><div class=\"line\">            return function()&#123;</div><div class=\"line\">                return num;</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;)(i);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样，每个函数就会返回各自不同的索引值了。</p>\n<p>在这个版本中，我们没有直接把闭包赋给数组，而是定义了一个匿名函数，并将立即执行该函数的结果赋给数组。 这个匿名函数有一个参数 num ,也就是最终函数要返回的值。</p>\n<p>在调用每个匿名函数时，我们传入了变量 i， <strong>函数参数是按值传递的</strong>，所以就会将变量 i 的当前值复制给 参数 num, 而在这个匿名函数的<strong>内部</strong>，又创建并返回了一个访问 num 的<strong>闭包</strong>。这样， result 数组中的<strong>每个函数</strong>都有自己 num 变量的一个<strong>副本</strong>，因此就可以返回各自不同的数值了。</p>\n<h3 id=\"闭包中的-this\"><a href=\"#闭包中的-this\" class=\"headerlink\" title=\"闭包中的 this\"></a>闭包中的 this</h3><ul>\n<li>this 对象是在运行时基于函数的执行环境绑定的。</li>\n<li>全局函数中， this === window, 当函数被当作某个对象的方法调用时候， this 等于那个对象。</li>\n<li>匿名函数的执行环境具有全局性，因此其 this 对像，通常指向  window 。但由于编写闭包的方式不同，这一点可能不会那么明显。 如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name = &quot;The Window&quot;;</div><div class=\"line\"></div><div class=\"line\">var object = &#123;</div><div class=\"line\">    name: &quot;My Object&quot;,</div><div class=\"line\"></div><div class=\"line\">    getNameFunc: function()&#123;</div><div class=\"line\">        return function()&#123;</div><div class=\"line\">          return this.name;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">alert(object.getNameFunc()()); // &quot;The Window&quot; 在非严格模式</div></pre></td></tr></table></figure>\n<ul>\n<li><p>调用 object.getNameFunc()() 会立即调用它返回的函数，结果就是返回一个字符串。 （ The Window ／ 全局 name 变量的值 )</p>\n</li>\n<li><p><strong>为什么匿名函数没有取得其外部作用域的 this ?</strong></p>\n</li>\n<li><p>每个函数在被<strong>调用</strong>的时候都会<strong>自动取得</strong>两个特殊<br>变量： <strong>arguments 和 this</strong>。</p>\n</li>\n<li><p>内部函数在搜索这两个变量时，只会搜索到<strong>其活动对象为止</strong>，因此永远不可能直接访问到外部函数中的这两个变量。</p>\n</li>\n<li><p>不过，如果把外部作用域中的 this 对象保存在一个闭包能够访问到的变量中，就可以让闭包访问该对象了。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name = &quot;The Window&quot;;</div><div class=\"line\"></div><div class=\"line\">var object = &#123;</div><div class=\"line\">    name: &quot;My Object&quot;,</div><div class=\"line\"></div><div class=\"line\">    getNameFunc: function()&#123;</div><div class=\"line\">        var that = this;</div><div class=\"line\"></div><div class=\"line\">        return function()&#123;</div><div class=\"line\">          return that.name;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">alert(object.getNameFunc()()); // &quot;My Object&quot;</div></pre></td></tr></table></figure>\n<p>我们将  this 对象赋值给了一个名叫 that 的变量。所以在定义了闭包之后，闭包也可以访问这个变量。即使在函数返回了之后，that 也仍然引用着 object ，所以调用 object.getNameFunc()()就返回了 My Object.</p>\n<ul>\n<li>在几种特殊的情况下，this 的值可能会意外地改变。 比如：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name = &quot;The Window&quot;;</div><div class=\"line\"></div><div class=\"line\">var object = &#123;</div><div class=\"line\">    name: &quot;My Object&quot;,</div><div class=\"line\"></div><div class=\"line\">    getName: function()&#123;</div><div class=\"line\"></div><div class=\"line\">        return this.name;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>这里的 getName() 方法只简单地返回 this.name 的值。 以下是几种调用  object.getName() 的方式及各自的结果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">object.getName(); // My Object</div><div class=\"line\"></div><div class=\"line\">(object.getName)(); // My Object</div><div class=\"line\"></div><div class=\"line\">(object.getName = object.getName)(); // &quot;The Window&quot; 严格模式</div></pre></td></tr></table></figure>\n<ul>\n<li>第一个：this.name 就是 object.name</li>\n<li>第二个：(object.name) 和 object.name 定义相同， 所以依旧返回 My Object</li>\n<li>第三个：代码先执行了一条赋值语句，然后再调用赋值后的结果。因为这个赋值表达式的值是函数本身，所以 this 的值不可能得到维持，所以返回 “The Window”</li>\n</ul>\n<h3 id=\"闭包中的-内存泄漏\"><a href=\"#闭包中的-内存泄漏\" class=\"headerlink\" title=\"闭包中的 内存泄漏\"></a>闭包中的 内存泄漏</h3><p>如果闭包的作用域链中保存着一个 HTML 元素，那么就意味着该元素将无法被销毁。</p>\n<blockquote><p>参考：</p>\n<p>JavaScript 高级程序设计</p>\n<p><a href=\"http://www.cnblogs.com/frankfang/archive/2011/08/03/2125663.html\" target=\"_blank\" rel=\"external\">Javascript闭包——懂不懂由你，反正我是懂了</a></p>\n<p><a href=\"http://www.cnblogs.com/mzwr1982/archive/2012/05/20/2509295.html\" target=\"_blank\" rel=\"external\">什么是闭包，我的理解</a></p>\n<p><a href=\"http://www.cnblogs.com/xiaotie/archive/2011/08/03/2126145.html\" target=\"_blank\" rel=\"external\">什么是闭包，我的理解</a></p>\n<p><a href=\"http://www.cnblogs.com/mzwr1982/archive/2012/05/20/2509295.html\" target=\"_blank\" rel=\"external\">js中的闭包之我理解</a></p>\n<p><a href=\"https://www.zhihu.com/question/34547104\" target=\"_blank\" rel=\"external\">如何通俗易懂的解释javascript里面的‘闭包’？</a></p>\n<p><a href=\"http://www.ibm.com/developerworks/cn/web/wa-use-javascript-closures-efficiently/index.html\" target=\"_blank\" rel=\"external\">高效使用 JavaScript 闭包</a></p>\n</blockquote>\n","excerpt":"<h3 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h3><ul>\n<li><p>闭包是指有权访问另一个函数作用域中的变量的函数。</p>\n</li>\n<li><p>创建闭包的常见方式：在 一个函数内部创建另一个函数</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function createComparisonFunction(propertyName) &#123;</div><div class=\"line\">    return function(obj1, obj2) &#123;</div><div class=\"line\">        var v1 = obj1[propertyName]; // 这里两行访问了外部函数的变量</div><div class=\"line\">        var v2 = obj2[propertyName]; // 这里两行访问了外部函数的变量</div><div class=\"line\"></div><div class=\"line\">        if(v1 &lt; v2) &#123;</div><div class=\"line\">            return -1;</div><div class=\"line\">        &#125; else if (v1 &gt; v2) &#123;</div><div class=\"line\">            return 1;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            return 0;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<p>如上面例子，内部函数访问了外部函数的变量，即使这个内部函数被返回了，在其他地方被调用了，依旧能访问外部变量 propertyName。</p>\n<ul>\n<li><p>为什么呢？</p>\n<p>简单的说是因为内部函数的<strong>作用域链</strong>中包含了外部函数 createComparisonFunction 的作用域。</p>\n</li>\n</ul>\n<h4 id=\"作用域链：\"><a href=\"#作用域链：\" class=\"headerlink\" title=\"作用域链：\"></a>作用域链：</h4><ul>\n<li><p>本质上是一个指向变量对象的指针列表。</p>\n</li>\n<li><p>当某个函数被调用的时候，会创建一个执行环境( execution context )及相应的作用域链。</p>\n</li>\n<li><p>然后，使用 arguments 和其他命名参数的值来初始化函数的活动对象( activation object )。</p>\n</li>\n<li><p>在作用域链中，外部函数的活动对象始终处于第二位，外部函数的外部函数的活动对象处于第三位。。。。直至作用域链终点的全局执行环境。</p>\n</li>\n<li>无论在什么时候函数访问一个变量的时候，就会从作用域链中搜索具有相应名字的变量。</li>\n</ul>\n<p> <strong>为了了解调用函数后都发生了什么我们先从一个简单的例子下手：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function compare(v1, v2) &#123;</div><div class=\"line\">    if(v1 &lt; v2) &#123;</div><div class=\"line\">        return -1;</div><div class=\"line\">    &#125; else if (v1 &gt; v2) &#123;</div><div class=\"line\">        return 1;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        return 0;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var result = compare(5, 10);</div></pre></td></tr></table></figure>\n<p>当调用 compare() 时，会创建一个包含 arguments, v1, v2 的<strong>活动对象</strong>。 全局执行环境的变量对象（包含 compare() 和 result）在 compare() 执行环境的作用域链中处于第二位。</p>\n<p><strong>每个执行环境都有一个表示变量的对象 – 变量对象</strong>。全局执行环境的变量对象始终存在，而像 compare（） 函数这样的局部环境的变量对象，只在函数<strong>执行过程</strong>中存在。</p>\n<ul>\n<li><p>在<strong>创建</strong> compare() 函数时，会创建一个<strong>预先</strong>包含<strong>全局变量对象</strong>的作用域链，这个作用域链被保存在 内部的 <strong>[[Scope]]</strong> 属性中。</p>\n</li>\n<li><p>当调用 compare() 时，会为函数创建一个执行环境，然后通过<strong>复制 [[Scope]]</strong> 属性中的对象<strong>构建</strong>起执行环境的<strong>作用域链</strong>。</p>\n</li>\n<li><p>然后，又有一个<strong>活动对象</strong>（函数的变量对象）被创建并被<strong>推入</strong>执行环境作用域的前端。</p>\n</li>\n</ul>\n<p>在上面的例子中，compare() 执行环境的作用域中包含两个变量对象：本地活动对象和全局变量对象。</p>\n<p>无论在什么时候函数访问一个变量的时候，就会从作用域链中搜索具有相应名字的变量。</p>\n<h5 id=\"当函数执行完后，局部的活动对象就会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）。-但是，闭包不同。\"><a href=\"#当函数执行完后，局部的活动对象就会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）。-但是，闭包不同。\" class=\"headerlink\" title=\"当函数执行完后，局部的活动对象就会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）。  但是，闭包不同。\"></a>当函数执行完后，局部的活动对象就会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）。  但是，闭包不同。</h5><p>在一个函数内部定义的函数将会包含（外部函数）的活动对象添加道它的作用域链中。 因此在第一个例子中，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function createComparisonFunction(propertyName) &#123;</div><div class=\"line\">    return function(obj1, obj2) &#123;</div><div class=\"line\">        var v1 = obj1[propertyName]; // 这里两行访问了外部函数的变量</div><div class=\"line\">        var v2 = obj2[propertyName]; // 这里两行访问了外部函数的变量</div><div class=\"line\"></div><div class=\"line\">        if(v1 &lt; v2) &#123;</div><div class=\"line\">            return -1;</div><div class=\"line\">        &#125; else if (v1 &gt; v2) &#123;</div><div class=\"line\">            return 1;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            return 0;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在 createComparisonFunction() <strong>内部定义</strong>的<strong>匿名函数</strong>的作用域链中，实际上将会包含外部函数 createComparisonFunction() 的活动对象。</p>\n<p>在匿名函数从createComparisonFunction() 中返回后，它的作用域链被初始化为 <strong>包含 createComparisonFunction() 函数的活动对象和全局变量对象</strong>。</p>\n<p>这样匿名函数就可以访问在 在匿名函数从createComparisonFunction 中定义的变量了。</p>\n<p>更重要的是 createComparisonFunction 函数在执行完后，其活动对象也不会被销毁，因为<br>匿名函数的作用域链仍然在引用这个活动对象。（也就是说，当createComparisonFunction 函数返回后，其执行环境的作用域链会被销毁，<strong>==但他的活动对象留在了内存中==</strong>，直到匿名函数被销毁。</p>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 创建函数</div><div class=\"line\">var compareName = createComparisonFunction(&quot;name&quot;);</div><div class=\"line\"></div><div class=\"line\">// 调用函数</div><div class=\"line\">var result = compareName(&#123;name:&quot;Nicholas&quot;&#125;, &#123;name: &quot;Greg&quot;&#125;);</div><div class=\"line\"></div><div class=\"line\">// 解除对匿名函数的引用 (以便释放内存)</div><div class=\"line\">compareName = null</div></pre></td></tr></table></figure></p>\n<p><strong>通过将 compareName = null 解除该函数的引用</strong>，就等于通知垃圾回收例程将其清除。</p>\n<h3 id=\"闭包与变量\"><a href=\"#闭包与变量\" class=\"headerlink\" title=\"闭包与变量\"></a>闭包与变量</h3><p><strong>作用域链这种机制引出一个值得注意的副作用： 闭包只能取得包含函数中任何变量的 </strong>最后一个值**。 如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function createFunctions()&#123;</div><div class=\"line\">    var result = new Array();</div><div class=\"line\"></div><div class=\"line\">    for(var i =0; i&lt;10; i++) &#123;</div><div class=\"line\">        result[i] = function()&#123;</div><div class=\"line\">            return i;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个函数会返回一个函数数组。</p>\n<p>表面上看应该返回的数组类似于 [0,1,2,3 ….] 这个样子的，但是实际上返回的是 <strong>[10, 10, 10, 10 …]</strong> 这个样子的。</p>\n<p>因为<strong>每个函数</strong>的作用域链上都保存着createFunctions 函数的<strong>活动对象</strong>，所以他们都引用的是<strong>同一个变量 i</strong>。 当createFunctions 函数<strong>返回</strong>后， 变量 i 的值是 10。</p>\n<p>但是， 我们可以通过创建另一个匿名函数强制让闭包的行为符合预期。如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">function createFunctions()&#123;</div><div class=\"line\">    var result = new Array();</div><div class=\"line\"></div><div class=\"line\">    for(var i =0; i&lt;10; i++) &#123;</div><div class=\"line\">        result[i] = (function(num)&#123;</div><div class=\"line\">            return function()&#123;</div><div class=\"line\">                return num;</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;)(i);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样，每个函数就会返回各自不同的索引值了。</p>\n<p>在这个版本中，我们没有直接把闭包赋给数组，而是定义了一个匿名函数，并将立即执行该函数的结果赋给数组。 这个匿名函数有一个参数 num ,也就是最终函数要返回的值。</p>\n<p>在调用每个匿名函数时，我们传入了变量 i， <strong>函数参数是按值传递的</strong>，所以就会将变量 i 的当前值复制给 参数 num, 而在这个匿名函数的<strong>内部</strong>，又创建并返回了一个访问 num 的<strong>闭包</strong>。这样， result 数组中的<strong>每个函数</strong>都有自己 num 变量的一个<strong>副本</strong>，因此就可以返回各自不同的数值了。</p>\n<h3 id=\"闭包中的-this\"><a href=\"#闭包中的-this\" class=\"headerlink\" title=\"闭包中的 this\"></a>闭包中的 this</h3><ul>\n<li>this 对象是在运行时基于函数的执行环境绑定的。</li>\n<li>全局函数中， this === window, 当函数被当作某个对象的方法调用时候， this 等于那个对象。</li>\n<li>匿名函数的执行环境具有全局性，因此其 this 对像，通常指向  window 。但由于编写闭包的方式不同，这一点可能不会那么明显。 如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name = &quot;The Window&quot;;</div><div class=\"line\"></div><div class=\"line\">var object = &#123;</div><div class=\"line\">    name: &quot;My Object&quot;,</div><div class=\"line\"></div><div class=\"line\">    getNameFunc: function()&#123;</div><div class=\"line\">        return function()&#123;</div><div class=\"line\">          return this.name;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">alert(object.getNameFunc()()); // &quot;The Window&quot; 在非严格模式</div></pre></td></tr></table></figure>\n<ul>\n<li><p>调用 object.getNameFunc()() 会立即调用它返回的函数，结果就是返回一个字符串。 （ The Window ／ 全局 name 变量的值 )</p>\n</li>\n<li><p><strong>为什么匿名函数没有取得其外部作用域的 this ?</strong></p>\n</li>\n<li><p>每个函数在被<strong>调用</strong>的时候都会<strong>自动取得</strong>两个特殊<br>变量： <strong>arguments 和 this</strong>。</p>\n</li>\n<li><p>内部函数在搜索这两个变量时，只会搜索到<strong>其活动对象为止</strong>，因此永远不可能直接访问到外部函数中的这两个变量。</p>\n</li>\n<li><p>不过，如果把外部作用域中的 this 对象保存在一个闭包能够访问到的变量中，就可以让闭包访问该对象了。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name = &quot;The Window&quot;;</div><div class=\"line\"></div><div class=\"line\">var object = &#123;</div><div class=\"line\">    name: &quot;My Object&quot;,</div><div class=\"line\"></div><div class=\"line\">    getNameFunc: function()&#123;</div><div class=\"line\">        var that = this;</div><div class=\"line\"></div><div class=\"line\">        return function()&#123;</div><div class=\"line\">          return that.name;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">alert(object.getNameFunc()()); // &quot;My Object&quot;</div></pre></td></tr></table></figure>\n<p>我们将  this 对象赋值给了一个名叫 that 的变量。所以在定义了闭包之后，闭包也可以访问这个变量。即使在函数返回了之后，that 也仍然引用着 object ，所以调用 object.getNameFunc()()就返回了 My Object.</p>\n<ul>\n<li>在几种特殊的情况下，this 的值可能会意外地改变。 比如：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name = &quot;The Window&quot;;</div><div class=\"line\"></div><div class=\"line\">var object = &#123;</div><div class=\"line\">    name: &quot;My Object&quot;,</div><div class=\"line\"></div><div class=\"line\">    getName: function()&#123;</div><div class=\"line\"></div><div class=\"line\">        return this.name;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>这里的 getName() 方法只简单地返回 this.name 的值。 以下是几种调用  object.getName() 的方式及各自的结果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">object.getName(); // My Object</div><div class=\"line\"></div><div class=\"line\">(object.getName)(); // My Object</div><div class=\"line\"></div><div class=\"line\">(object.getName = object.getName)(); // &quot;The Window&quot; 严格模式</div></pre></td></tr></table></figure>\n<ul>\n<li>第一个：this.name 就是 object.name</li>\n<li>第二个：(object.name) 和 object.name 定义相同， 所以依旧返回 My Object</li>\n<li>第三个：代码先执行了一条赋值语句，然后再调用赋值后的结果。因为这个赋值表达式的值是函数本身，所以 this 的值不可能得到维持，所以返回 “The Window”</li>\n</ul>\n<h3 id=\"闭包中的-内存泄漏\"><a href=\"#闭包中的-内存泄漏\" class=\"headerlink\" title=\"闭包中的 内存泄漏\"></a>闭包中的 内存泄漏</h3><p>如果闭包的作用域链中保存着一个 HTML 元素，那么就意味着该元素将无法被销毁。</p>\n<blockquote><p>参考：</p>\n<p>JavaScript 高级程序设计</p>\n<p><a href=\"http://www.cnblogs.com/frankfang/archive/2011/08/03/2125663.html\">Javascript闭包——懂不懂由你，反正我是懂了</a></p>\n<p><a href=\"http://www.cnblogs.com/mzwr1982/archive/2012/05/20/2509295.html\">什么是闭包，我的理解</a></p>\n<p><a href=\"http://www.cnblogs.com/xiaotie/archive/2011/08/03/2126145.html\">什么是闭包，我的理解</a></p>\n<p><a href=\"http://www.cnblogs.com/mzwr1982/archive/2012/05/20/2509295.html\">js中的闭包之我理解</a></p>\n<p><a href=\"https://www.zhihu.com/question/34547104\">如何通俗易懂的解释javascript里面的‘闭包’？</a></p>\n<p><a href=\"http://www.ibm.com/developerworks/cn/web/wa-use-javascript-closures-efficiently/index.html\">高效使用 JavaScript 闭包</a></p>\n</blockquote>"},{"title":"执行上下文","auto_spacing":true,"_content":"#### 基础知识\n\n- 定义了变量或函数有权访问的其他数据，决定了它们各自的行为。\n\n- 每个执行环境都有一个与之关联的 **变量对象**，执行环境紫红定义的所有变量和函数都保存在这个对象中。\n\n- 全局执行环境是最外围的一个执行环境。（在 Web 浏览器中，全局环境是 window 对象，所以所有全局变量和函数都是作为 window 对象的属性和方法创建的 ）\n\n<!-- more -->\n\n- 某个执行环境中所有的代码执行完成后，该环境被销毁，其中的所有变量，函数定义也被销毁。\n\n- 每个函数都有自己的**执行环境**。当执行流进入一个函数的时候，函数的环境就会被推入到一个**环境栈**中，在函数执行完成后，栈将其环境弹出，把控制权返回给之前的执行环境。\n\n- 当代码在一个环境中执行的时候，会创建**变量对象**的一个**作用域链**。 \n\n- 作用域链的**作用**是保证对执行环境有权访问的所有变量和函数的**有序访问**。\n\n- 作用域链的**前端**，始终都是**当前执行**的代码所在的环境变量对象。\n\n- 如果这个环境是**函数**，则将其**活动对象**作为**变量对象**。\n\n- **活动对象** 最开始只包含一个变量，arguments 对象。\n\n- 作用域链中的下一个变量对象来自包含（外部）环境，而在下一个变量对象则来自下一个包含对象，这样，一直延续道全局执行环境。（全局执行环境的变量始终是作用域链中的最后一个对象）\n\n- 标识符解析是沿着作用域链一级一级地搜索标志符的过程。\n\n- 每个环境都可以向上搜索作用域链，查询变量和函数名，但任何环境都不能通过向下搜索作用域链而静如另一个执行环境。\n\n\n#### 延长作用域链 \n\nNOTE:! 这里不是很懂\n\n- try-catch 语句的 catch \n- with 语句\n\n这些语句可以在作用域链的前端添加一个变量对象。\n\n{% blockquote %}\n\n参考链接：\n\n_JS高级程序设计 ( 第3版 )_\n\n{% endblockquote %}\n","source":"_posts/execution context.md","raw":"---\ntitle: 执行上下文\ncategories:\n- 编程\ntags:\n- 抄抄抄\n- JS 基础\nauto_spacing: true\n---\n#### 基础知识\n\n- 定义了变量或函数有权访问的其他数据，决定了它们各自的行为。\n\n- 每个执行环境都有一个与之关联的 **变量对象**，执行环境紫红定义的所有变量和函数都保存在这个对象中。\n\n- 全局执行环境是最外围的一个执行环境。（在 Web 浏览器中，全局环境是 window 对象，所以所有全局变量和函数都是作为 window 对象的属性和方法创建的 ）\n\n<!-- more -->\n\n- 某个执行环境中所有的代码执行完成后，该环境被销毁，其中的所有变量，函数定义也被销毁。\n\n- 每个函数都有自己的**执行环境**。当执行流进入一个函数的时候，函数的环境就会被推入到一个**环境栈**中，在函数执行完成后，栈将其环境弹出，把控制权返回给之前的执行环境。\n\n- 当代码在一个环境中执行的时候，会创建**变量对象**的一个**作用域链**。 \n\n- 作用域链的**作用**是保证对执行环境有权访问的所有变量和函数的**有序访问**。\n\n- 作用域链的**前端**，始终都是**当前执行**的代码所在的环境变量对象。\n\n- 如果这个环境是**函数**，则将其**活动对象**作为**变量对象**。\n\n- **活动对象** 最开始只包含一个变量，arguments 对象。\n\n- 作用域链中的下一个变量对象来自包含（外部）环境，而在下一个变量对象则来自下一个包含对象，这样，一直延续道全局执行环境。（全局执行环境的变量始终是作用域链中的最后一个对象）\n\n- 标识符解析是沿着作用域链一级一级地搜索标志符的过程。\n\n- 每个环境都可以向上搜索作用域链，查询变量和函数名，但任何环境都不能通过向下搜索作用域链而静如另一个执行环境。\n\n\n#### 延长作用域链 \n\nNOTE:! 这里不是很懂\n\n- try-catch 语句的 catch \n- with 语句\n\n这些语句可以在作用域链的前端添加一个变量对象。\n\n{% blockquote %}\n\n参考链接：\n\n_JS高级程序设计 ( 第3版 )_\n\n{% endblockquote %}\n","slug":"execution context","published":1,"date":"2016-12-05T06:31:38.000Z","updated":"2016-12-05T06:33:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwfxj94b000f8mrazqqvhman","content":"<h4 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h4><ul>\n<li><p>定义了变量或函数有权访问的其他数据，决定了它们各自的行为。</p>\n</li>\n<li><p>每个执行环境都有一个与之关联的 <strong>变量对象</strong>，执行环境紫红定义的所有变量和函数都保存在这个对象中。</p>\n</li>\n<li><p>全局执行环境是最外围的一个执行环境。（在 Web 浏览器中，全局环境是 window 对象，所以所有全局变量和函数都是作为 window 对象的属性和方法创建的 ）</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>某个执行环境中所有的代码执行完成后，该环境被销毁，其中的所有变量，函数定义也被销毁。</p>\n</li>\n<li><p>每个函数都有自己的<strong>执行环境</strong>。当执行流进入一个函数的时候，函数的环境就会被推入到一个<strong>环境栈</strong>中，在函数执行完成后，栈将其环境弹出，把控制权返回给之前的执行环境。</p>\n</li>\n<li><p>当代码在一个环境中执行的时候，会创建<strong>变量对象</strong>的一个<strong>作用域链</strong>。 </p>\n</li>\n<li><p>作用域链的<strong>作用</strong>是保证对执行环境有权访问的所有变量和函数的<strong>有序访问</strong>。</p>\n</li>\n<li><p>作用域链的<strong>前端</strong>，始终都是<strong>当前执行</strong>的代码所在的环境变量对象。</p>\n</li>\n<li><p>如果这个环境是<strong>函数</strong>，则将其<strong>活动对象</strong>作为<strong>变量对象</strong>。</p>\n</li>\n<li><p><strong>活动对象</strong> 最开始只包含一个变量，arguments 对象。</p>\n</li>\n<li><p>作用域链中的下一个变量对象来自包含（外部）环境，而在下一个变量对象则来自下一个包含对象，这样，一直延续道全局执行环境。（全局执行环境的变量始终是作用域链中的最后一个对象）</p>\n</li>\n<li><p>标识符解析是沿着作用域链一级一级地搜索标志符的过程。</p>\n</li>\n<li><p>每个环境都可以向上搜索作用域链，查询变量和函数名，但任何环境都不能通过向下搜索作用域链而静如另一个执行环境。</p>\n</li>\n</ul>\n<h4 id=\"延长作用域链\"><a href=\"#延长作用域链\" class=\"headerlink\" title=\"延长作用域链\"></a>延长作用域链</h4><p>NOTE:! 这里不是很懂</p>\n<ul>\n<li>try-catch 语句的 catch </li>\n<li>with 语句</li>\n</ul>\n<p>这些语句可以在作用域链的前端添加一个变量对象。</p>\n<blockquote><p>参考链接：</p>\n<p><em>JS高级程序设计 ( 第3版 )</em></p>\n</blockquote>\n","excerpt":"<h4 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h4><ul>\n<li><p>定义了变量或函数有权访问的其他数据，决定了它们各自的行为。</p>\n</li>\n<li><p>每个执行环境都有一个与之关联的 <strong>变量对象</strong>，执行环境紫红定义的所有变量和函数都保存在这个对象中。</p>\n</li>\n<li><p>全局执行环境是最外围的一个执行环境。（在 Web 浏览器中，全局环境是 window 对象，所以所有全局变量和函数都是作为 window 对象的属性和方法创建的 ）</p>\n</li>\n</ul>","more":"<ul>\n<li><p>某个执行环境中所有的代码执行完成后，该环境被销毁，其中的所有变量，函数定义也被销毁。</p>\n</li>\n<li><p>每个函数都有自己的<strong>执行环境</strong>。当执行流进入一个函数的时候，函数的环境就会被推入到一个<strong>环境栈</strong>中，在函数执行完成后，栈将其环境弹出，把控制权返回给之前的执行环境。</p>\n</li>\n<li><p>当代码在一个环境中执行的时候，会创建<strong>变量对象</strong>的一个<strong>作用域链</strong>。 </p>\n</li>\n<li><p>作用域链的<strong>作用</strong>是保证对执行环境有权访问的所有变量和函数的<strong>有序访问</strong>。</p>\n</li>\n<li><p>作用域链的<strong>前端</strong>，始终都是<strong>当前执行</strong>的代码所在的环境变量对象。</p>\n</li>\n<li><p>如果这个环境是<strong>函数</strong>，则将其<strong>活动对象</strong>作为<strong>变量对象</strong>。</p>\n</li>\n<li><p><strong>活动对象</strong> 最开始只包含一个变量，arguments 对象。</p>\n</li>\n<li><p>作用域链中的下一个变量对象来自包含（外部）环境，而在下一个变量对象则来自下一个包含对象，这样，一直延续道全局执行环境。（全局执行环境的变量始终是作用域链中的最后一个对象）</p>\n</li>\n<li><p>标识符解析是沿着作用域链一级一级地搜索标志符的过程。</p>\n</li>\n<li><p>每个环境都可以向上搜索作用域链，查询变量和函数名，但任何环境都不能通过向下搜索作用域链而静如另一个执行环境。</p>\n</li>\n</ul>\n<h4 id=\"延长作用域链\"><a href=\"#延长作用域链\" class=\"headerlink\" title=\"延长作用域链\"></a>延长作用域链</h4><p>NOTE:! 这里不是很懂</p>\n<ul>\n<li>try-catch 语句的 catch </li>\n<li>with 语句</li>\n</ul>\n<p>这些语句可以在作用域链的前端添加一个变量对象。</p>\n<blockquote><p>参考链接：</p>\n<p><em>JS高级程序设计 ( 第3版 )</em></p>\n</blockquote>"},{"title":"应该有个开篇的","date":"2016-11-30T16:00:00.000Z","auto_spacing":true,"_content":"\n突然想起来应该有个开篇的，于是有了这篇～\n\n我一直想找个地方把一些东西记下来，一来是填补自己记忆力上的不足( 我是我们家最笨的了 )，二来是培养自己的总结能力。\n\n<!-- more -->\n\n之前有需要记得都是写在本子上的，想着好记性不如烂笔头 ( 况且我还没有好记性 ಠ_ರೃ _ )。 但是，没有一个固定的本子，所以一来二去就记得乱七八糟的。也经常一不小心就不知道把本子弄到哪里去了，于是渐渐地想要写下来的想法就越来越淡了。\n\n而且讲真，真是一直不喜欢写文章，各种文章。。。 一直以来，写作文是我最不喜欢的事，从来都是把这一类的作业放在最后来做。对于一个喜欢文学，喜欢写诗的老妈来说，我是在这一部分一点都没有继承下来。 不过对于物理，生物，数学这一类，我还是蛮喜欢。\n\n喜欢归喜欢，但是，大学后经过一些对比，我觉得有些人的思维真是特别适合做物理研究，而我，ಥ_ಥ。\n\n之前，也不太总结，所以自己的总结能力比较差，曾几次都想着要培养总结能力，后来总是没有然后。\n\n越来越知道总结是多么的重要。\n\n现在刚好开始这个博客，想借此机会把自己的总结能力提！上！去！！或许有些晚，但是至少在开始上升！而且不需要多快，稳步前进就可以了。\n\n期待我的未来会更美好～～～( ´ ▽ ` )ﾉ`)\n\n现在，从抄抄抄开始！！\n","source":"_posts/start.md","raw":"---\ntitle: 应该有个开篇的\ndate: 2016-12-01\ncategories:\n- 生活\ntags:\n- 开篇\nauto_spacing: true\n---\n\n突然想起来应该有个开篇的，于是有了这篇～\n\n我一直想找个地方把一些东西记下来，一来是填补自己记忆力上的不足( 我是我们家最笨的了 )，二来是培养自己的总结能力。\n\n<!-- more -->\n\n之前有需要记得都是写在本子上的，想着好记性不如烂笔头 ( 况且我还没有好记性 ಠ_ರೃ _ )。 但是，没有一个固定的本子，所以一来二去就记得乱七八糟的。也经常一不小心就不知道把本子弄到哪里去了，于是渐渐地想要写下来的想法就越来越淡了。\n\n而且讲真，真是一直不喜欢写文章，各种文章。。。 一直以来，写作文是我最不喜欢的事，从来都是把这一类的作业放在最后来做。对于一个喜欢文学，喜欢写诗的老妈来说，我是在这一部分一点都没有继承下来。 不过对于物理，生物，数学这一类，我还是蛮喜欢。\n\n喜欢归喜欢，但是，大学后经过一些对比，我觉得有些人的思维真是特别适合做物理研究，而我，ಥ_ಥ。\n\n之前，也不太总结，所以自己的总结能力比较差，曾几次都想着要培养总结能力，后来总是没有然后。\n\n越来越知道总结是多么的重要。\n\n现在刚好开始这个博客，想借此机会把自己的总结能力提！上！去！！或许有些晚，但是至少在开始上升！而且不需要多快，稳步前进就可以了。\n\n期待我的未来会更美好～～～( ´ ▽ ` )ﾉ`)\n\n现在，从抄抄抄开始！！\n","slug":"start","published":1,"updated":"2016-12-05T05:01:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwfxj94e000h8mraap62291t","content":"<p>突然想起来应该有个开篇的，于是有了这篇～</p>\n<p>我一直想找个地方把一些东西记下来，一来是填补自己记忆力上的不足( 我是我们家最笨的了 )，二来是培养自己的总结能力。</p>\n<a id=\"more\"></a>\n<p>之前有需要记得都是写在本子上的，想着好记性不如烂笔头 ( 况且我还没有好记性 ಠ<em>ರೃ </em> )。 但是，没有一个固定的本子，所以一来二去就记得乱七八糟的。也经常一不小心就不知道把本子弄到哪里去了，于是渐渐地想要写下来的想法就越来越淡了。</p>\n<p>而且讲真，真是一直不喜欢写文章，各种文章。。。 一直以来，写作文是我最不喜欢的事，从来都是把这一类的作业放在最后来做。对于一个喜欢文学，喜欢写诗的老妈来说，我是在这一部分一点都没有继承下来。 不过对于物理，生物，数学这一类，我还是蛮喜欢。</p>\n<p>喜欢归喜欢，但是，大学后经过一些对比，我觉得有些人的思维真是特别适合做物理研究，而我，ಥ_ಥ。</p>\n<p>之前，也不太总结，所以自己的总结能力比较差，曾几次都想着要培养总结能力，后来总是没有然后。</p>\n<p>越来越知道总结是多么的重要。</p>\n<p>现在刚好开始这个博客，想借此机会把自己的总结能力提！上！去！！或许有些晚，但是至少在开始上升！而且不需要多快，稳步前进就可以了。</p>\n<p>期待我的未来会更美好～～～( ´ ▽ <code>)ﾉ</code>)</p>\n<p>现在，从抄抄抄开始！！</p>\n","excerpt":"<p>突然想起来应该有个开篇的，于是有了这篇～</p>\n<p>我一直想找个地方把一些东西记下来，一来是填补自己记忆力上的不足( 我是我们家最笨的了 )，二来是培养自己的总结能力。</p>","more":"<p>之前有需要记得都是写在本子上的，想着好记性不如烂笔头 ( 况且我还没有好记性 ಠ<em>ರೃ </em> )。 但是，没有一个固定的本子，所以一来二去就记得乱七八糟的。也经常一不小心就不知道把本子弄到哪里去了，于是渐渐地想要写下来的想法就越来越淡了。</p>\n<p>而且讲真，真是一直不喜欢写文章，各种文章。。。 一直以来，写作文是我最不喜欢的事，从来都是把这一类的作业放在最后来做。对于一个喜欢文学，喜欢写诗的老妈来说，我是在这一部分一点都没有继承下来。 不过对于物理，生物，数学这一类，我还是蛮喜欢。</p>\n<p>喜欢归喜欢，但是，大学后经过一些对比，我觉得有些人的思维真是特别适合做物理研究，而我，ಥ_ಥ。</p>\n<p>之前，也不太总结，所以自己的总结能力比较差，曾几次都想着要培养总结能力，后来总是没有然后。</p>\n<p>越来越知道总结是多么的重要。</p>\n<p>现在刚好开始这个博客，想借此机会把自己的总结能力提！上！去！！或许有些晚，但是至少在开始上升！而且不需要多快，稳步前进就可以了。</p>\n<p>期待我的未来会更美好～～～( ´ ▽ <code>)ﾉ</code>)</p>\n<p>现在，从抄抄抄开始！！</p>"},{"title":"nodeList","date":"2016-12-02T16:00:00.000Z","_content":"\n跟 querySelector 一块查到的 nodeList\n\n### 基本定义\n\nNodeList 对象是一个节点的集合，是由 __Node.childNodes__ 和 __document.querySelectorAll__ 返回的. (不是 Array)\n\n### 属性\n\n- length\n\n\n### 方法: item( idx )\n\n- 返回NodeList对象中指定索引的节点,如果索引越界,则返回null.等价的写法是nodeList[idx], 不过这种情况下越界访问将返回undefined.\n\n<!-- more -->\n\n### 其他\n\n- 大多数情况下，NodeList 对象都是个实时集合。意思是说，如果文档中的节点树发生变化，则已经存在的 NodeList 对象也可能会变化。\n\n  + Node.childNodes 是实时的\n\n  + document.querySelectorAll 返回一个静态的 NodeList\n\n-  NodeList 不是数组:\n\n  + NodeList的原型链是这样的：\n\n  myNodeList --> NodeList.prototype --> Object.prototype --> null\n\n\n### 遍历一个 NodeList 对象的所有节点。\n\n +  for 循环\n\n```\nfor (var i = 0; i < myNodeList.length; ++i) {\n    var item = myNodeList[i];  // 调用 myNodeList.item(i) 是没有必要的\n}\n```\n+ 在支持 for...of 的浏览器中 for...of 循环将会正确的遍历 NodeList 对象：\n\n```\nvar list = document.querySelectorAll( 'input[type=checkbox]' );\nfor (var item of list) {\n    item.checked = true;\n}\n```\n\n+ 将 NodeList 转换为 Array ( 类数组的方式 )\n\n    ---类数组： 有length 属性\n\n```\nvar div_list = document.querySelectorAll('div'); // 返回 NodeList\nvar div_array = Array.prototype.slice.call(div_list); // 将 NodeList 转换为数组\n\n//更好的写法\n[].forEach.call(Nodelist,function(){})\n```\n\n__NOTE:__\n\n最好不要使用 for...in 或者 for each...in 。__\n\n- 它们会把 length 和 item 属性也遍历出来。\n\n- 而 for in 也不保证顺序\n\n\n{% blockquote %}\n\n参考链接:\n\n[MDN: NodeList](https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList)\n\n{% endblockquote %}\n\n","source":"_posts/nodelist.md","raw":"---\ntitle: nodeList\ncategories:\n- 编程\ntags:\n- DOM\n- 抄抄抄\ndate: 2016-12-03\n---\n\n跟 querySelector 一块查到的 nodeList\n\n### 基本定义\n\nNodeList 对象是一个节点的集合，是由 __Node.childNodes__ 和 __document.querySelectorAll__ 返回的. (不是 Array)\n\n### 属性\n\n- length\n\n\n### 方法: item( idx )\n\n- 返回NodeList对象中指定索引的节点,如果索引越界,则返回null.等价的写法是nodeList[idx], 不过这种情况下越界访问将返回undefined.\n\n<!-- more -->\n\n### 其他\n\n- 大多数情况下，NodeList 对象都是个实时集合。意思是说，如果文档中的节点树发生变化，则已经存在的 NodeList 对象也可能会变化。\n\n  + Node.childNodes 是实时的\n\n  + document.querySelectorAll 返回一个静态的 NodeList\n\n-  NodeList 不是数组:\n\n  + NodeList的原型链是这样的：\n\n  myNodeList --> NodeList.prototype --> Object.prototype --> null\n\n\n### 遍历一个 NodeList 对象的所有节点。\n\n +  for 循环\n\n```\nfor (var i = 0; i < myNodeList.length; ++i) {\n    var item = myNodeList[i];  // 调用 myNodeList.item(i) 是没有必要的\n}\n```\n+ 在支持 for...of 的浏览器中 for...of 循环将会正确的遍历 NodeList 对象：\n\n```\nvar list = document.querySelectorAll( 'input[type=checkbox]' );\nfor (var item of list) {\n    item.checked = true;\n}\n```\n\n+ 将 NodeList 转换为 Array ( 类数组的方式 )\n\n    ---类数组： 有length 属性\n\n```\nvar div_list = document.querySelectorAll('div'); // 返回 NodeList\nvar div_array = Array.prototype.slice.call(div_list); // 将 NodeList 转换为数组\n\n//更好的写法\n[].forEach.call(Nodelist,function(){})\n```\n\n__NOTE:__\n\n最好不要使用 for...in 或者 for each...in 。__\n\n- 它们会把 length 和 item 属性也遍历出来。\n\n- 而 for in 也不保证顺序\n\n\n{% blockquote %}\n\n参考链接:\n\n[MDN: NodeList](https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList)\n\n{% endblockquote %}\n\n","slug":"nodelist","published":1,"updated":"2016-12-05T06:18:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwfxj94j000l8mra2ubrp6s8","content":"<p>跟 querySelector 一块查到的 nodeList</p>\n<h3 id=\"基本定义\"><a href=\"#基本定义\" class=\"headerlink\" title=\"基本定义\"></a>基本定义</h3><p>NodeList 对象是一个节点的集合，是由 <strong>Node.childNodes</strong> 和 <strong>document.querySelectorAll</strong> 返回的. (不是 Array)</p>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><ul>\n<li>length</li>\n</ul>\n<h3 id=\"方法-item-idx\"><a href=\"#方法-item-idx\" class=\"headerlink\" title=\"方法: item( idx )\"></a>方法: item( idx )</h3><ul>\n<li>返回NodeList对象中指定索引的节点,如果索引越界,则返回null.等价的写法是nodeList[idx], 不过这种情况下越界访问将返回undefined.</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li><p>大多数情况下，NodeList 对象都是个实时集合。意思是说，如果文档中的节点树发生变化，则已经存在的 NodeList 对象也可能会变化。</p>\n<ul>\n<li><p>Node.childNodes 是实时的</p>\n</li>\n<li><p>document.querySelectorAll 返回一个静态的 NodeList</p>\n</li>\n</ul>\n</li>\n<li><p>NodeList 不是数组:</p>\n<ul>\n<li>NodeList的原型链是这样的：</li>\n</ul>\n<p>myNodeList –&gt; NodeList.prototype –&gt; Object.prototype –&gt; null</p>\n</li>\n</ul>\n<h3 id=\"遍历一个-NodeList-对象的所有节点。\"><a href=\"#遍历一个-NodeList-对象的所有节点。\" class=\"headerlink\" title=\"遍历一个 NodeList 对象的所有节点。\"></a>遍历一个 NodeList 对象的所有节点。</h3><ul>\n<li>for 循环</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">for (var i = 0; i &lt; myNodeList.length; ++i) &#123;</div><div class=\"line\">    var item = myNodeList[i];  // 调用 myNodeList.item(i) 是没有必要的</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>在支持 for…of 的浏览器中 for…of 循环将会正确的遍历 NodeList 对象：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var list = document.querySelectorAll( &apos;input[type=checkbox]&apos; );</div><div class=\"line\">for (var item of list) &#123;</div><div class=\"line\">    item.checked = true;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>将 NodeList 转换为 Array ( 类数组的方式 )</p>\n<p>  —类数组： 有length 属性</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var div_list = document.querySelectorAll(&apos;div&apos;); // 返回 NodeList</div><div class=\"line\">var div_array = Array.prototype.slice.call(div_list); // 将 NodeList 转换为数组</div><div class=\"line\"></div><div class=\"line\">//更好的写法</div><div class=\"line\">[].forEach.call(Nodelist,function()&#123;&#125;)</div></pre></td></tr></table></figure>\n<p><strong>NOTE:</strong></p>\n<p>最好不要使用 for…in 或者 for each…in 。__</p>\n<ul>\n<li><p>它们会把 length 和 item 属性也遍历出来。</p>\n</li>\n<li><p>而 for in 也不保证顺序</p>\n</li>\n</ul>\n<blockquote><p>参考链接:</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList\" target=\"_blank\" rel=\"external\">MDN: NodeList</a></p>\n</blockquote>\n","excerpt":"<p>跟 querySelector 一块查到的 nodeList</p>\n<h3 id=\"基本定义\"><a href=\"#基本定义\" class=\"headerlink\" title=\"基本定义\"></a>基本定义</h3><p>NodeList 对象是一个节点的集合，是由 <strong>Node.childNodes</strong> 和 <strong>document.querySelectorAll</strong> 返回的. (不是 Array)</p>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><ul>\n<li>length</li>\n</ul>\n<h3 id=\"方法-item-idx\"><a href=\"#方法-item-idx\" class=\"headerlink\" title=\"方法: item( idx )\"></a>方法: item( idx )</h3><ul>\n<li>返回NodeList对象中指定索引的节点,如果索引越界,则返回null.等价的写法是nodeList[idx], 不过这种情况下越界访问将返回undefined.</li>\n</ul>","more":"<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li><p>大多数情况下，NodeList 对象都是个实时集合。意思是说，如果文档中的节点树发生变化，则已经存在的 NodeList 对象也可能会变化。</p>\n<ul>\n<li><p>Node.childNodes 是实时的</p>\n</li>\n<li><p>document.querySelectorAll 返回一个静态的 NodeList</p>\n</li>\n</ul>\n</li>\n<li><p>NodeList 不是数组:</p>\n<ul>\n<li>NodeList的原型链是这样的：</li>\n</ul>\n<p>myNodeList –&gt; NodeList.prototype –&gt; Object.prototype –&gt; null</p>\n</li>\n</ul>\n<h3 id=\"遍历一个-NodeList-对象的所有节点。\"><a href=\"#遍历一个-NodeList-对象的所有节点。\" class=\"headerlink\" title=\"遍历一个 NodeList 对象的所有节点。\"></a>遍历一个 NodeList 对象的所有节点。</h3><ul>\n<li>for 循环</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">for (var i = 0; i &lt; myNodeList.length; ++i) &#123;</div><div class=\"line\">    var item = myNodeList[i];  // 调用 myNodeList.item(i) 是没有必要的</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>在支持 for…of 的浏览器中 for…of 循环将会正确的遍历 NodeList 对象：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var list = document.querySelectorAll( &apos;input[type=checkbox]&apos; );</div><div class=\"line\">for (var item of list) &#123;</div><div class=\"line\">    item.checked = true;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>将 NodeList 转换为 Array ( 类数组的方式 )</p>\n<p>  —类数组： 有length 属性</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var div_list = document.querySelectorAll(&apos;div&apos;); // 返回 NodeList</div><div class=\"line\">var div_array = Array.prototype.slice.call(div_list); // 将 NodeList 转换为数组</div><div class=\"line\"></div><div class=\"line\">//更好的写法</div><div class=\"line\">[].forEach.call(Nodelist,function()&#123;&#125;)</div></pre></td></tr></table></figure>\n<p><strong>NOTE:</strong></p>\n<p>最好不要使用 for…in 或者 for each…in 。__</p>\n<ul>\n<li><p>它们会把 length 和 item 属性也遍历出来。</p>\n</li>\n<li><p>而 for in 也不保证顺序</p>\n</li>\n</ul>\n<blockquote><p>参考链接:</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList\">MDN: NodeList</a></p>\n</blockquote>"},{"title":"querySelector","date":"2016-12-02T16:00:00.000Z","_content":"\n最近, 看到别人使用 querySelector, 而我之前根本没听过。所以找到 MDN 上的资料\n\n### 简单知识介绍\n\n- DOM 扩展\n\n它属于 DOM 扩展的部分。\n\n对 DOM 的两个主要的扩展是 Selectors API 和 HTML5，这两个扩展都源自开发社区, 而将某些常见做法及 API 标准化, 一直是众望所归。\n\n<!-- more -->\n\n此外还有一个不那么引人注目的 Element Traversal ( 元素遍历 ) 规范，为 DOM 添加了一些属性。\n\n- Selectors API\n\n是由 W3C 发起制定的一个标准, 致力于让浏览器原生支持 CSS 查询。之前所有实现着一功能的 JS 库，都会写一个基础的 CSS 解析器，然后再使用已有的 DOM 方法查询文档找到匹配的点。\n\n而把这个功能变成原生 API 之后，解析和树的查询操作可以在浏览器内部通过编译后的代码来完成，极大的改善了性能。\n\nSelectors API Level 1 的核心是两个方法：\n__querySelector()__ 和 __querySelectorAll()__， 可以通过 Document 及 ELement 类型的实例调用它们。\n\n已完全支持的浏览器 IE8+, Firefox 3.5+, Safari 3.1+, Chrome 和 Opera 10+\n\n### document.querySelector /  Element.querySelector()\n\n- 语法： element = document.querySelector( selectors )\n-  selectors: 是一个字符串，包含一个或是多个 css 选择器，多个以逗号隔开。\n\n比如: 找到 div 标签中的 input 标签。\n\n```\n<div class=\"user-panel main\">\n    <input name=\"login\"/>\n</div>\n```\n\n```\nvar el = document.querySelector(\"div.user-panel.main input[name=login]\");\n```\n- element 是 __一个__ element 对象 ( DOM 元素 )\n\n- 如果没有找到匹配的元素，则返回 null。\n\n- 找到多个，返回第一个匹配到的元素。\n\n- Css 伪类不会返回任何元素。\n\n- 如果要匹配的ID或选择器不符合 CSS 语法（比如不恰当地使用了冒号或者空格），你必须用反斜杠将这些字符转义。由于 JavaScript 中，反斜杠是转义字符，所以当你输入一个文本串时，你必须将它转义两次（一次是为 JavaScript 字符串转义，另一次是为 querySelector 转义）\n\n比如: 匹配 id 为  foo\\bar 的DOM\n\n```\ndocument.querySelector('#foo\\\\\\\\bar');\n\n```\n\n#### document.querySelectorAll ( Element.querySelectorAll() )\n\n- elementList = document.querySelectorAll(Selectors);\n\n- elementList 是一个 __non-live__ 的 NodeList 类型的对象.  ( 静态的 )\n\n- selectors 是一个由逗号连接的包含一个或多个CSS选择器的字符串.\n\n比如: 返回一个文档中所有的 class 为 \"note\" / \"alert\" 的 div 元素。\n\n```\nvar matches = document.querySelectorAll(\"div.note, div.alert\");\n```\n\n- WebKit 内核的浏览器有一个 __bug__: 如果 selectors参数中包含 CSS伪类, 返回的elementList 包含一个<html> 元素,而不是空的.\n\n---\n **NOTE!!**\n\nelement.querySelector / element.querySelectorAll\n    查找的时候都包含 element\n----\n\n{% blockquote %}\n\n参考链接：\n\n[MDN: NodeList](https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList)\n\n[MDN: Document.querySelectorAll](https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelectorAll)\n\n[MDN: Document.querySelector](https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelector)\n\n\n_JS高级程序设计 ( 第3版 )_\n\n{% endblockquote %}\n","source":"_posts/querySelector.md","raw":"---\ntitle: querySelector\ncategories:\n- 编程\ntags:\n- DOM\n- 抄抄抄\ndate: 2016-12-03\n---\n\n最近, 看到别人使用 querySelector, 而我之前根本没听过。所以找到 MDN 上的资料\n\n### 简单知识介绍\n\n- DOM 扩展\n\n它属于 DOM 扩展的部分。\n\n对 DOM 的两个主要的扩展是 Selectors API 和 HTML5，这两个扩展都源自开发社区, 而将某些常见做法及 API 标准化, 一直是众望所归。\n\n<!-- more -->\n\n此外还有一个不那么引人注目的 Element Traversal ( 元素遍历 ) 规范，为 DOM 添加了一些属性。\n\n- Selectors API\n\n是由 W3C 发起制定的一个标准, 致力于让浏览器原生支持 CSS 查询。之前所有实现着一功能的 JS 库，都会写一个基础的 CSS 解析器，然后再使用已有的 DOM 方法查询文档找到匹配的点。\n\n而把这个功能变成原生 API 之后，解析和树的查询操作可以在浏览器内部通过编译后的代码来完成，极大的改善了性能。\n\nSelectors API Level 1 的核心是两个方法：\n__querySelector()__ 和 __querySelectorAll()__， 可以通过 Document 及 ELement 类型的实例调用它们。\n\n已完全支持的浏览器 IE8+, Firefox 3.5+, Safari 3.1+, Chrome 和 Opera 10+\n\n### document.querySelector /  Element.querySelector()\n\n- 语法： element = document.querySelector( selectors )\n-  selectors: 是一个字符串，包含一个或是多个 css 选择器，多个以逗号隔开。\n\n比如: 找到 div 标签中的 input 标签。\n\n```\n<div class=\"user-panel main\">\n    <input name=\"login\"/>\n</div>\n```\n\n```\nvar el = document.querySelector(\"div.user-panel.main input[name=login]\");\n```\n- element 是 __一个__ element 对象 ( DOM 元素 )\n\n- 如果没有找到匹配的元素，则返回 null。\n\n- 找到多个，返回第一个匹配到的元素。\n\n- Css 伪类不会返回任何元素。\n\n- 如果要匹配的ID或选择器不符合 CSS 语法（比如不恰当地使用了冒号或者空格），你必须用反斜杠将这些字符转义。由于 JavaScript 中，反斜杠是转义字符，所以当你输入一个文本串时，你必须将它转义两次（一次是为 JavaScript 字符串转义，另一次是为 querySelector 转义）\n\n比如: 匹配 id 为  foo\\bar 的DOM\n\n```\ndocument.querySelector('#foo\\\\\\\\bar');\n\n```\n\n#### document.querySelectorAll ( Element.querySelectorAll() )\n\n- elementList = document.querySelectorAll(Selectors);\n\n- elementList 是一个 __non-live__ 的 NodeList 类型的对象.  ( 静态的 )\n\n- selectors 是一个由逗号连接的包含一个或多个CSS选择器的字符串.\n\n比如: 返回一个文档中所有的 class 为 \"note\" / \"alert\" 的 div 元素。\n\n```\nvar matches = document.querySelectorAll(\"div.note, div.alert\");\n```\n\n- WebKit 内核的浏览器有一个 __bug__: 如果 selectors参数中包含 CSS伪类, 返回的elementList 包含一个<html> 元素,而不是空的.\n\n---\n **NOTE!!**\n\nelement.querySelector / element.querySelectorAll\n    查找的时候都包含 element\n----\n\n{% blockquote %}\n\n参考链接：\n\n[MDN: NodeList](https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList)\n\n[MDN: Document.querySelectorAll](https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelectorAll)\n\n[MDN: Document.querySelector](https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelector)\n\n\n_JS高级程序设计 ( 第3版 )_\n\n{% endblockquote %}\n","slug":"querySelector","published":1,"updated":"2016-12-05T06:15:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwfxj94l000n8mrad8gzvij4","content":"<p>最近, 看到别人使用 querySelector, 而我之前根本没听过。所以找到 MDN 上的资料</p>\n<h3 id=\"简单知识介绍\"><a href=\"#简单知识介绍\" class=\"headerlink\" title=\"简单知识介绍\"></a>简单知识介绍</h3><ul>\n<li>DOM 扩展</li>\n</ul>\n<p>它属于 DOM 扩展的部分。</p>\n<p>对 DOM 的两个主要的扩展是 Selectors API 和 HTML5，这两个扩展都源自开发社区, 而将某些常见做法及 API 标准化, 一直是众望所归。</p>\n<a id=\"more\"></a>\n<p>此外还有一个不那么引人注目的 Element Traversal ( 元素遍历 ) 规范，为 DOM 添加了一些属性。</p>\n<ul>\n<li>Selectors API</li>\n</ul>\n<p>是由 W3C 发起制定的一个标准, 致力于让浏览器原生支持 CSS 查询。之前所有实现着一功能的 JS 库，都会写一个基础的 CSS 解析器，然后再使用已有的 DOM 方法查询文档找到匹配的点。</p>\n<p>而把这个功能变成原生 API 之后，解析和树的查询操作可以在浏览器内部通过编译后的代码来完成，极大的改善了性能。</p>\n<p>Selectors API Level 1 的核心是两个方法：<br><strong>querySelector()</strong> 和 <strong>querySelectorAll()</strong>， 可以通过 Document 及 ELement 类型的实例调用它们。</p>\n<p>已完全支持的浏览器 IE8+, Firefox 3.5+, Safari 3.1+, Chrome 和 Opera 10+</p>\n<h3 id=\"document-querySelector-Element-querySelector\"><a href=\"#document-querySelector-Element-querySelector\" class=\"headerlink\" title=\"document.querySelector /  Element.querySelector()\"></a>document.querySelector /  Element.querySelector()</h3><ul>\n<li>语法： element = document.querySelector( selectors )</li>\n<li>selectors: 是一个字符串，包含一个或是多个 css 选择器，多个以逗号隔开。</li>\n</ul>\n<p>比如: 找到 div 标签中的 input 标签。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;user-panel main&quot;&gt;</div><div class=\"line\">    &lt;input name=&quot;login&quot;/&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var el = document.querySelector(&quot;div.user-panel.main input[name=login]&quot;);</div></pre></td></tr></table></figure>\n<ul>\n<li><p>element 是 <strong>一个</strong> element 对象 ( DOM 元素 )</p>\n</li>\n<li><p>如果没有找到匹配的元素，则返回 null。</p>\n</li>\n<li><p>找到多个，返回第一个匹配到的元素。</p>\n</li>\n<li><p>Css 伪类不会返回任何元素。</p>\n</li>\n<li><p>如果要匹配的ID或选择器不符合 CSS 语法（比如不恰当地使用了冒号或者空格），你必须用反斜杠将这些字符转义。由于 JavaScript 中，反斜杠是转义字符，所以当你输入一个文本串时，你必须将它转义两次（一次是为 JavaScript 字符串转义，另一次是为 querySelector 转义）</p>\n</li>\n</ul>\n<p>比如: 匹配 id 为  foo\\bar 的DOM</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">document.querySelector(&apos;#foo\\\\\\\\bar&apos;);</div></pre></td></tr></table></figure>\n<h4 id=\"document-querySelectorAll-Element-querySelectorAll\"><a href=\"#document-querySelectorAll-Element-querySelectorAll\" class=\"headerlink\" title=\"document.querySelectorAll ( Element.querySelectorAll() )\"></a>document.querySelectorAll ( Element.querySelectorAll() )</h4><ul>\n<li><p>elementList = document.querySelectorAll(Selectors);</p>\n</li>\n<li><p>elementList 是一个 <strong>non-live</strong> 的 NodeList 类型的对象.  ( 静态的 )</p>\n</li>\n<li><p>selectors 是一个由逗号连接的包含一个或多个CSS选择器的字符串.</p>\n</li>\n</ul>\n<p>比如: 返回一个文档中所有的 class 为 “note” / “alert” 的 div 元素。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var matches = document.querySelectorAll(&quot;div.note, div.alert&quot;);</div></pre></td></tr></table></figure>\n<ul>\n<li>WebKit 内核的浏览器有一个 <strong>bug</strong>: 如果 selectors参数中包含 CSS伪类, 返回的elementList 包含一个<html> 元素,而不是空的.</html></li>\n</ul>\n<hr>\n<p> <strong>NOTE!!</strong></p>\n<p>element.querySelector / element.querySelectorAll</p>\n<pre><code>查找的时候都包含 element\n</code></pre><hr>\n<blockquote><p>参考链接：</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList\" target=\"_blank\" rel=\"external\">MDN: NodeList</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelectorAll\" target=\"_blank\" rel=\"external\">MDN: Document.querySelectorAll</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelector\" target=\"_blank\" rel=\"external\">MDN: Document.querySelector</a></p>\n<p><em>JS高级程序设计 ( 第3版 )</em></p>\n</blockquote>\n","excerpt":"<p>最近, 看到别人使用 querySelector, 而我之前根本没听过。所以找到 MDN 上的资料</p>\n<h3 id=\"简单知识介绍\"><a href=\"#简单知识介绍\" class=\"headerlink\" title=\"简单知识介绍\"></a>简单知识介绍</h3><ul>\n<li>DOM 扩展</li>\n</ul>\n<p>它属于 DOM 扩展的部分。</p>\n<p>对 DOM 的两个主要的扩展是 Selectors API 和 HTML5，这两个扩展都源自开发社区, 而将某些常见做法及 API 标准化, 一直是众望所归。</p>","more":"<p>此外还有一个不那么引人注目的 Element Traversal ( 元素遍历 ) 规范，为 DOM 添加了一些属性。</p>\n<ul>\n<li>Selectors API</li>\n</ul>\n<p>是由 W3C 发起制定的一个标准, 致力于让浏览器原生支持 CSS 查询。之前所有实现着一功能的 JS 库，都会写一个基础的 CSS 解析器，然后再使用已有的 DOM 方法查询文档找到匹配的点。</p>\n<p>而把这个功能变成原生 API 之后，解析和树的查询操作可以在浏览器内部通过编译后的代码来完成，极大的改善了性能。</p>\n<p>Selectors API Level 1 的核心是两个方法：<br><strong>querySelector()</strong> 和 <strong>querySelectorAll()</strong>， 可以通过 Document 及 ELement 类型的实例调用它们。</p>\n<p>已完全支持的浏览器 IE8+, Firefox 3.5+, Safari 3.1+, Chrome 和 Opera 10+</p>\n<h3 id=\"document-querySelector-Element-querySelector\"><a href=\"#document-querySelector-Element-querySelector\" class=\"headerlink\" title=\"document.querySelector /  Element.querySelector()\"></a>document.querySelector /  Element.querySelector()</h3><ul>\n<li>语法： element = document.querySelector( selectors )</li>\n<li>selectors: 是一个字符串，包含一个或是多个 css 选择器，多个以逗号隔开。</li>\n</ul>\n<p>比如: 找到 div 标签中的 input 标签。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;user-panel main&quot;&gt;</div><div class=\"line\">    &lt;input name=&quot;login&quot;/&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var el = document.querySelector(&quot;div.user-panel.main input[name=login]&quot;);</div></pre></td></tr></table></figure>\n<ul>\n<li><p>element 是 <strong>一个</strong> element 对象 ( DOM 元素 )</p>\n</li>\n<li><p>如果没有找到匹配的元素，则返回 null。</p>\n</li>\n<li><p>找到多个，返回第一个匹配到的元素。</p>\n</li>\n<li><p>Css 伪类不会返回任何元素。</p>\n</li>\n<li><p>如果要匹配的ID或选择器不符合 CSS 语法（比如不恰当地使用了冒号或者空格），你必须用反斜杠将这些字符转义。由于 JavaScript 中，反斜杠是转义字符，所以当你输入一个文本串时，你必须将它转义两次（一次是为 JavaScript 字符串转义，另一次是为 querySelector 转义）</p>\n</li>\n</ul>\n<p>比如: 匹配 id 为  foo\\bar 的DOM</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">document.querySelector(&apos;#foo\\\\\\\\bar&apos;);</div></pre></td></tr></table></figure>\n<h4 id=\"document-querySelectorAll-Element-querySelectorAll\"><a href=\"#document-querySelectorAll-Element-querySelectorAll\" class=\"headerlink\" title=\"document.querySelectorAll ( Element.querySelectorAll() )\"></a>document.querySelectorAll ( Element.querySelectorAll() )</h4><ul>\n<li><p>elementList = document.querySelectorAll(Selectors);</p>\n</li>\n<li><p>elementList 是一个 <strong>non-live</strong> 的 NodeList 类型的对象.  ( 静态的 )</p>\n</li>\n<li><p>selectors 是一个由逗号连接的包含一个或多个CSS选择器的字符串.</p>\n</li>\n</ul>\n<p>比如: 返回一个文档中所有的 class 为 “note” / “alert” 的 div 元素。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var matches = document.querySelectorAll(&quot;div.note, div.alert&quot;);</div></pre></td></tr></table></figure>\n<ul>\n<li>WebKit 内核的浏览器有一个 <strong>bug</strong>: 如果 selectors参数中包含 CSS伪类, 返回的elementList 包含一个<html> 元素,而不是空的.</li>\n</ul>\n<hr>\n<p> <strong>NOTE!!</strong></p>\n<p>element.querySelector / element.querySelectorAll</p>\n<pre><code>查找的时候都包含 element\n</code></pre><hr>\n<blockquote><p>参考链接：</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList\">MDN: NodeList</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelectorAll\">MDN: Document.querySelectorAll</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelector\">MDN: Document.querySelector</a></p>\n<p><em>JS高级程序设计 ( 第3版 )</em></p>\n</blockquote>"},{"title":"我的 hexo 搭建过程记录","auto_spacing":true,"_content":"\n#### hexo 基础搭建\n\n- 安装 hexo\n\n    $ npm install -g hexo-cli\n\n- 随便建一个目录\n\n    mkdir hexo_test\n\n- 初始化文件夹 ( 在hexo_test 外面 )\n\n    hexo init hexo_test\n\n- 进入 hexo_test\n\n    cd hexo_test\n\n- npm 初始化\n\n    npm install\n\n- 然后就可以看到有许多文件夹\n\n<!-- more -->\n\n- 生成静态页面\n\n    + hexo generate（hexo g也可以）\n\n    + 在 public 某个目录里( 默认是现在的时间) 有一个新生成的 yourpostname.html 文件。\n\n- 启动本地服务，进行文章预览调试\n\n    hexo server\n\n- 打开 http://localhost:4000\n\n- 注意 ！ 这里我有个错误提示\n\n```bash\n  {[Error: Cannot find module './build/Release/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n  {[Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n  {[Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n```\n先查到用这个 npm install hexo --no-optional,\n但是对我没用\n\n__(至今还未解决)__\n\n- 新添加一篇 post\n\n    + hexo new \"Hey\"\n\n    + 在 hexo_test/source/_post 中生成 一个为 Hey.md 的文件。\n\n- 如果你没有起 server 的话，可能需要执行 hexo generate 来生成静态页面\n\n- 再去刷新一下页面，发现页面上新增了 Hey 这个 post，但是没有内容。\n\n- 进入source/_post/Hey.md 你就可以编辑这篇文章的内容了\n\n    + 然后保存， 你就可以在网页中看到你文章的内容了\n\n#### 部署到 github.io 上\n\n- 在根目录下找到 _config.yml 文件, 并打开\n\n- 找到 这部分(在最后)\n```\n  # Deployment\n  ## Docs: https://hexo.io/docs/deployment.html\n  deploy:\n    type:\n```\n\n- 修改上述地方\n\n```\n  # Deployment\n  ## Docs: https://hexo.io/docs/deployment.html\n  deploy:\n    type: git\n    repository: git@github.com:vivian-xu/vivian-xu.github.io.git\n    branch: master\n```\n##### 注意!\n  - repository：必须是SSH形式的url (如上)，而不能是HTTPS形式的url（https://github.com/***/***.github.io.git），\n  - 如果你使用SSH url，但是电脑没有开放SSH 端口，会致部署失败。\n  - 如果你是为一个项目制作网站，那么需要把branch设置为gh-pages。 ( __看到这个，我把我的 branch 改成 gh-pages了__ )\n\n - 然后 hexo deploy\n\n    ##### 报错 ERROR Deployer not found: git\n\n    解决方法： npm install hexo-deployer-git --save\n\n  - hexo deploy  成功！\n\n  - 然后我去 github 我的 vivian-xu.github.io.git 的仓库里切换了，分支看了一下，有传进来的！\n\n  - 然后我去访问 vivian-xu.github.io.git/hexo_test/\n\n  结果 404 ....\n\n  于是我在网上搜索问题, 先是找 gh-pages 相关，但是没解决我问题。之后我又去 git 仓库看了下，确保没有什么问题，看着我的 gh-pages 分支，很是疑惑，东西都在，怎么能访问不了。\n\n  看着 gh-pages 我有些疑虑文档里所说的 gh-pages 名字是我建的 文件夹名么。。。 我的文件夹在本地，而且文件夹名没有一起更新到 github 的 vivian-xu.github.io 的 gh-pages 中，github 怎么会知道我的文件夹名。。\n\n  然后我在 hexo 的 [这个issue](https://github.com/hexojs/hexo/issues/350) 里看到回答。\n\n{% blockquote %}\n    _yourname.github.io形式的库，会解析master分支；而别的名字的库，会解析gh-pages分支，以yourname.github.io/库名的形式访问。 _\n{% endblockquote %}\n\n  这个更加让我相信是名字的问题，于是，我重新建了一个库，然后把 _config.yml 的 git 相关的文件改了\n\n  ```\n  type: git\n  repository: git@github.com:vivian-xu/hexo_test.git // 新库地址\n  branch: gh-pages\n  ```\n  - 然后重新生成，deploy，检查了下新的 git 的仓库确保文件传了进去\n\n  - 之后打开 vivian-xu.github.io/hexo_test/  已经不再是 404 了！但是。为什么没有样式。。\n\n  - 打开 chorme 的调试工具，发现 css js 的路径都不对( 类似这样的 https://vivian-xu.github.io/fancybox/jquery.fancybox.css )，应该是 https://vivian-xu.github.io/hexo_test/*** 。于是，又去看了 issue ，看到这个 https://github.com/hexojs/hexo/issues/1121\n\n   意识到自己要配 root ( 自己的网站还要配 CNAME )\n\n  于是又修改了 _config.yml\n\n   ```\n   url: http://yoursite.com\n   root: /hexo_test/\n   permalink: :year/:month/:day/:title/\n   permalink_defaults:\n   ```\n\n  - 再次 hexo g -d ，打开页面 终于成功了！！\n\n  现在是这个样子\n  ```\n  # Hexo Configuration\n  ## Docs: https://hexo.io/docs/configuration.html\n  ## Source: https://github.com/hexojs/hexo/\n\n  # Site 站点\n  title: Vivian\n  subtitle:\n  description: Vvian's blog\n  keywords:\n    - HTML\n    - JavaScript\n    - CSS\n    - React\n  author: Vivian\n  language: zh-CN #语言\n  timezone: Asia/Shanghai #时区\n\n  # URL\n  ## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\n  url: http://yoursite.com #用于绑定域名, 其他的不需要配置\n  root: /hexo_test/\n  permalink: :year/:month/:day/:title/\n  permalink_defaults:\n\n  # Directory\n  source_dir: source\n  public_dir: public\n  tag_dir: tags #标签\n  archive_dir: archives  #归档\n  category_dir: categories #分类\n  code_dir: downloads/code\n  i18n_dir: :lang\n  skip_render:\n\n  # Writing\n  new_post_name: :title.md # File name of new posts\n  default_layout: post #默认模板(post page photo draft)\n  titlecase: false # Transform title into titlecase  #标题转换成大写\n  external_link: true # Open external links in new tab #新标签页里打开连接\n  filename_case: 0\n  render_drafts: false\n  post_asset_folder: false\n  relative_link: false\n  future: true\n  highlight:  #语法高亮\n    enable: true\n    line_number: true #显示行号\n    auto_detect: false\n    tab_replace:\n\n  # Category & Tag\n  default_category: uncategorized #默认分类\n  category_map:\n  tag_map:\n\n  # Date / Time format\n  ## Hexo uses Moment.js to parse and display date\n  ## You can customize the date format as defined in\n  ## http://momentjs.com/docs/#/displaying/format/\n  date_format: YYYY-MM-DD\n  time_format: HH:mm:ss\n\n  # Pagination\n  ## Set per_page to 0 to disable pagination\n  per_page: 10\n  pagination_dir: page\n\n  # Extensions\n  ## Plugins: https://hexo.io/plugins/\n  ## Themes: https://hexo.io/themes/\n  theme: landscape\n  # theme: ninja\n\n  # Deployment\n  ## Docs: https://hexo.io/docs/deployment.html\n  deploy:\n    type: git\n    # repository: git@github.com:vivian-xu/vivian-xu.github.io.git\n    repository: git@github.com:vivian-xu/blog.git\n    branch: gh-pages\n\n  ```\n\n#### theme 主题\n\n- 挑选一个喜欢的 theme, git clone theme/ theme_name 下\n\n- 将网站的 _config.yml 的 theme 改成你要的换的主题的名字\n\n- 根据主题的文档，修改 _config.yml ( 包括网站的和主题的 )\n\n- 生成网页并且 开启 server 调试下，然后自己不满意的地方，手动改改模版。\n\n#### 管理源代码\n经某人提醒，我的源代码没有管理，所以又开了一个库用来管理这一整套的源代码。然后想直接在主页面上展示博客首页就好了，于是将 branch 变成了 master。 再次生成，deploy。\n\n#### 部署到自己的域名上\n- 因为，如果直接将我的域名，解析道 git 的这个网页的话，要改 CNAME (  只能有一个 )，而我的邮箱还是指向原来服务器的，感觉不太好，于是就保持原来的方式了。直接将静态文件 copy 到服务器下保存。\n\n- 用了一套简单的 CI 系统，将 GitHub 设置成有新的 push 的时候发消息给 CI, CI 自动 pull 下来代码，然后测试，到服务器指定的文件夹里。\n\n到这，基本上就结束了。当然，我觉得，我会没事改改这个 theme 的代码的～～\n\n\n#### hexo 部分指令\n\n指令 | 简写 | 作用\n--|--|--\nhexo new \"postName\" | hexo n \"postName\" |  #新建文章\nhexo new page \"pageName\" | hexo n  page \"postName\"  |  #新建页面\nhexo generate | hexo g |  #生成静态页面至public目录\nhexo server | hexo s | #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy | hexo d | #将.deploy目录部署到GitHub\nhexo help | \\ | # 查看帮助\nhexo version | \\  |  #查看Hexo的版本\n\n{% blockquote %}\n\n参考 :\n\n[Hexo常见问题解决方案](https://xuanwo.org/2014/08/14/hexo-usual-problem/#Deploy之后，页面长时间404)\n\n[Hexo 文档](https://hexo.io/zh-cn/docs/)\n\n[Hexo搭建Github静态博客](http://www.cnblogs.com/zhcncn/p/4097881.html)\n\n{% endblockquote %}\n","source":"_posts/start with hexo.md","raw":"---\ntitle: 我的 hexo 搭建过程记录\ncategories:\n- 编程\ntags:\n- 记录\n- Hexo\nauto_spacing: true\n---\n\n#### hexo 基础搭建\n\n- 安装 hexo\n\n    $ npm install -g hexo-cli\n\n- 随便建一个目录\n\n    mkdir hexo_test\n\n- 初始化文件夹 ( 在hexo_test 外面 )\n\n    hexo init hexo_test\n\n- 进入 hexo_test\n\n    cd hexo_test\n\n- npm 初始化\n\n    npm install\n\n- 然后就可以看到有许多文件夹\n\n<!-- more -->\n\n- 生成静态页面\n\n    + hexo generate（hexo g也可以）\n\n    + 在 public 某个目录里( 默认是现在的时间) 有一个新生成的 yourpostname.html 文件。\n\n- 启动本地服务，进行文章预览调试\n\n    hexo server\n\n- 打开 http://localhost:4000\n\n- 注意 ！ 这里我有个错误提示\n\n```bash\n  {[Error: Cannot find module './build/Release/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n  {[Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n  {[Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n```\n先查到用这个 npm install hexo --no-optional,\n但是对我没用\n\n__(至今还未解决)__\n\n- 新添加一篇 post\n\n    + hexo new \"Hey\"\n\n    + 在 hexo_test/source/_post 中生成 一个为 Hey.md 的文件。\n\n- 如果你没有起 server 的话，可能需要执行 hexo generate 来生成静态页面\n\n- 再去刷新一下页面，发现页面上新增了 Hey 这个 post，但是没有内容。\n\n- 进入source/_post/Hey.md 你就可以编辑这篇文章的内容了\n\n    + 然后保存， 你就可以在网页中看到你文章的内容了\n\n#### 部署到 github.io 上\n\n- 在根目录下找到 _config.yml 文件, 并打开\n\n- 找到 这部分(在最后)\n```\n  # Deployment\n  ## Docs: https://hexo.io/docs/deployment.html\n  deploy:\n    type:\n```\n\n- 修改上述地方\n\n```\n  # Deployment\n  ## Docs: https://hexo.io/docs/deployment.html\n  deploy:\n    type: git\n    repository: git@github.com:vivian-xu/vivian-xu.github.io.git\n    branch: master\n```\n##### 注意!\n  - repository：必须是SSH形式的url (如上)，而不能是HTTPS形式的url（https://github.com/***/***.github.io.git），\n  - 如果你使用SSH url，但是电脑没有开放SSH 端口，会致部署失败。\n  - 如果你是为一个项目制作网站，那么需要把branch设置为gh-pages。 ( __看到这个，我把我的 branch 改成 gh-pages了__ )\n\n - 然后 hexo deploy\n\n    ##### 报错 ERROR Deployer not found: git\n\n    解决方法： npm install hexo-deployer-git --save\n\n  - hexo deploy  成功！\n\n  - 然后我去 github 我的 vivian-xu.github.io.git 的仓库里切换了，分支看了一下，有传进来的！\n\n  - 然后我去访问 vivian-xu.github.io.git/hexo_test/\n\n  结果 404 ....\n\n  于是我在网上搜索问题, 先是找 gh-pages 相关，但是没解决我问题。之后我又去 git 仓库看了下，确保没有什么问题，看着我的 gh-pages 分支，很是疑惑，东西都在，怎么能访问不了。\n\n  看着 gh-pages 我有些疑虑文档里所说的 gh-pages 名字是我建的 文件夹名么。。。 我的文件夹在本地，而且文件夹名没有一起更新到 github 的 vivian-xu.github.io 的 gh-pages 中，github 怎么会知道我的文件夹名。。\n\n  然后我在 hexo 的 [这个issue](https://github.com/hexojs/hexo/issues/350) 里看到回答。\n\n{% blockquote %}\n    _yourname.github.io形式的库，会解析master分支；而别的名字的库，会解析gh-pages分支，以yourname.github.io/库名的形式访问。 _\n{% endblockquote %}\n\n  这个更加让我相信是名字的问题，于是，我重新建了一个库，然后把 _config.yml 的 git 相关的文件改了\n\n  ```\n  type: git\n  repository: git@github.com:vivian-xu/hexo_test.git // 新库地址\n  branch: gh-pages\n  ```\n  - 然后重新生成，deploy，检查了下新的 git 的仓库确保文件传了进去\n\n  - 之后打开 vivian-xu.github.io/hexo_test/  已经不再是 404 了！但是。为什么没有样式。。\n\n  - 打开 chorme 的调试工具，发现 css js 的路径都不对( 类似这样的 https://vivian-xu.github.io/fancybox/jquery.fancybox.css )，应该是 https://vivian-xu.github.io/hexo_test/*** 。于是，又去看了 issue ，看到这个 https://github.com/hexojs/hexo/issues/1121\n\n   意识到自己要配 root ( 自己的网站还要配 CNAME )\n\n  于是又修改了 _config.yml\n\n   ```\n   url: http://yoursite.com\n   root: /hexo_test/\n   permalink: :year/:month/:day/:title/\n   permalink_defaults:\n   ```\n\n  - 再次 hexo g -d ，打开页面 终于成功了！！\n\n  现在是这个样子\n  ```\n  # Hexo Configuration\n  ## Docs: https://hexo.io/docs/configuration.html\n  ## Source: https://github.com/hexojs/hexo/\n\n  # Site 站点\n  title: Vivian\n  subtitle:\n  description: Vvian's blog\n  keywords:\n    - HTML\n    - JavaScript\n    - CSS\n    - React\n  author: Vivian\n  language: zh-CN #语言\n  timezone: Asia/Shanghai #时区\n\n  # URL\n  ## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\n  url: http://yoursite.com #用于绑定域名, 其他的不需要配置\n  root: /hexo_test/\n  permalink: :year/:month/:day/:title/\n  permalink_defaults:\n\n  # Directory\n  source_dir: source\n  public_dir: public\n  tag_dir: tags #标签\n  archive_dir: archives  #归档\n  category_dir: categories #分类\n  code_dir: downloads/code\n  i18n_dir: :lang\n  skip_render:\n\n  # Writing\n  new_post_name: :title.md # File name of new posts\n  default_layout: post #默认模板(post page photo draft)\n  titlecase: false # Transform title into titlecase  #标题转换成大写\n  external_link: true # Open external links in new tab #新标签页里打开连接\n  filename_case: 0\n  render_drafts: false\n  post_asset_folder: false\n  relative_link: false\n  future: true\n  highlight:  #语法高亮\n    enable: true\n    line_number: true #显示行号\n    auto_detect: false\n    tab_replace:\n\n  # Category & Tag\n  default_category: uncategorized #默认分类\n  category_map:\n  tag_map:\n\n  # Date / Time format\n  ## Hexo uses Moment.js to parse and display date\n  ## You can customize the date format as defined in\n  ## http://momentjs.com/docs/#/displaying/format/\n  date_format: YYYY-MM-DD\n  time_format: HH:mm:ss\n\n  # Pagination\n  ## Set per_page to 0 to disable pagination\n  per_page: 10\n  pagination_dir: page\n\n  # Extensions\n  ## Plugins: https://hexo.io/plugins/\n  ## Themes: https://hexo.io/themes/\n  theme: landscape\n  # theme: ninja\n\n  # Deployment\n  ## Docs: https://hexo.io/docs/deployment.html\n  deploy:\n    type: git\n    # repository: git@github.com:vivian-xu/vivian-xu.github.io.git\n    repository: git@github.com:vivian-xu/blog.git\n    branch: gh-pages\n\n  ```\n\n#### theme 主题\n\n- 挑选一个喜欢的 theme, git clone theme/ theme_name 下\n\n- 将网站的 _config.yml 的 theme 改成你要的换的主题的名字\n\n- 根据主题的文档，修改 _config.yml ( 包括网站的和主题的 )\n\n- 生成网页并且 开启 server 调试下，然后自己不满意的地方，手动改改模版。\n\n#### 管理源代码\n经某人提醒，我的源代码没有管理，所以又开了一个库用来管理这一整套的源代码。然后想直接在主页面上展示博客首页就好了，于是将 branch 变成了 master。 再次生成，deploy。\n\n#### 部署到自己的域名上\n- 因为，如果直接将我的域名，解析道 git 的这个网页的话，要改 CNAME (  只能有一个 )，而我的邮箱还是指向原来服务器的，感觉不太好，于是就保持原来的方式了。直接将静态文件 copy 到服务器下保存。\n\n- 用了一套简单的 CI 系统，将 GitHub 设置成有新的 push 的时候发消息给 CI, CI 自动 pull 下来代码，然后测试，到服务器指定的文件夹里。\n\n到这，基本上就结束了。当然，我觉得，我会没事改改这个 theme 的代码的～～\n\n\n#### hexo 部分指令\n\n指令 | 简写 | 作用\n--|--|--\nhexo new \"postName\" | hexo n \"postName\" |  #新建文章\nhexo new page \"pageName\" | hexo n  page \"postName\"  |  #新建页面\nhexo generate | hexo g |  #生成静态页面至public目录\nhexo server | hexo s | #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy | hexo d | #将.deploy目录部署到GitHub\nhexo help | \\ | # 查看帮助\nhexo version | \\  |  #查看Hexo的版本\n\n{% blockquote %}\n\n参考 :\n\n[Hexo常见问题解决方案](https://xuanwo.org/2014/08/14/hexo-usual-problem/#Deploy之后，页面长时间404)\n\n[Hexo 文档](https://hexo.io/zh-cn/docs/)\n\n[Hexo搭建Github静态博客](http://www.cnblogs.com/zhcncn/p/4097881.html)\n\n{% endblockquote %}\n","slug":"start with hexo","published":1,"date":"2016-12-02T15:24:51.000Z","updated":"2016-12-05T06:19:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwfxj94q000r8mrax80a7hrf","content":"<h4 id=\"hexo-基础搭建\"><a href=\"#hexo-基础搭建\" class=\"headerlink\" title=\"hexo 基础搭建\"></a>hexo 基础搭建</h4><ul>\n<li><p>安装 hexo</p>\n<p>  $ npm install -g hexo-cli</p>\n</li>\n<li><p>随便建一个目录</p>\n<p>  mkdir hexo_test</p>\n</li>\n<li><p>初始化文件夹 ( 在hexo_test 外面 )</p>\n<p>  hexo init hexo_test</p>\n</li>\n<li><p>进入 hexo_test</p>\n<p>  cd hexo_test</p>\n</li>\n<li><p>npm 初始化</p>\n<p>  npm install</p>\n</li>\n<li><p>然后就可以看到有许多文件夹</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>生成静态页面</p>\n<ul>\n<li><p>hexo generate（hexo g也可以）</p>\n</li>\n<li><p>在 public 某个目录里( 默认是现在的时间) 有一个新生成的 yourpostname.html 文件。</p>\n</li>\n</ul>\n</li>\n<li><p>启动本地服务，进行文章预览调试</p>\n<p>  hexo server</p>\n</li>\n<li><p>打开 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a></p>\n</li>\n<li><p>注意 ！ 这里我有个错误提示</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;[Error: Cannot find module <span class=\"string\">'./build/Release/DTraceProviderBindings'</span>] code: <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;</div><div class=\"line\">&#123;[Error: Cannot find module <span class=\"string\">'./build/default/DTraceProviderBindings'</span>] code: <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;</div><div class=\"line\">&#123;[Error: Cannot find module <span class=\"string\">'./build/Debug/DTraceProviderBindings'</span>] code: <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;</div></pre></td></tr></table></figure>\n<p>先查到用这个 npm install hexo –no-optional,<br>但是对我没用</p>\n<p><strong>(至今还未解决)</strong></p>\n<ul>\n<li><p>新添加一篇 post</p>\n<ul>\n<li><p>hexo new “Hey”</p>\n</li>\n<li><p>在 hexo_test/source/_post 中生成 一个为 Hey.md 的文件。</p>\n</li>\n</ul>\n</li>\n<li><p>如果你没有起 server 的话，可能需要执行 hexo generate 来生成静态页面</p>\n</li>\n<li><p>再去刷新一下页面，发现页面上新增了 Hey 这个 post，但是没有内容。</p>\n</li>\n<li><p>进入source/_post/Hey.md 你就可以编辑这篇文章的内容了</p>\n<ul>\n<li>然后保存， 你就可以在网页中看到你文章的内容了</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"部署到-github-io-上\"><a href=\"#部署到-github-io-上\" class=\"headerlink\" title=\"部署到 github.io 上\"></a>部署到 github.io 上</h4><ul>\n<li><p>在根目录下找到 _config.yml 文件, 并打开</p>\n</li>\n<li><p>找到 这部分(在最后)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type:</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改上述地方</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repository: git@github.com:vivian-xu/vivian-xu.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<h5 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意!\"></a>注意!</h5><ul>\n<li>repository：必须是SSH形式的url (如上)，而不能是HTTPS形式的url（<a href=\"https://github.com/***/***.github.io.git），\" target=\"_blank\" rel=\"external\">https://github.com/***/***.github.io.git），</a></li>\n<li>如果你使用SSH url，但是电脑没有开放SSH 端口，会致部署失败。</li>\n<li><p>如果你是为一个项目制作网站，那么需要把branch设置为gh-pages。 ( <strong>看到这个，我把我的 branch 改成 gh-pages了</strong> )</p>\n<ul>\n<li>然后 hexo deploy</li>\n</ul>\n<h5 id=\"报错-ERROR-Deployer-not-found-git\"><a href=\"#报错-ERROR-Deployer-not-found-git\" class=\"headerlink\" title=\"报错 ERROR Deployer not found: git\"></a>报错 ERROR Deployer not found: git</h5><p>解决方法： npm install hexo-deployer-git –save</p>\n</li>\n<li><p>hexo deploy  成功！</p>\n</li>\n<li><p>然后我去 github 我的 vivian-xu.github.io.git 的仓库里切换了，分支看了一下，有传进来的！</p>\n</li>\n<li><p>然后我去访问 vivian-xu.github.io.git/hexo_test/</p>\n<p>结果 404 ….</p>\n<p>于是我在网上搜索问题, 先是找 gh-pages 相关，但是没解决我问题。之后我又去 git 仓库看了下，确保没有什么问题，看着我的 gh-pages 分支，很是疑惑，东西都在，怎么能访问不了。</p>\n<p>看着 gh-pages 我有些疑虑文档里所说的 gh-pages 名字是我建的 文件夹名么。。。 我的文件夹在本地，而且文件夹名没有一起更新到 github 的 vivian-xu.github.io 的 gh-pages 中，github 怎么会知道我的文件夹名。。</p>\n<p>然后我在 hexo 的 <a href=\"https://github.com/hexojs/hexo/issues/350\" target=\"_blank\" rel=\"external\">这个issue</a> 里看到回答。</p>\n</li>\n</ul>\n<blockquote><p><em>yourname.github.io形式的库，会解析master分支；而别的名字的库，会解析gh-pages分支，以yourname.github.io/库名的形式访问。 </em></p>\n</blockquote>\n<p>  这个更加让我相信是名字的问题，于是，我重新建了一个库，然后把 _config.yml 的 git 相关的文件改了</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">type: git</div><div class=\"line\">repository: git@github.com:vivian-xu/hexo_test.git // 新库地址</div><div class=\"line\">branch: gh-pages</div></pre></td></tr></table></figure>\n<ul>\n<li><p>然后重新生成，deploy，检查了下新的 git 的仓库确保文件传了进去</p>\n</li>\n<li><p>之后打开 vivian-xu.github.io/hexo_test/  已经不再是 404 了！但是。为什么没有样式。。</p>\n</li>\n<li><p>打开 chorme 的调试工具，发现 css js 的路径都不对( 类似这样的 <a href=\"https://vivian-xu.github.io/fancybox/jquery.fancybox.css\" target=\"_blank\" rel=\"external\">https://vivian-xu.github.io/fancybox/jquery.fancybox.css</a> )，应该是 <a href=\"https://vivian-xu.github.io/hexo_test/***\" target=\"_blank\" rel=\"external\">https://vivian-xu.github.io/hexo_test/***</a> 。于是，又去看了 issue ，看到这个 <a href=\"https://github.com/hexojs/hexo/issues/1121\" target=\"_blank\" rel=\"external\">https://github.com/hexojs/hexo/issues/1121</a></p>\n<p>意识到自己要配 root ( 自己的网站还要配 CNAME )</p>\n<p>于是又修改了 _config.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">url: http://yoursite.com</div><div class=\"line\">root: /hexo_test/</div><div class=\"line\">permalink: :year/:month/:day/:title/</div><div class=\"line\">permalink_defaults:</div></pre></td></tr></table></figure>\n</li>\n<li><p>再次 hexo g -d ，打开页面 终于成功了！！</p>\n<p>现在是这个样子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Hexo Configuration</div><div class=\"line\">## Docs: https://hexo.io/docs/configuration.html</div><div class=\"line\">## Source: https://github.com/hexojs/hexo/</div><div class=\"line\"></div><div class=\"line\"># Site 站点</div><div class=\"line\">title: Vivian</div><div class=\"line\">subtitle:</div><div class=\"line\">description: Vvian&apos;s blog</div><div class=\"line\">keywords:</div><div class=\"line\">  - HTML</div><div class=\"line\">  - JavaScript</div><div class=\"line\">  - CSS</div><div class=\"line\">  - React</div><div class=\"line\">author: Vivian</div><div class=\"line\">language: zh-CN #语言</div><div class=\"line\">timezone: Asia/Shanghai #时区</div><div class=\"line\"></div><div class=\"line\"># URL</div><div class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class=\"line\">url: http://yoursite.com #用于绑定域名, 其他的不需要配置</div><div class=\"line\">root: /hexo_test/</div><div class=\"line\">permalink: :year/:month/:day/:title/</div><div class=\"line\">permalink_defaults:</div><div class=\"line\"></div><div class=\"line\"># Directory</div><div class=\"line\">source_dir: source</div><div class=\"line\">public_dir: public</div><div class=\"line\">tag_dir: tags #标签</div><div class=\"line\">archive_dir: archives  #归档</div><div class=\"line\">category_dir: categories #分类</div><div class=\"line\">code_dir: downloads/code</div><div class=\"line\">i18n_dir: :lang</div><div class=\"line\">skip_render:</div><div class=\"line\"></div><div class=\"line\"># Writing</div><div class=\"line\">new_post_name: :title.md # File name of new posts</div><div class=\"line\">default_layout: post #默认模板(post page photo draft)</div><div class=\"line\">titlecase: false # Transform title into titlecase  #标题转换成大写</div><div class=\"line\">external_link: true # Open external links in new tab #新标签页里打开连接</div><div class=\"line\">filename_case: 0</div><div class=\"line\">render_drafts: false</div><div class=\"line\">post_asset_folder: false</div><div class=\"line\">relative_link: false</div><div class=\"line\">future: true</div><div class=\"line\">highlight:  #语法高亮</div><div class=\"line\">  enable: true</div><div class=\"line\">  line_number: true #显示行号</div><div class=\"line\">  auto_detect: false</div><div class=\"line\">  tab_replace:</div><div class=\"line\"></div><div class=\"line\"># Category &amp; Tag</div><div class=\"line\">default_category: uncategorized #默认分类</div><div class=\"line\">category_map:</div><div class=\"line\">tag_map:</div><div class=\"line\"></div><div class=\"line\"># Date / Time format</div><div class=\"line\">## Hexo uses Moment.js to parse and display date</div><div class=\"line\">## You can customize the date format as defined in</div><div class=\"line\">## http://momentjs.com/docs/#/displaying/format/</div><div class=\"line\">date_format: YYYY-MM-DD</div><div class=\"line\">time_format: HH:mm:ss</div><div class=\"line\"></div><div class=\"line\"># Pagination</div><div class=\"line\">## Set per_page to 0 to disable pagination</div><div class=\"line\">per_page: 10</div><div class=\"line\">pagination_dir: page</div><div class=\"line\"></div><div class=\"line\"># Extensions</div><div class=\"line\">## Plugins: https://hexo.io/plugins/</div><div class=\"line\">## Themes: https://hexo.io/themes/</div><div class=\"line\">theme: landscape</div><div class=\"line\"># theme: ninja</div><div class=\"line\"></div><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  # repository: git@github.com:vivian-xu/vivian-xu.github.io.git</div><div class=\"line\">  repository: git@github.com:vivian-xu/blog.git</div><div class=\"line\">  branch: gh-pages</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"theme-主题\"><a href=\"#theme-主题\" class=\"headerlink\" title=\"theme 主题\"></a>theme 主题</h4><ul>\n<li><p>挑选一个喜欢的 theme, git clone theme/ theme_name 下</p>\n</li>\n<li><p>将网站的 _config.yml 的 theme 改成你要的换的主题的名字</p>\n</li>\n<li><p>根据主题的文档，修改 _config.yml ( 包括网站的和主题的 )</p>\n</li>\n<li><p>生成网页并且 开启 server 调试下，然后自己不满意的地方，手动改改模版。</p>\n</li>\n</ul>\n<h4 id=\"管理源代码\"><a href=\"#管理源代码\" class=\"headerlink\" title=\"管理源代码\"></a>管理源代码</h4><p>经某人提醒，我的源代码没有管理，所以又开了一个库用来管理这一整套的源代码。然后想直接在主页面上展示博客首页就好了，于是将 branch 变成了 master。 再次生成，deploy。</p>\n<h4 id=\"部署到自己的域名上\"><a href=\"#部署到自己的域名上\" class=\"headerlink\" title=\"部署到自己的域名上\"></a>部署到自己的域名上</h4><ul>\n<li><p>因为，如果直接将我的域名，解析道 git 的这个网页的话，要改 CNAME (  只能有一个 )，而我的邮箱还是指向原来服务器的，感觉不太好，于是就保持原来的方式了。直接将静态文件 copy 到服务器下保存。</p>\n</li>\n<li><p>用了一套简单的 CI 系统，将 GitHub 设置成有新的 push 的时候发消息给 CI, CI 自动 pull 下来代码，然后测试，到服务器指定的文件夹里。</p>\n</li>\n</ul>\n<p>到这，基本上就结束了。当然，我觉得，我会没事改改这个 theme 的代码的～～</p>\n<h4 id=\"hexo-部分指令\"><a href=\"#hexo-部分指令\" class=\"headerlink\" title=\"hexo 部分指令\"></a>hexo 部分指令</h4><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>简写</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hexo new “postName”</td>\n<td>hexo n “postName”</td>\n<td>#新建文章</td>\n</tr>\n<tr>\n<td>hexo new page “pageName”</td>\n<td>hexo n  page “postName”</td>\n<td>#新建页面</td>\n</tr>\n<tr>\n<td>hexo generate</td>\n<td>hexo g</td>\n<td>#生成静态页面至public目录</td>\n</tr>\n<tr>\n<td>hexo server</td>\n<td>hexo s</td>\n<td>#开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</td>\n</tr>\n<tr>\n<td>hexo deploy</td>\n<td>hexo d</td>\n<td>#将.deploy目录部署到GitHub</td>\n</tr>\n<tr>\n<td>hexo help</td>\n<td>\\</td>\n<td># 查看帮助</td>\n</tr>\n<tr>\n<td>hexo version</td>\n<td>\\</td>\n<td>#查看Hexo的版本</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>参考 :</p>\n<p><a href=\"https://xuanwo.org/2014/08/14/hexo-usual-problem/#Deploy之后，页面长时间404\" target=\"_blank\" rel=\"external\">Hexo常见问题解决方案</a></p>\n<p><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"external\">Hexo 文档</a></p>\n<p><a href=\"http://www.cnblogs.com/zhcncn/p/4097881.html\" target=\"_blank\" rel=\"external\">Hexo搭建Github静态博客</a></p>\n</blockquote>\n","excerpt":"<h4 id=\"hexo-基础搭建\"><a href=\"#hexo-基础搭建\" class=\"headerlink\" title=\"hexo 基础搭建\"></a>hexo 基础搭建</h4><ul>\n<li><p>安装 hexo</p>\n<p>  $ npm install -g hexo-cli</p>\n</li>\n<li><p>随便建一个目录</p>\n<p>  mkdir hexo_test</p>\n</li>\n<li><p>初始化文件夹 ( 在hexo_test 外面 )</p>\n<p>  hexo init hexo_test</p>\n</li>\n<li><p>进入 hexo_test</p>\n<p>  cd hexo_test</p>\n</li>\n<li><p>npm 初始化</p>\n<p>  npm install</p>\n</li>\n<li><p>然后就可以看到有许多文件夹</p>\n</li>\n</ul>","more":"<ul>\n<li><p>生成静态页面</p>\n<ul>\n<li><p>hexo generate（hexo g也可以）</p>\n</li>\n<li><p>在 public 某个目录里( 默认是现在的时间) 有一个新生成的 yourpostname.html 文件。</p>\n</li>\n</ul>\n</li>\n<li><p>启动本地服务，进行文章预览调试</p>\n<p>  hexo server</p>\n</li>\n<li><p>打开 <a href=\"http://localhost:4000\">http://localhost:4000</a></p>\n</li>\n<li><p>注意 ！ 这里我有个错误提示</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;[Error: Cannot find module <span class=\"string\">'./build/Release/DTraceProviderBindings'</span>] code: <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;</div><div class=\"line\">&#123;[Error: Cannot find module <span class=\"string\">'./build/default/DTraceProviderBindings'</span>] code: <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;</div><div class=\"line\">&#123;[Error: Cannot find module <span class=\"string\">'./build/Debug/DTraceProviderBindings'</span>] code: <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;</div></pre></td></tr></table></figure>\n<p>先查到用这个 npm install hexo –no-optional,<br>但是对我没用</p>\n<p><strong>(至今还未解决)</strong></p>\n<ul>\n<li><p>新添加一篇 post</p>\n<ul>\n<li><p>hexo new “Hey”</p>\n</li>\n<li><p>在 hexo_test/source/_post 中生成 一个为 Hey.md 的文件。</p>\n</li>\n</ul>\n</li>\n<li><p>如果你没有起 server 的话，可能需要执行 hexo generate 来生成静态页面</p>\n</li>\n<li><p>再去刷新一下页面，发现页面上新增了 Hey 这个 post，但是没有内容。</p>\n</li>\n<li><p>进入source/_post/Hey.md 你就可以编辑这篇文章的内容了</p>\n<ul>\n<li>然后保存， 你就可以在网页中看到你文章的内容了</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"部署到-github-io-上\"><a href=\"#部署到-github-io-上\" class=\"headerlink\" title=\"部署到 github.io 上\"></a>部署到 github.io 上</h4><ul>\n<li><p>在根目录下找到 _config.yml 文件, 并打开</p>\n</li>\n<li><p>找到 这部分(在最后)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type:</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改上述地方</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repository: git@github.com:vivian-xu/vivian-xu.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<h5 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意!\"></a>注意!</h5><ul>\n<li>repository：必须是SSH形式的url (如上)，而不能是HTTPS形式的url（<a href=\"https://github.com/***/***.github.io.git），\">https://github.com/***/***.github.io.git），</a></li>\n<li>如果你使用SSH url，但是电脑没有开放SSH 端口，会致部署失败。</li>\n<li><p>如果你是为一个项目制作网站，那么需要把branch设置为gh-pages。 ( <strong>看到这个，我把我的 branch 改成 gh-pages了</strong> )</p>\n<ul>\n<li>然后 hexo deploy</li>\n</ul>\n<h5 id=\"报错-ERROR-Deployer-not-found-git\"><a href=\"#报错-ERROR-Deployer-not-found-git\" class=\"headerlink\" title=\"报错 ERROR Deployer not found: git\"></a>报错 ERROR Deployer not found: git</h5><p>解决方法： npm install hexo-deployer-git –save</p>\n</li>\n<li><p>hexo deploy  成功！</p>\n</li>\n<li><p>然后我去 github 我的 vivian-xu.github.io.git 的仓库里切换了，分支看了一下，有传进来的！</p>\n</li>\n<li><p>然后我去访问 vivian-xu.github.io.git/hexo_test/</p>\n<p>结果 404 ….</p>\n<p>于是我在网上搜索问题, 先是找 gh-pages 相关，但是没解决我问题。之后我又去 git 仓库看了下，确保没有什么问题，看着我的 gh-pages 分支，很是疑惑，东西都在，怎么能访问不了。</p>\n<p>看着 gh-pages 我有些疑虑文档里所说的 gh-pages 名字是我建的 文件夹名么。。。 我的文件夹在本地，而且文件夹名没有一起更新到 github 的 vivian-xu.github.io 的 gh-pages 中，github 怎么会知道我的文件夹名。。</p>\n<p>然后我在 hexo 的 <a href=\"https://github.com/hexojs/hexo/issues/350\">这个issue</a> 里看到回答。</p>\n</li>\n</ul>\n<blockquote><p><em>yourname.github.io形式的库，会解析master分支；而别的名字的库，会解析gh-pages分支，以yourname.github.io/库名的形式访问。 </em></p>\n</blockquote>\n<p>  这个更加让我相信是名字的问题，于是，我重新建了一个库，然后把 _config.yml 的 git 相关的文件改了</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">type: git</div><div class=\"line\">repository: git@github.com:vivian-xu/hexo_test.git // 新库地址</div><div class=\"line\">branch: gh-pages</div></pre></td></tr></table></figure>\n<ul>\n<li><p>然后重新生成，deploy，检查了下新的 git 的仓库确保文件传了进去</p>\n</li>\n<li><p>之后打开 vivian-xu.github.io/hexo_test/  已经不再是 404 了！但是。为什么没有样式。。</p>\n</li>\n<li><p>打开 chorme 的调试工具，发现 css js 的路径都不对( 类似这样的 <a href=\"https://vivian-xu.github.io/fancybox/jquery.fancybox.css\">https://vivian-xu.github.io/fancybox/jquery.fancybox.css</a> )，应该是 <a href=\"https://vivian-xu.github.io/hexo_test/***\">https://vivian-xu.github.io/hexo_test/***</a> 。于是，又去看了 issue ，看到这个 <a href=\"https://github.com/hexojs/hexo/issues/1121\">https://github.com/hexojs/hexo/issues/1121</a></p>\n<p>意识到自己要配 root ( 自己的网站还要配 CNAME )</p>\n<p>于是又修改了 _config.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">url: http://yoursite.com</div><div class=\"line\">root: /hexo_test/</div><div class=\"line\">permalink: :year/:month/:day/:title/</div><div class=\"line\">permalink_defaults:</div></pre></td></tr></table></figure>\n</li>\n<li><p>再次 hexo g -d ，打开页面 终于成功了！！</p>\n<p>现在是这个样子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Hexo Configuration</div><div class=\"line\">## Docs: https://hexo.io/docs/configuration.html</div><div class=\"line\">## Source: https://github.com/hexojs/hexo/</div><div class=\"line\"></div><div class=\"line\"># Site 站点</div><div class=\"line\">title: Vivian</div><div class=\"line\">subtitle:</div><div class=\"line\">description: Vvian&apos;s blog</div><div class=\"line\">keywords:</div><div class=\"line\">  - HTML</div><div class=\"line\">  - JavaScript</div><div class=\"line\">  - CSS</div><div class=\"line\">  - React</div><div class=\"line\">author: Vivian</div><div class=\"line\">language: zh-CN #语言</div><div class=\"line\">timezone: Asia/Shanghai #时区</div><div class=\"line\"></div><div class=\"line\"># URL</div><div class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class=\"line\">url: http://yoursite.com #用于绑定域名, 其他的不需要配置</div><div class=\"line\">root: /hexo_test/</div><div class=\"line\">permalink: :year/:month/:day/:title/</div><div class=\"line\">permalink_defaults:</div><div class=\"line\"></div><div class=\"line\"># Directory</div><div class=\"line\">source_dir: source</div><div class=\"line\">public_dir: public</div><div class=\"line\">tag_dir: tags #标签</div><div class=\"line\">archive_dir: archives  #归档</div><div class=\"line\">category_dir: categories #分类</div><div class=\"line\">code_dir: downloads/code</div><div class=\"line\">i18n_dir: :lang</div><div class=\"line\">skip_render:</div><div class=\"line\"></div><div class=\"line\"># Writing</div><div class=\"line\">new_post_name: :title.md # File name of new posts</div><div class=\"line\">default_layout: post #默认模板(post page photo draft)</div><div class=\"line\">titlecase: false # Transform title into titlecase  #标题转换成大写</div><div class=\"line\">external_link: true # Open external links in new tab #新标签页里打开连接</div><div class=\"line\">filename_case: 0</div><div class=\"line\">render_drafts: false</div><div class=\"line\">post_asset_folder: false</div><div class=\"line\">relative_link: false</div><div class=\"line\">future: true</div><div class=\"line\">highlight:  #语法高亮</div><div class=\"line\">  enable: true</div><div class=\"line\">  line_number: true #显示行号</div><div class=\"line\">  auto_detect: false</div><div class=\"line\">  tab_replace:</div><div class=\"line\"></div><div class=\"line\"># Category &amp; Tag</div><div class=\"line\">default_category: uncategorized #默认分类</div><div class=\"line\">category_map:</div><div class=\"line\">tag_map:</div><div class=\"line\"></div><div class=\"line\"># Date / Time format</div><div class=\"line\">## Hexo uses Moment.js to parse and display date</div><div class=\"line\">## You can customize the date format as defined in</div><div class=\"line\">## http://momentjs.com/docs/#/displaying/format/</div><div class=\"line\">date_format: YYYY-MM-DD</div><div class=\"line\">time_format: HH:mm:ss</div><div class=\"line\"></div><div class=\"line\"># Pagination</div><div class=\"line\">## Set per_page to 0 to disable pagination</div><div class=\"line\">per_page: 10</div><div class=\"line\">pagination_dir: page</div><div class=\"line\"></div><div class=\"line\"># Extensions</div><div class=\"line\">## Plugins: https://hexo.io/plugins/</div><div class=\"line\">## Themes: https://hexo.io/themes/</div><div class=\"line\">theme: landscape</div><div class=\"line\"># theme: ninja</div><div class=\"line\"></div><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  # repository: git@github.com:vivian-xu/vivian-xu.github.io.git</div><div class=\"line\">  repository: git@github.com:vivian-xu/blog.git</div><div class=\"line\">  branch: gh-pages</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"theme-主题\"><a href=\"#theme-主题\" class=\"headerlink\" title=\"theme 主题\"></a>theme 主题</h4><ul>\n<li><p>挑选一个喜欢的 theme, git clone theme/ theme_name 下</p>\n</li>\n<li><p>将网站的 _config.yml 的 theme 改成你要的换的主题的名字</p>\n</li>\n<li><p>根据主题的文档，修改 _config.yml ( 包括网站的和主题的 )</p>\n</li>\n<li><p>生成网页并且 开启 server 调试下，然后自己不满意的地方，手动改改模版。</p>\n</li>\n</ul>\n<h4 id=\"管理源代码\"><a href=\"#管理源代码\" class=\"headerlink\" title=\"管理源代码\"></a>管理源代码</h4><p>经某人提醒，我的源代码没有管理，所以又开了一个库用来管理这一整套的源代码。然后想直接在主页面上展示博客首页就好了，于是将 branch 变成了 master。 再次生成，deploy。</p>\n<h4 id=\"部署到自己的域名上\"><a href=\"#部署到自己的域名上\" class=\"headerlink\" title=\"部署到自己的域名上\"></a>部署到自己的域名上</h4><ul>\n<li><p>因为，如果直接将我的域名，解析道 git 的这个网页的话，要改 CNAME (  只能有一个 )，而我的邮箱还是指向原来服务器的，感觉不太好，于是就保持原来的方式了。直接将静态文件 copy 到服务器下保存。</p>\n</li>\n<li><p>用了一套简单的 CI 系统，将 GitHub 设置成有新的 push 的时候发消息给 CI, CI 自动 pull 下来代码，然后测试，到服务器指定的文件夹里。</p>\n</li>\n</ul>\n<p>到这，基本上就结束了。当然，我觉得，我会没事改改这个 theme 的代码的～～</p>\n<h4 id=\"hexo-部分指令\"><a href=\"#hexo-部分指令\" class=\"headerlink\" title=\"hexo 部分指令\"></a>hexo 部分指令</h4><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>简写</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hexo new “postName”</td>\n<td>hexo n “postName”</td>\n<td>#新建文章</td>\n</tr>\n<tr>\n<td>hexo new page “pageName”</td>\n<td>hexo n  page “postName”</td>\n<td>#新建页面</td>\n</tr>\n<tr>\n<td>hexo generate</td>\n<td>hexo g</td>\n<td>#生成静态页面至public目录</td>\n</tr>\n<tr>\n<td>hexo server</td>\n<td>hexo s</td>\n<td>#开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</td>\n</tr>\n<tr>\n<td>hexo deploy</td>\n<td>hexo d</td>\n<td>#将.deploy目录部署到GitHub</td>\n</tr>\n<tr>\n<td>hexo help</td>\n<td>\\</td>\n<td># 查看帮助</td>\n</tr>\n<tr>\n<td>hexo version</td>\n<td>\\</td>\n<td>#查看Hexo的版本</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>参考 :</p>\n<p><a href=\"https://xuanwo.org/2014/08/14/hexo-usual-problem/#Deploy之后，页面长时间404\">Hexo常见问题解决方案</a></p>\n<p><a href=\"https://hexo.io/zh-cn/docs/\">Hexo 文档</a></p>\n<p><a href=\"http://www.cnblogs.com/zhcncn/p/4097881.html\">Hexo搭建Github静态博客</a></p>\n</blockquote>"},{"title":"折叠外边距 ( Collapsing margins )","auto_spacing":true,"_content":"\n大概一年前看过的知识，如今已经忘得一干二净，重新再来一遍！\n\n#### 基本定义\n\n在 CSS, __毗邻__ 的 2+ 个盒子 ( 不一定是兄弟元素 ) 的 margins 会合并成一个 Margin。Margins 的这种合并行为被称作 collapse, 产生的这个合并了的外边距被称为折叠外边距 (collapsed margin)。\n\n\n#### 什么是相邻的盒子 ( 两点 )\n\n- 这两个或多个外边距没有被非空内容、padding、border 或 clear 分隔开 ( 形成间隙 )。( 一种是嵌套，一种是平行 )\n\n如下图：\n\n  - Box-1 , Box-2 嵌套，相邻\n  - Box-1 , Box-3 平行，相邻\n\n![](http://img.jackon.me/margins1.png)\n\nhtml 代码\n```\n// html 代码\n// Box-1 , Box-2 嵌套\n<div style=\"width: 150px; height: 150px; border: 5px solid red; border-top: none; margin: 40px 0; background: blue; color: #fff; font-size: 20px;\" >\n  <div style=\" width: 100px; height: 100px; background: yellow; margin-top: 15px; color: #000;\" >\n    Box-2\n  </div>\n  Box-1\n</div>\n\n// Box-1 Box-3 平行\n<div style=\"width: 100px; height: 100px; background-color: lightblue; margin: 40px 0; font-size: 20px;\" >\n  Box-3\n</div>\n```\n---\nNOTE: clearance  ( 间隙 )\n\n当浮动元素之后的元素设置clear以闭合相关方向的浮动时，根据w3c规范规定，闭合浮动的元素会在其margin-top以上产生一定的空隙（clearance），该空隙会阻止元素margin-top的折叠，并作为间距存在于元素的margin-top的上方。\n--- \n- 这些 margin 都处于 __普通流__中。 ( 1. 非浮动元素 2. 非绝对定位元素 )\n\n\n#### 哪些会发生 margin 折叠\n\n- 元素自身的 __margin-bottom__ 和 __margin-top__ __相邻__时也会折叠\n\n- __两个或多个 毗邻的普通流中__的 __块元素垂直方向__上的 margin 会折叠\n\n  要点：\n\n  + 两个或多个 （数量必须是大于一）\n\n  + 必须是块元素\n\n  + 只能是垂直方向\n\nNOTE: 在没有被分隔开的情况下，一个元素的 margin-top 会和它普通流中的第一个子元素(非浮动元素等)的 margin-top 相邻； 只有在父元素的 height 是 \"__auto__\" 的情况下，它的 margin-bottom 才会和它普通流中的最后一个子元素(非浮动元素等)的 margin-bottom 相邻。\n\n#### 哪些不会发生 margin 折叠\n\n- 创建 BFC 的元素，不与其子元素发生 margin 折叠\n\n- 浮动元素，绝对定位元素不与任何元素发生 margin 折叠 ( 不在普通流，创建 BFC )\n\n- inline-block 元素，不与任何元素发生 margin 折叠  ( 不是 块级盒子  block-level box )\n\n#### 结果\n\n- 两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值。 (  __+ +__  取大)\n\n- 两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。 ( __- -__  取绝对值大的 )\n\n- 两个外边距一正一负时，折叠结果是两者的相加的和。( - + 相加 )\n\n\n{% blockquote %}\n\n参考：\n\n[W3help:KB006: CSS 框模型( Box module )](http://w3help.org/zh-cn/kb/006/)\n\n[KB010: 常规流( Normal flow )](http://w3help.org/zh-cn/kb/010/)\n\n{% endblockquote %}\n","source":"_posts/margin collaspe.md","raw":"---\ntitle: 折叠外边距 ( Collapsing margins )\ncategories:\n- 编程\ntags:\n- 抄抄抄\n- CSS 布局\n- margin\nauto_spacing: true\n---\n\n大概一年前看过的知识，如今已经忘得一干二净，重新再来一遍！\n\n#### 基本定义\n\n在 CSS, __毗邻__ 的 2+ 个盒子 ( 不一定是兄弟元素 ) 的 margins 会合并成一个 Margin。Margins 的这种合并行为被称作 collapse, 产生的这个合并了的外边距被称为折叠外边距 (collapsed margin)。\n\n\n#### 什么是相邻的盒子 ( 两点 )\n\n- 这两个或多个外边距没有被非空内容、padding、border 或 clear 分隔开 ( 形成间隙 )。( 一种是嵌套，一种是平行 )\n\n如下图：\n\n  - Box-1 , Box-2 嵌套，相邻\n  - Box-1 , Box-3 平行，相邻\n\n![](http://img.jackon.me/margins1.png)\n\nhtml 代码\n```\n// html 代码\n// Box-1 , Box-2 嵌套\n<div style=\"width: 150px; height: 150px; border: 5px solid red; border-top: none; margin: 40px 0; background: blue; color: #fff; font-size: 20px;\" >\n  <div style=\" width: 100px; height: 100px; background: yellow; margin-top: 15px; color: #000;\" >\n    Box-2\n  </div>\n  Box-1\n</div>\n\n// Box-1 Box-3 平行\n<div style=\"width: 100px; height: 100px; background-color: lightblue; margin: 40px 0; font-size: 20px;\" >\n  Box-3\n</div>\n```\n---\nNOTE: clearance  ( 间隙 )\n\n当浮动元素之后的元素设置clear以闭合相关方向的浮动时，根据w3c规范规定，闭合浮动的元素会在其margin-top以上产生一定的空隙（clearance），该空隙会阻止元素margin-top的折叠，并作为间距存在于元素的margin-top的上方。\n--- \n- 这些 margin 都处于 __普通流__中。 ( 1. 非浮动元素 2. 非绝对定位元素 )\n\n\n#### 哪些会发生 margin 折叠\n\n- 元素自身的 __margin-bottom__ 和 __margin-top__ __相邻__时也会折叠\n\n- __两个或多个 毗邻的普通流中__的 __块元素垂直方向__上的 margin 会折叠\n\n  要点：\n\n  + 两个或多个 （数量必须是大于一）\n\n  + 必须是块元素\n\n  + 只能是垂直方向\n\nNOTE: 在没有被分隔开的情况下，一个元素的 margin-top 会和它普通流中的第一个子元素(非浮动元素等)的 margin-top 相邻； 只有在父元素的 height 是 \"__auto__\" 的情况下，它的 margin-bottom 才会和它普通流中的最后一个子元素(非浮动元素等)的 margin-bottom 相邻。\n\n#### 哪些不会发生 margin 折叠\n\n- 创建 BFC 的元素，不与其子元素发生 margin 折叠\n\n- 浮动元素，绝对定位元素不与任何元素发生 margin 折叠 ( 不在普通流，创建 BFC )\n\n- inline-block 元素，不与任何元素发生 margin 折叠  ( 不是 块级盒子  block-level box )\n\n#### 结果\n\n- 两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值。 (  __+ +__  取大)\n\n- 两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。 ( __- -__  取绝对值大的 )\n\n- 两个外边距一正一负时，折叠结果是两者的相加的和。( - + 相加 )\n\n\n{% blockquote %}\n\n参考：\n\n[W3help:KB006: CSS 框模型( Box module )](http://w3help.org/zh-cn/kb/006/)\n\n[KB010: 常规流( Normal flow )](http://w3help.org/zh-cn/kb/010/)\n\n{% endblockquote %}\n","slug":"margin collaspe","published":1,"date":"2016-12-11T07:57:56.000Z","updated":"2016-12-11T14:03:23.000Z","_id":"ciwkdsbcm0007k2ra2bdm3z67","comments":1,"layout":"post","photos":[],"link":"","content":"<p>大概一年前看过的知识，如今已经忘得一干二净，重新再来一遍！</p>\n<h4 id=\"基本定义\"><a href=\"#基本定义\" class=\"headerlink\" title=\"基本定义\"></a>基本定义</h4><p>在 CSS, <strong>毗邻</strong> 的 2+ 个盒子 ( 不一定是兄弟元素 ) 的 margins 会合并成一个 Margin。Margins 的这种合并行为被称作 collapse, 产生的这个合并了的外边距被称为折叠外边距 (collapsed margin)。</p>\n<h4 id=\"什么是相邻的盒子-两点\"><a href=\"#什么是相邻的盒子-两点\" class=\"headerlink\" title=\"什么是相邻的盒子 ( 两点 )\"></a>什么是相邻的盒子 ( 两点 )</h4><ul>\n<li>这两个或多个外边距没有被非空内容、padding、border 或 clear 分隔开 ( 形成间隙 )。( 一种是嵌套，一种是平行 )</li>\n</ul>\n<p>如下图：</p>\n<ul>\n<li>Box-1 , Box-2 嵌套，相邻</li>\n<li>Box-1 , Box-3 平行，相邻</li>\n</ul>\n<p><img src=\"http://img.jackon.me/margins1.png\" alt=\"\"></p>\n<p>html 代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html 代码</div><div class=\"line\">// Box-1 , Box-2 嵌套</div><div class=\"line\">&lt;div style=&quot;width: 150px; height: 150px; border: 5px solid red; border-top: none; margin: 40px 0; background: blue; color: #fff; font-size: 20px;&quot; &gt;</div><div class=\"line\">  &lt;div style=&quot; width: 100px; height: 100px; background: yellow; margin-top: 15px; color: #000;&quot; &gt;</div><div class=\"line\">    Box-2</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  Box-1</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">// Box-1 Box-3 平行</div><div class=\"line\">&lt;div style=&quot;width: 100px; height: 100px; background-color: lightblue; margin: 40px 0; font-size: 20px;&quot; &gt;</div><div class=\"line\">  Box-3</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<hr>\n<p>NOTE: clearance  ( 间隙 )</p>\n<h2 id=\"当浮动元素之后的元素设置clear以闭合相关方向的浮动时，根据w3c规范规定，闭合浮动的元素会在其margin-top以上产生一定的空隙（clearance），该空隙会阻止元素margin-top的折叠，并作为间距存在于元素的margin-top的上方。\"><a href=\"#当浮动元素之后的元素设置clear以闭合相关方向的浮动时，根据w3c规范规定，闭合浮动的元素会在其margin-top以上产生一定的空隙（clearance），该空隙会阻止元素margin-top的折叠，并作为间距存在于元素的margin-top的上方。\" class=\"headerlink\" title=\"当浮动元素之后的元素设置clear以闭合相关方向的浮动时，根据w3c规范规定，闭合浮动的元素会在其margin-top以上产生一定的空隙（clearance），该空隙会阻止元素margin-top的折叠，并作为间距存在于元素的margin-top的上方。\"></a>当浮动元素之后的元素设置clear以闭合相关方向的浮动时，根据w3c规范规定，闭合浮动的元素会在其margin-top以上产生一定的空隙（clearance），该空隙会阻止元素margin-top的折叠，并作为间距存在于元素的margin-top的上方。</h2><ul>\n<li>这些 margin 都处于 <strong>普通流</strong>中。 ( 1. 非浮动元素 2. 非绝对定位元素 )</li>\n</ul>\n<h4 id=\"哪些会发生-margin-折叠\"><a href=\"#哪些会发生-margin-折叠\" class=\"headerlink\" title=\"哪些会发生 margin 折叠\"></a>哪些会发生 margin 折叠</h4><ul>\n<li><p>元素自身的 <strong>margin-bottom</strong> 和 <strong>margin-top</strong> <strong>相邻</strong>时也会折叠</p>\n</li>\n<li><p><strong>两个或多个 毗邻的普通流中</strong>的 <strong>块元素垂直方向</strong>上的 margin 会折叠</p>\n<p>要点：</p>\n<ul>\n<li><p>两个或多个 （数量必须是大于一）</p>\n</li>\n<li><p>必须是块元素</p>\n</li>\n<li><p>只能是垂直方向</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>NOTE: 在没有被分隔开的情况下，一个元素的 margin-top 会和它普通流中的第一个子元素(非浮动元素等)的 margin-top 相邻； 只有在父元素的 height 是 “<strong>auto</strong>“ 的情况下，它的 margin-bottom 才会和它普通流中的最后一个子元素(非浮动元素等)的 margin-bottom 相邻。</p>\n<h4 id=\"哪些不会发生-margin-折叠\"><a href=\"#哪些不会发生-margin-折叠\" class=\"headerlink\" title=\"哪些不会发生 margin 折叠\"></a>哪些不会发生 margin 折叠</h4><ul>\n<li><p>创建 BFC 的元素，不与其子元素发生 margin 折叠</p>\n</li>\n<li><p>浮动元素，绝对定位元素不与任何元素发生 margin 折叠 ( 不在普通流，创建 BFC )</p>\n</li>\n<li><p>inline-block 元素，不与任何元素发生 margin 折叠  ( 不是 块级盒子  block-level box )</p>\n</li>\n</ul>\n<h4 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h4><ul>\n<li><p>两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值。 (  <strong>+ +</strong>  取大)</p>\n</li>\n<li><p>两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。 ( <strong>- -</strong>  取绝对值大的 )</p>\n</li>\n<li><p>两个外边距一正一负时，折叠结果是两者的相加的和。( - + 相加 )</p>\n</li>\n</ul>\n<blockquote><p>参考：</p>\n<p><a href=\"http://w3help.org/zh-cn/kb/006/\" target=\"_blank\" rel=\"external\">W3help:KB006: CSS 框模型( Box module )</a></p>\n<p><a href=\"http://w3help.org/zh-cn/kb/010/\" target=\"_blank\" rel=\"external\">KB010: 常规流( Normal flow )</a></p>\n</blockquote>\n","excerpt":"","more":"<p>大概一年前看过的知识，如今已经忘得一干二净，重新再来一遍！</p>\n<h4 id=\"基本定义\"><a href=\"#基本定义\" class=\"headerlink\" title=\"基本定义\"></a>基本定义</h4><p>在 CSS, <strong>毗邻</strong> 的 2+ 个盒子 ( 不一定是兄弟元素 ) 的 margins 会合并成一个 Margin。Margins 的这种合并行为被称作 collapse, 产生的这个合并了的外边距被称为折叠外边距 (collapsed margin)。</p>\n<h4 id=\"什么是相邻的盒子-两点\"><a href=\"#什么是相邻的盒子-两点\" class=\"headerlink\" title=\"什么是相邻的盒子 ( 两点 )\"></a>什么是相邻的盒子 ( 两点 )</h4><ul>\n<li>这两个或多个外边距没有被非空内容、padding、border 或 clear 分隔开 ( 形成间隙 )。( 一种是嵌套，一种是平行 )</li>\n</ul>\n<p>如下图：</p>\n<ul>\n<li>Box-1 , Box-2 嵌套，相邻</li>\n<li>Box-1 , Box-3 平行，相邻</li>\n</ul>\n<p><img src=\"http://img.jackon.me/margins1.png\" alt=\"\"></p>\n<p>html 代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">// html 代码</div><div class=\"line\">// Box-1 , Box-2 嵌套</div><div class=\"line\">&lt;div style=&quot;width: 150px; height: 150px; border: 5px solid red; border-top: none; margin: 40px 0; background: blue; color: #fff; font-size: 20px;&quot; &gt;</div><div class=\"line\">  &lt;div style=&quot; width: 100px; height: 100px; background: yellow; margin-top: 15px; color: #000;&quot; &gt;</div><div class=\"line\">    Box-2</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  Box-1</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">// Box-1 Box-3 平行</div><div class=\"line\">&lt;div style=&quot;width: 100px; height: 100px; background-color: lightblue; margin: 40px 0; font-size: 20px;&quot; &gt;</div><div class=\"line\">  Box-3</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<hr>\n<p>NOTE: clearance  ( 间隙 )</p>\n<h2 id=\"当浮动元素之后的元素设置clear以闭合相关方向的浮动时，根据w3c规范规定，闭合浮动的元素会在其margin-top以上产生一定的空隙（clearance），该空隙会阻止元素margin-top的折叠，并作为间距存在于元素的margin-top的上方。\"><a href=\"#当浮动元素之后的元素设置clear以闭合相关方向的浮动时，根据w3c规范规定，闭合浮动的元素会在其margin-top以上产生一定的空隙（clearance），该空隙会阻止元素margin-top的折叠，并作为间距存在于元素的margin-top的上方。\" class=\"headerlink\" title=\"当浮动元素之后的元素设置clear以闭合相关方向的浮动时，根据w3c规范规定，闭合浮动的元素会在其margin-top以上产生一定的空隙（clearance），该空隙会阻止元素margin-top的折叠，并作为间距存在于元素的margin-top的上方。\"></a>当浮动元素之后的元素设置clear以闭合相关方向的浮动时，根据w3c规范规定，闭合浮动的元素会在其margin-top以上产生一定的空隙（clearance），该空隙会阻止元素margin-top的折叠，并作为间距存在于元素的margin-top的上方。</h2><ul>\n<li>这些 margin 都处于 <strong>普通流</strong>中。 ( 1. 非浮动元素 2. 非绝对定位元素 )</li>\n</ul>\n<h4 id=\"哪些会发生-margin-折叠\"><a href=\"#哪些会发生-margin-折叠\" class=\"headerlink\" title=\"哪些会发生 margin 折叠\"></a>哪些会发生 margin 折叠</h4><ul>\n<li><p>元素自身的 <strong>margin-bottom</strong> 和 <strong>margin-top</strong> <strong>相邻</strong>时也会折叠</p>\n</li>\n<li><p><strong>两个或多个 毗邻的普通流中</strong>的 <strong>块元素垂直方向</strong>上的 margin 会折叠</p>\n<p>要点：</p>\n<ul>\n<li><p>两个或多个 （数量必须是大于一）</p>\n</li>\n<li><p>必须是块元素</p>\n</li>\n<li><p>只能是垂直方向</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>NOTE: 在没有被分隔开的情况下，一个元素的 margin-top 会和它普通流中的第一个子元素(非浮动元素等)的 margin-top 相邻； 只有在父元素的 height 是 “<strong>auto</strong>“ 的情况下，它的 margin-bottom 才会和它普通流中的最后一个子元素(非浮动元素等)的 margin-bottom 相邻。</p>\n<h4 id=\"哪些不会发生-margin-折叠\"><a href=\"#哪些不会发生-margin-折叠\" class=\"headerlink\" title=\"哪些不会发生 margin 折叠\"></a>哪些不会发生 margin 折叠</h4><ul>\n<li><p>创建 BFC 的元素，不与其子元素发生 margin 折叠</p>\n</li>\n<li><p>浮动元素，绝对定位元素不与任何元素发生 margin 折叠 ( 不在普通流，创建 BFC )</p>\n</li>\n<li><p>inline-block 元素，不与任何元素发生 margin 折叠  ( 不是 块级盒子  block-level box )</p>\n</li>\n</ul>\n<h4 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h4><ul>\n<li><p>两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值。 (  <strong>+ +</strong>  取大)</p>\n</li>\n<li><p>两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。 ( <strong>- -</strong>  取绝对值大的 )</p>\n</li>\n<li><p>两个外边距一正一负时，折叠结果是两者的相加的和。( - + 相加 )</p>\n</li>\n</ul>\n<blockquote><p>参考：</p>\n<p><a href=\"http://w3help.org/zh-cn/kb/006/\">W3help:KB006: CSS 框模型( Box module )</a></p>\n<p><a href=\"http://w3help.org/zh-cn/kb/010/\">KB010: 常规流( Normal flow )</a></p>\n</blockquote>\n"},{"_content":"float 元素\n\n影响 inline 元素，\n不影响 block 元素\n\n![](http://img.jackon.me/float.png)\n\nfloat 阻挡了 inline 但却没有阻挡 block\n\n```\n<div style=\"float:left; width: 80px; height: 100px; background-color: lightcoral; margin: 40px 0; font-size: 20px;\">\n  float\n</div>\n\n<!--   Box-3 -->\n<div style=\"width: 100px; height: 100px; background-color: lightblue; margin: 40px 0; font-size: 20px;\" >\n  <div style=\"background-color: teal; width: 90px; height: 50px; color: #fff; \" > </div>\n  <span style=\"background-color: #47cf73; padding: 5px; font-size: 12px;\" >Box-3 inner inline span</span>\n</div>\n\n```\n","source":"_drafts/float.md","raw":"float 元素\n\n影响 inline 元素，\n不影响 block 元素\n\n![](http://img.jackon.me/float.png)\n\nfloat 阻挡了 inline 但却没有阻挡 block\n\n```\n<div style=\"float:left; width: 80px; height: 100px; background-color: lightcoral; margin: 40px 0; font-size: 20px;\">\n  float\n</div>\n\n<!--   Box-3 -->\n<div style=\"width: 100px; height: 100px; background-color: lightblue; margin: 40px 0; font-size: 20px;\" >\n  <div style=\"background-color: teal; width: 90px; height: 50px; color: #fff; \" > </div>\n  <span style=\"background-color: #47cf73; padding: 5px; font-size: 12px;\" >Box-3 inner inline span</span>\n</div>\n\n```\n","slug":"float","published":0,"date":"2016-12-11T08:39:40.000Z","updated":"2016-12-11T09:01:10.000Z","_id":"ciwkegbmh000ck2ragz3ctvkb","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<p>float 元素</p>\n<p>影响 inline 元素，<br>不影响 block 元素</p>\n<p><img src=\"http://img.jackon.me/float.png\" alt=\"\"></p>\n<p>float 阻挡了 inline 但却没有阻挡 block</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div style=&quot;float:left; width: 80px; height: 100px; background-color: lightcoral; margin: 40px 0; font-size: 20px;&quot;&gt;</div><div class=\"line\">  float</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!--   Box-3 --&gt;</div><div class=\"line\">&lt;div style=&quot;width: 100px; height: 100px; background-color: lightblue; margin: 40px 0; font-size: 20px;&quot; &gt;</div><div class=\"line\">  &lt;div style=&quot;background-color: teal; width: 90px; height: 50px; color: #fff; &quot; &gt; &lt;/div&gt;</div><div class=\"line\">  &lt;span style=&quot;background-color: #47cf73; padding: 5px; font-size: 12px;&quot; &gt;Box-3 inner inline span&lt;/span&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>float 元素</p>\n<p>影响 inline 元素，<br>不影响 block 元素</p>\n<p><img src=\"http://img.jackon.me/float.png\" alt=\"\"></p>\n<p>float 阻挡了 inline 但却没有阻挡 block</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div style=&quot;float:left; width: 80px; height: 100px; background-color: lightcoral; margin: 40px 0; font-size: 20px;&quot;&gt;</div><div class=\"line\">  float</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!--   Box-3 --&gt;</div><div class=\"line\">&lt;div style=&quot;width: 100px; height: 100px; background-color: lightblue; margin: 40px 0; font-size: 20px;&quot; &gt;</div><div class=\"line\">  &lt;div style=&quot;background-color: teal; width: 90px; height: 50px; color: #fff; &quot; &gt; &lt;/div&gt;</div><div class=\"line\">  &lt;span style=&quot;background-color: #47cf73; padding: 5px; font-size: 12px;&quot; &gt;Box-3 inner inline span&lt;/span&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ciwfxj93w00098mrav765ea0k","category_id":"ciwfxj93l00058mra6ie3vkd3","_id":"ciwfxj94d000g8mra9iwzppha"},{"post_id":"ciwfxj93a00018mrarxin9yzu","category_id":"ciwfxj93l00058mra6ie3vkd3","_id":"ciwfxj94i000k8mrabx7xpjs4"},{"post_id":"ciwfxj944000b8mraewjwm2tj","category_id":"ciwfxj93l00058mra6ie3vkd3","_id":"ciwfxj94l000m8mraldhjypc9"},{"post_id":"ciwfxj94b000f8mrazqqvhman","category_id":"ciwfxj93l00058mra6ie3vkd3","_id":"ciwfxj94o000q8mra9241q086"},{"post_id":"ciwfxj93h00038mrat1t8ucin","category_id":"ciwfxj93l00058mra6ie3vkd3","_id":"ciwfxj94t000t8mra23927w0b"},{"post_id":"ciwfxj94j000l8mra2ubrp6s8","category_id":"ciwfxj93l00058mra6ie3vkd3","_id":"ciwfxj94v000v8mra1boez630"},{"post_id":"ciwfxj93o00078mra5nn0ff90","category_id":"ciwfxj93l00058mra6ie3vkd3","_id":"ciwfxj94x000y8mram6w9i374"},{"post_id":"ciwfxj94l000n8mrad8gzvij4","category_id":"ciwfxj93l00058mra6ie3vkd3","_id":"ciwfxj94x000z8mralstbbtdx"},{"post_id":"ciwfxj94q000r8mrax80a7hrf","category_id":"ciwfxj93l00058mra6ie3vkd3","_id":"ciwfxj94y00118mradiqy3tac"},{"post_id":"ciwfxj94e000h8mraap62291t","category_id":"ciwfxj94m000o8mra20fk29vr","_id":"ciwfxj95000128mraxom56vuh"},{"post_id":"ciwkdsbcm0007k2ra2bdm3z67","category_id":"ciwfxj93l00058mra6ie3vkd3","_id":"ciwkdsbdc0009k2ra4ugmdsn5"}],"PostTag":[{"post_id":"ciwfxj93a00018mrarxin9yzu","tag_id":"ciwfxj93n00068mraqx6rwvo4","_id":"ciwfxj94a000e8mrae4kvbwmn"},{"post_id":"ciwfxj93h00038mrat1t8ucin","tag_id":"ciwfxj946000d8mra4nfk5643","_id":"ciwfxj94t000s8mrat9or7xel"},{"post_id":"ciwfxj93h00038mrat1t8ucin","tag_id":"ciwfxj94h000j8mrae4ginnnx","_id":"ciwfxj94u000u8mra3zcfdpsg"},{"post_id":"ciwfxj93o00078mra5nn0ff90","tag_id":"ciwfxj94o000p8mramf85b5i5","_id":"ciwfxj94w000x8mraquc06ft4"},{"post_id":"ciwfxj93w00098mrav765ea0k","tag_id":"ciwfxj93n00068mraqx6rwvo4","_id":"ciwfxj95100148mrap9gevayt"},{"post_id":"ciwfxj93w00098mrav765ea0k","tag_id":"ciwfxj94v000w8mra803jlqel","_id":"ciwfxj95100158mrax4snvk4q"},{"post_id":"ciwfxj93w00098mrav765ea0k","tag_id":"ciwfxj94y00108mraz477h1j3","_id":"ciwfxj95200178mrap5gnyqwm"},{"post_id":"ciwfxj944000b8mraewjwm2tj","tag_id":"ciwfxj946000d8mra4nfk5643","_id":"ciwfxj95400198mrat5zagnjv"},{"post_id":"ciwfxj944000b8mraewjwm2tj","tag_id":"ciwfxj94h000j8mrae4ginnnx","_id":"ciwfxj955001a8mrakdyozfch"},{"post_id":"ciwfxj94b000f8mrazqqvhman","tag_id":"ciwfxj946000d8mra4nfk5643","_id":"ciwfxj956001c8mrap0ug22bt"},{"post_id":"ciwfxj94b000f8mrazqqvhman","tag_id":"ciwfxj94h000j8mrae4ginnnx","_id":"ciwfxj956001d8mrafxsolv4y"},{"post_id":"ciwfxj94e000h8mraap62291t","tag_id":"ciwfxj955001b8mra6yc5k81v","_id":"ciwfxj957001f8mra232y4q2h"},{"post_id":"ciwfxj94j000l8mra2ubrp6s8","tag_id":"ciwfxj957001e8mralzbjbf5v","_id":"ciwfxj958001h8mratfq0tyms"},{"post_id":"ciwfxj94j000l8mra2ubrp6s8","tag_id":"ciwfxj946000d8mra4nfk5643","_id":"ciwfxj959001i8mrapyl4f5wd"},{"post_id":"ciwfxj94l000n8mrad8gzvij4","tag_id":"ciwfxj957001e8mralzbjbf5v","_id":"ciwfxj959001k8mraw1a3ah4f"},{"post_id":"ciwfxj94l000n8mrad8gzvij4","tag_id":"ciwfxj946000d8mra4nfk5643","_id":"ciwfxj959001l8mragpmcorsd"},{"post_id":"ciwfxj94q000r8mrax80a7hrf","tag_id":"ciwfxj93n00068mraqx6rwvo4","_id":"ciwfxj95b001m8mra2j0u3945"},{"post_id":"ciwfxj94q000r8mrax80a7hrf","tag_id":"ciwfxj959001j8mra4jbfi629","_id":"ciwfxj95b001n8mrawzh5t7uo"},{"post_id":"ciwkdsbcm0007k2ra2bdm3z67","tag_id":"ciwfxj946000d8mra4nfk5643","_id":"ciwkdsbd60008k2raax89iv3c"},{"post_id":"ciwkdsbcm0007k2ra2bdm3z67","tag_id":"ciwkd216d0001k2rawylirpa7","_id":"ciwkdsbdd000ak2raqc2izpqi"},{"post_id":"ciwkdsbcm0007k2ra2bdm3z67","tag_id":"ciwkd216i0003k2ra5p5ldhx3","_id":"ciwkdsbde000bk2raypbgxgez"}],"Tag":[{"name":"记录","_id":"ciwfxj93n00068mraqx6rwvo4"},{"name":"抄抄抄","_id":"ciwfxj946000d8mra4nfk5643"},{"name":"JS 基础","_id":"ciwfxj94h000j8mrae4ginnnx"},{"name":"总结","_id":"ciwfxj94o000p8mramf85b5i5"},{"name":"操作","_id":"ciwfxj94v000w8mra803jlqel"},{"name":"CI","_id":"ciwfxj94y00108mraz477h1j3"},{"name":"开篇","_id":"ciwfxj955001b8mra6yc5k81v"},{"name":"DOM","_id":"ciwfxj957001e8mralzbjbf5v"},{"name":"Hexo","_id":"ciwfxj959001j8mra4jbfi629"},{"name":"CSS 布局","_id":"ciwkd216d0001k2rawylirpa7"},{"name":"margin","_id":"ciwkd216i0003k2ra5p5ldhx3"}]}}